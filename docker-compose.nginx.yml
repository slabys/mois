services:
  database:
    container_name: database
    image: postgres:16-alpine
    environment:
      - POSTGRES_PORT=${DB_PORT:-5432}
      - POSTGRES_DB=${DB_NAME:-database}
      - POSTGRES_USER=${DB_USER:-user}
      - POSTGRES_PASSWORD=${DB_PASS:-password}
    env_file:
      - .env
    ports:
      - ${POSTGRES_PORT:-5432}:${POSTGRES_PORT:-5432}
    volumes:
      - ./database/data:/var/lib/postgresql/data
    networks:
      - app-network
    healthcheck:
      test:
        [ "CMD-SHELL", "sh -c 'pg_isready -U ${DB_USER} ${DB_PASS}'" ]
      interval: 30s
      timeout: 10s
      retries: 5

  backend:
    container_name: backend_app1
    build:
      context: ./backend
      args:
        - PROJECT_NAME=api
        - NODE_ENV=${NODE_ENV:-production}
        - WEB_DOMAIN=${WEB_DOMAIN:-localhost}
      target: production
    environment:
      - NODE_ENV=${NODE_ENV:-production}
      - WEB_DOMAIN=${WEB_DOMAIN:-localhost}
      - DB_HOST=${DB_HOST:-database}
      - DB_PORT=${DB_PORT:-5432}
      - DB_NAME=${DB_NAME:-database}
      - DB_USER=${DB_USER:-user}
      - BASE_URL=${BASE_URL:-http://localhost:4000}
      - PORT_API=${PORT_API:-4000}
      - JWT_SECRET=${JWT_SECRET:-secret}
      - STORAGE_ROOT=${STORAGE_ROOT:-/app/storage}
      - MAIL_HOST=${MAIL_HOST:-smtp.gmail.com}
      - MAIL_USER=${MAIL_USER-info@email.org}
      - MAIL_PASS=${MAIL_PASS-"abcd efgh ijkl mnop"}
    env_file:
      - .env
    ports:
      - ${PORT_API:-4000}:${PORT_API:-4000}
    networks:
      - app-network
    healthcheck:
      test: curl --fail http://127.0.0.1:4000/health || exit 1
      interval: 30s
      timeout: 10s
      retries: 5
    volumes:
      - backend_data:/app/storage
    depends_on:
      - database
      - database_run_migrations
      - redis

  database_run_migrations:
    container_name: database_migrations
    build:
      context: ./backend
      dockerfile: Dockerfile.Migration
    environment:
      - DB_HOST=${DB_HOST:-database}
    env_file:
      - .env
    restart: no
    networks:
      - app-network
    depends_on:
      - database

  frontend:
    container_name: frontend
    build:
      context: ./frontend
      args:
        - NEXT_PUBLIC_API_URL=${NEXT_PUBLIC_API_URL:-http://localhost:4000}
    environment:
      - NEXT_PUBLIC_API_URL=${NEXT_PUBLIC_API_URL:-http://localhost:4000}
      - PORT_FE=${PORT_FE:-3000}
    env_file:
      - .env
    ports:
      - ${PORT_FE:-3000}:${PORT_FE:-3000}
    networks:
      - app-network
    depends_on:
      - backend
      - database

  nginx:
    container_name: nginx
    image: nginx:latest
    build:
      context: .
      dockerfile: ./nginx/Dockerfile
      args:
        - WEB_DOMAIN=${WEB_DOMAIN}
        - API_DOMAIN=${API_DOMAIN}
    env_file:
      - .env
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx:/etc/nginx/conf.d
      - ./certbot/www:/var/www/certbot
      - certbot_data:/etc/letsencrypt
    #    command: >
    #      /bin/sh -c
    #      "envsubst '
    #      $${WEB_DOMAIN} $${API_DOMAIN}
    #      '< /etc/nginx/conf.d/default.conf
    #      > /etc/nginx/conf.d/default.conf
    #      && nginx -g 'daemon off;'"

    networks:
      - app-network
    depends_on:
      - frontend
      - backend

  certbot:
    container_name: certbot
    image: certbot/certbot
    environment:
      - WEB_DOMAIN=${WEB_DOMAIN}
      - API_DOMAIN=${API_DOMAIN}
    env_file:
      - .env
    volumes:
      - certbot_data:/etc/letsencrypt
      - ./certbot/logs:/var/log/letsencrypt
      - ./certbot/www:/var/www/certbot
    entrypoint: >
      /bin/sh -c "
      certbot certonly --webroot --webroot-path=/var/www/certbot
      --staging
      --register-unsafely-without-email
      --agree-tos
      --no-eff-email
      -d ${WEB_DOMAIN};
      trap exit TERM; while :; do sleep 12h & wait $!; done;"
    networks:
      - app-network
    depends_on:
      - nginx

volumes:
  postgres_data:
  backend_data:
  certbot_data:
  nginx_data:

networks:
  app-network:
