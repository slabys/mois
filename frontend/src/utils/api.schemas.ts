/**
 * Generated by orval v7.3.0 üç∫
 * Do not edit manually.
 * backend API
 * The backend API description
 * OpenAPI spec version: 0.0.1
 */
export type GetUserApplicationsParams = {
  /**
   * Pagination number of results
   */
  take?: number;
  /**
   * Pagination number of skipped results
   */
  skip?: number;
};

export type GetEventSpotsParams = {
  /**
   * Pagination number of results
   */
  take?: number;
  /**
   * Pagination number of skipped results
   */
  skip?: number;
};

export type UpcomingEventsParams = {
  /**
   * Pagination number of results
   */
  take?: number;
  /**
   * Pagination number of skipped results
   */
  skip?: number;
};

export type OrganizationMembersParams = {
  /**
   * Pagination number of results
   */
  take?: number;
  /**
   * Pagination number of skipped results
   */
  skip?: number;
};

export type AllOrganizationsParams = {
  /**
   * Pagination number of results
   */
  take?: number;
  /**
   * Pagination number of skipped results
   */
  skip?: number;
};

export type UserOrganizationMembershipsParams = {
  /**
   * Pagination number of results
   */
  take?: number;
  /**
   * Pagination number of skipped results
   */
  skip?: number;
};

/**
 * @nullable
 */
export type EventPhoto = Photo | null;

export interface EventSpot {
  /** @nullable */
  capacity: number | null;
  event: Event;
  id: string;
  name: string;
  price: number;
}

/**
 * @nullable
 */
export type EventApplicationSpotType = EventSpot | null;

export interface EventApplication {
  createdAt: string;
  event: Event;
  id: string;
  /** @nullable */
  spotType: EventApplicationSpotType;
  user: User;
}

export interface UpdateEventSpot {
  /** @minimum 1 */
  capacity?: number;
  /** @minLength 6 */
  name?: string;
  /** @minimum 0 */
  price?: number;
}

export interface DeleteEventSpot {
  /** In case of valid value it replaces assigned users with new spot otherwise unset their spot */
  replaceWithSpotId?: string;
}

export interface CreateEventSpot {
  /** @minimum 1 */
  capacity: number;
  /** @minLength 6 */
  name: string;
  /** @minimum 0 */
  price: number;
}

export interface EventSpotSimple {
  /** @nullable */
  capacity: number | null;
  id: string;
  name: string;
  price: number;
}

/**
 * @nullable
 */
export type EventSimplePhoto = Photo | null;

export interface EventSimple {
  createdBy: OrganizationMember;
  description: string;
  id: string;
  /** @nullable */
  photo: EventSimplePhoto;
  since: string;
  title: string;
  until: string;
}

export interface Organization {
  createdAt: string;
  id: string;
  name: string;
}

export interface OrganizationMember {
  createdAt: string;
  id: string;
  organization: Organization;
  roles: Role[];
  user: User;
}

export interface Event {
  applications: EventApplication[];
  createdAt: string;
  createdBy: OrganizationMember;
  description: string;
  id: string;
  /** @nullable */
  photo: EventPhoto;
  since: string;
  slug: string;
  spotTypes: EventSpot[];
  title: string;
  until: string;
  visible: boolean;
}

export type RolePermissionsItem = (typeof RolePermissionsItem)[keyof typeof RolePermissionsItem];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const RolePermissionsItem = {
  createevent: "create.event",
  eventspotmanage: "event.spot.manage",
} as const;

export interface Role {
  id: string;
  name: string;
  permissions: RolePermissionsItem[];
}

export interface OrganizationMemberWithoutOrganization {
  createdAt: string;
  id: string;
  roles: Role[];
  user: User;
}

export interface OrganizationMemberWithoutUser {
  createdAt: string;
  id: string;
  organization: Organization;
  roles: Role[];
}

export interface UpdatePhoto {
  file: Blob;
}

export interface UpdateUser {
  /** First name */
  firstName?: string;
  /** Last name */
  lastName?: string;
  /**
   * User password
   * @minLength 6
   */
  password?: string;
  /** @minLength 6 */
  username?: string;
}

export interface Photo {
  createdAt: string;
  filename: string;
  id: string;
}

export interface User {
  createdAt: string;
  email: string;
  firstName: string;
  id: string;
  lastName: string;
  photo: Photo;
  updatedAt: string;
  username: string;
}

export interface CreateUser {
  /** User email */
  email: string;
  /** First name */
  firstName: string;
  /** Last name */
  lastName: string;
  /**
   * User password
   * @minLength 6
   */
  password: string;
  /** University ID */
  universityId: string;
  /** @minLength 6 */
  username: string;
}

export interface AccessToken {
  /** User access token */
  accessToken: string;
}

export interface Function {
  [key: string]: unknown;
}
