/**
 * Generated by orval v7.3.0 🍺
 * Do not edit manually.
 * backend API
 * The backend API description
 * OpenAPI spec version: 0.0.1
 */
export type GetManagementEventsParams = {
  sinceSince?: number;
  toSince?: number;
  /**
   * Pagination number of results
   */
  take?: number;
  /**
   * Pagination number of skipped results
   */
  skip?: number;
};

export type GetRoleAllPermissions200Item =
  (typeof GetRoleAllPermissions200Item)[keyof typeof GetRoleAllPermissions200Item];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const GetRoleAllPermissions200Item = {
  createevent: "create.event",
} as const;

export type GetEventSpotsParams = {
  /**
   * Pagination number of results
   */
  take?: number;
  /**
   * Pagination number of skipped results
   */
  skip?: number;
};

export type GetEventsParams = {
  sinceSince?: number;
  toSince?: number;
  /**
   * Pagination number of results
   */
  take?: number;
  /**
   * Pagination number of skipped results
   */
  skip?: number;
};

export type UpdateEventApplication200 = { [key: string]: unknown };

export type GetUserApplicationsParams = {
  sinceSince?: number;
  toSince?: number;
};

export type OrganizationMembersParams = {
  /**
   * Pagination number of results
   */
  take?: number;
  /**
   * Pagination number of skipped results
   */
  skip?: number;
};

export type UpdateOrganization201 = { [key: string]: unknown };

export type CreateOrganization201 = { [key: string]: unknown };

export type AllOrganizationsParams = {
  /**
   * Pagination number of results
   */
  take?: number;
  /**
   * Pagination number of skipped results
   */
  skip?: number;
};

export type UserOrganizationMembershipsParams = {
  /**
   * Pagination number of results
   */
  take?: number;
  /**
   * Pagination number of skipped results
   */
  skip?: number;
};

export interface InvoiceUrl {
  url: string;
}

export type InvoiceSimpleCurrency = (typeof InvoiceSimpleCurrency)[keyof typeof InvoiceSimpleCurrency];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const InvoiceSimpleCurrency = {
  CZK: "CZK",
  EUR: "EUR",
} as const;

export interface InvoiceSimpleItem {
  amount: number;
  id: number;
  name: string;
  price: number;
}

export interface InvoiceSimple {
  constantSymbol: number;
  createdAt: string;
  currency: InvoiceSimpleCurrency;
  iban: string;
  id: string;
  items: InvoiceSimpleItem[];
  subscriber: PaymentSubject;
  supplier: PaymentSubject;
  swift: string;
  variableSymbol: number;
}

export type UpdateEventSpotCurrency = (typeof UpdateEventSpotCurrency)[keyof typeof UpdateEventSpotCurrency];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const UpdateEventSpotCurrency = {
  CZK: "CZK",
  EUR: "EUR",
} as const;

export interface UpdateEventSpot {
  currency?: UpdateEventSpotCurrency;
  /** @minLength 6 */
  name?: string;
  /**
   * Price in format `1000` => `10.00`
   * @minimum 0
   */
  price?: number;
}

export interface DeleteEventSpot {
  /** In case of valid value it replaces assigned users with new spot otherwise unset their spot */
  replaceWithSpotId?: number;
}

export type CreateEventSpotCurrency = (typeof CreateEventSpotCurrency)[keyof typeof CreateEventSpotCurrency];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const CreateEventSpotCurrency = {
  CZK: "CZK",
  EUR: "EUR",
} as const;

export interface CreateEventSpot {
  currency: CreateEventSpotCurrency;
  /** @minLength 6 */
  name: string;
  /**
   * Price in format `1000` => `10.00`
   * @minimum 0
   */
  price: number;
}

export interface EventSpotSimple {
  id: number;
  name: string;
  price: number;
}

export interface UpdateEvent {
  /**
   * Event capacity
   * @minimum 0
   */
  capacity?: number;
  codeOfConductLink?: string;
  /** Generate invoices after {@link registrationDeadline} */
  generateInvoices?: boolean;
  /** @minLength 30 */
  longDescription?: string;
  photoPolicyLink?: string;
  registrationDeadline?: string;
  /** @minLength 30 */
  shortDescription?: string;
  since?: string;
  termsAndConditionsLink?: string;
  /** @minLength 6 */
  title?: string;
  until?: string;
  visible?: boolean;
}

/**
 * Additional registration properties
! Must be valid JSON schema
 */
export type CreateEventRegistrationForm = { [key: string]: unknown };

export interface CreateEvent {
  /**
   * Event capacity
   * @minimum 0
   */
  capacity: number;
  codeOfConductLink: string;
  /** Generate invoices after {@link registrationDeadline} */
  generateInvoices: boolean;
  /** @minLength 30 */
  longDescription: string;
  photoPolicyLink: string;
  registrationDeadline: string;
  /** Additional registration properties
! Must be valid JSON schema */
  registrationForm?: CreateEventRegistrationForm;
  /** @minLength 30 */
  shortDescription: string;
  since: string;
  termsAndConditionsLink: string;
  /** @minLength 6 */
  title: string;
  until: string;
  visible?: boolean;
}

/**
 * Additional registration form
Each event can have different "requirements"
 * @nullable
 */
export type EventDetailRegistrationForm = { [key: string]: unknown } | null;

/**
 * @nullable
 */
export type EventDetailPhoto = Photo | null;

export interface EventDetailLink {
  id: number;
  link: string;
  name: string;
}

export interface EventDetail {
  /** Event capacity */
  capacity: number;
  codeOfConductLink: string;
  createdAt: string;
  createdByUser: User;
  id: number;
  links: EventDetailLink[];
  longDescription: string;
  /** @nullable */
  photo: EventDetailPhoto;
  photoPolicyLink: string;
  registrationDeadline: string;
  /**
   * Additional registration form
Each event can have different "requirements"
   * @nullable
   */
  registrationForm: EventDetailRegistrationForm;
  shortDescription: string;
  since: string;
  /** Links */
  termsAndConditionsLink: string;
  title: string;
  until: string;
  visible: boolean;
}

export interface EventApplicationInvoice {
  invoice: Invoice;
  url: string;
}

export type UpdateEventApplicationAdditionalFormData = { [key: string]: unknown };

export interface UpdateEventApplication {
  additionalFormData?: UpdateEventApplicationAdditionalFormData;
  idNumber?: string;
  invoiceAddress?: CreateAddress;
  /** @nullable */
  spotTypeId?: number | null;
}

/**
 * Spot, must be one of {@link event} spots
 * @nullable
 */
export type EventApplicationSimpleSpotType = EventSpot | null;

export interface EventApplicationSimple {
  createdAt: string;
  event: EventSimple;
  id: number;
  /**
   * Spot, must be one of {@link event} spots
   * @nullable
   */
  spotType: EventApplicationSimpleSpotType;
  user: User;
}

/**
 * @nullable
 */
export type EventSimplePhoto = Photo | null;

export interface EventSimple {
  codeOfConductLink: string;
  createdByUser: User;
  id: number;
  /** @nullable */
  photo: EventSimplePhoto;
  photoPolicyLink: string;
  registrationDeadline: string;
  shortDescription: string;
  since: string;
  /** Links */
  termsAndConditionsLink: string;
  title: string;
  until: string;
  visible: boolean;
}

export type CreateEventApplicationOrganization =
  | CreateEventApplicationExistingOrganization
  | CreateEventApplicationCustomOrganization;

export type CreateEventApplicationAdditionalFormData = { [key: string]: unknown };

export interface CreateEventApplication {
  additionalFormData: CreateEventApplicationAdditionalFormData;
  idNumber: string;
  invoiceAddress: CreateAddress;
  organization: CreateEventApplicationOrganization;
  /** @nullable */
  spotTypeId?: number | null;
}

export type CreateEventApplicationCustomOrganizationType =
  (typeof CreateEventApplicationCustomOrganizationType)[keyof typeof CreateEventApplicationCustomOrganizationType];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const CreateEventApplicationCustomOrganizationType = {
  custom: "custom",
} as const;

export interface CreateEventApplicationCustomOrganization {
  country: string;
  name: string;
  type: CreateEventApplicationCustomOrganizationType;
}

export type CreateEventApplicationExistingOrganizationType =
  (typeof CreateEventApplicationExistingOrganizationType)[keyof typeof CreateEventApplicationExistingOrganizationType];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const CreateEventApplicationExistingOrganizationType = {
  organization: "organization",
} as const;

export interface CreateEventApplicationExistingOrganization {
  /** Organization ID */
  id: string;
  type: CreateEventApplicationExistingOrganizationType;
}

/**
 * Additional registration form
Each event can have different "requirements"
 * @nullable
 */
export type EventRegistrationForm = { [key: string]: unknown } | null;

/**
 * @nullable
 */
export type EventPhoto = Photo | null;

export interface EventLink {
  event: Event;
  id: number;
  link: string;
  name: string;
}

export interface Event {
  applications: EventApplication[];
  /** Event capacity */
  capacity: number;
  codeOfConductLink: string;
  createdAt: string;
  createdByUser: User;
  /** If true, generate invoices after {@link registrationDeadline} */
  generateInvoices: boolean;
  id: number;
  links: EventLink[];
  longDescription: string;
  /** @nullable */
  photo: EventPhoto;
  photoPolicyLink: string;
  registrationDeadline: string;
  /**
   * Additional registration form
Each event can have different "requirements"
   * @nullable
   */
  registrationForm: EventRegistrationForm;
  shortDescription: string;
  since: string;
  spotTypes: EventSpot[];
  /** Links */
  termsAndConditionsLink: string;
  title: string;
  until: string;
  visible: boolean;
}

export type EventApplicationAdditionalData = { [key: string]: unknown };

export type InvoiceCurrency = (typeof InvoiceCurrency)[keyof typeof InvoiceCurrency];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const InvoiceCurrency = {
  CZK: "CZK",
  EUR: "EUR",
} as const;

export interface PaymentSubject {
  address: Address;
  /** @nullable */
  cin: string | null;
  createdAt: string;
  id: string;
  name: string;
  /** @nullable */
  vatId: string | null;
}

export interface InvoiceItem {
  amount: number;
  id: number;
  invoice: Invoice;
  name: string;
  price: number;
}

export interface Invoice {
  constantSymbol: number;
  createdAt: string;
  currency: InvoiceCurrency;
  iban: string;
  id: string;
  items: InvoiceItem[];
  subscriber: PaymentSubject;
  supplier: PaymentSubject;
  swift: string;
  variableSymbol: number;
}

export interface EventCustomOrganization {
  application: EventApplication;
  country: string;
  createdAt: string;
  id: number;
  name: string;
}

export type EventSpotCurrency = (typeof EventSpotCurrency)[keyof typeof EventSpotCurrency];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const EventSpotCurrency = {
  CZK: "CZK",
  EUR: "EUR",
} as const;

export interface EventSpot {
  currency: EventSpotCurrency;
  event: Event;
  id: number;
  name: string;
  price: number;
}

/**
 * Spot, must be one of {@link event} spots
 * @nullable
 */
export type EventApplicationSpotType = EventSpot | null;

export interface EventApplication {
  additionalData: EventApplicationAdditionalData;
  createdAt: string;
  customOrganization: EventCustomOrganization;
  event: Event;
  id: number;
  idNumber: string;
  invoice: Invoice;
  invoiceAddress: Address;
  organization: Organization;
  personalAddress: Address;
  /**
   * Spot, must be one of {@link event} spots
   * @nullable
   */
  spotType: EventApplicationSpotType;
  user: User;
}

export interface DeleteOrganizationMembers {
  memberIds: number[];
}

export interface OrganizationMember {
  createdAt: string;
  id: string;
  organization: Organization;
  user: User;
}

export interface AddOrganizationMembers {
  userIds: string[];
}

export interface OrganizationMemberWithoutOrganization {
  createdAt: string;
  id: string;
  user: User;
}

export interface UpdateOrganization {
  address?: CreateAddress;
  name?: string;
}

export interface CreateOrganization {
  address: CreateAddress;
  name: string;
}

/**
 * @nullable
 */
export type OrganizationManager = User | null;

export interface UpdatePhoto {
  file: Blob;
}

/**
 * User gender
 */
export type UpdateUserGender = (typeof UpdateUserGender)[keyof typeof UpdateUserGender];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const UpdateUserGender = {
  male: "male",
  female: "female",
  "non-binary": "non-binary",
  "prefer-not-to-say": "prefer-not-to-say",
} as const;

export interface UpdateUser {
  /** First name */
  firstName?: string;
  /** User gender */
  gender?: UpdateUserGender;
  /** Last name */
  lastName?: string;
  /**
   * User password
   * @minLength 6
   */
  password?: string;
  personalAddress?: CreateAddress;
  /**
   * Must not contain special characters
   * @minLength 6
   * @pattern /^[a-zA-Z0-9]+$/
   */
  username?: string;
}

export type UserGender = (typeof UserGender)[keyof typeof UserGender];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const UserGender = {
  male: "male",
  female: "female",
  "non-binary": "non-binary",
  "prefer-not-to-say": "prefer-not-to-say",
} as const;

export type RolePermissions = (typeof RolePermissions)[keyof typeof RolePermissions];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const RolePermissions = {
  createevent: "create.event",
} as const;

export interface Role {
  id: string;
  name: string;
  permissions: RolePermissions;
}

export interface Address {
  city: string;
  country: string;
  /** House number with entrace number */
  houseNumber: string;
  id: number;
  street: string;
  zip: string;
}

export interface Organization {
  address: Address;
  createdAt: string;
  id: string;
  /** @nullable */
  manager: OrganizationManager;
  name: string;
}

export interface OrganizationMemberWithoutUser {
  createdAt: string;
  id: string;
  organization: Organization;
}

export interface Photo {
  createdAt: string;
  filename: string;
  id: string;
}

export interface User {
  createdAt: string;
  email: string;
  firstName: string;
  gender: UserGender;
  id: string;
  lastName: string;
  personalAddress: Address;
  photo: Photo;
  role: Role;
  updatedAt: string;
  username: string;
}

/**
 * User gender
 */
export type CreateUserGender = (typeof CreateUserGender)[keyof typeof CreateUserGender];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const CreateUserGender = {
  male: "male",
  female: "female",
  "non-binary": "non-binary",
  "prefer-not-to-say": "prefer-not-to-say",
} as const;

export interface CreateAddress {
  city: string;
  country: string;
  /**
   * House number with entrance support
   * @pattern /^(\d+)(\/\d+)?$/
   */
  houseNumber: string;
  street: string;
  zip: string;
}

export interface CreateUser {
  /** User email */
  email: string;
  /** First name */
  firstName: string;
  /** User gender */
  gender: CreateUserGender;
  /** Last name */
  lastName: string;
  /**
   * User password
   * @minLength 6
   */
  password: string;
  personalAddress?: CreateAddress;
  /**
   * Must not contain special characters
   * @minLength 6
   * @pattern /^[a-zA-Z0-9]+$/
   */
  username: string;
}

export interface AccessToken {
  /** User access token */
  accessToken: string;
}

export interface LoginUser {
  /** User email or username */
  email: string;
  /**
   * User password
   * @minLength 6
   */
  password: string;
}
