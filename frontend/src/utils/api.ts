/**
 * Generated by orval v7.3.0 üç∫
 * Do not edit manually.
 * backend API
 * The backend API description
 * OpenAPI spec version: 0.0.1
 */
import { useMutation, useQuery } from "@tanstack/react-query";
import type {
  DataTag,
  DefinedInitialDataOptions,
  DefinedUseQueryResult,
  MutationFunction,
  QueryFunction,
  QueryKey,
  UndefinedInitialDataOptions,
  UseMutationOptions,
  UseMutationResult,
  UseQueryOptions,
  UseQueryResult,
} from "@tanstack/react-query";

import type {
  AccessToken,
  AllOrganizationsParams,
  CreateEventSpot,
  CreateUser,
  DeleteEventSpot,
  EventApplication,
  EventSimple,
  EventSpotSimple,
  Function,
  GetEventSpotsParams,
  GetUserApplicationsParams,
  Organization,
  OrganizationMemberWithoutOrganization,
  OrganizationMemberWithoutUser,
  OrganizationMembersParams,
  UpcomingEventsParams,
  UpdateEventSpot,
  UpdatePhoto,
  UpdateUser,
  User,
  UserOrganizationMembershipsParams,
} from "./api.schemas";
import { customInstance } from "./customInstance";
import type { BodyType, ErrorType } from "./customInstance";

type SecondParameter<T extends (...args: any) => any> = Parameters<T>[1];

/**
 * Try to login user with given email and password
 */
export const loginUserWithEmail = (
  _function: BodyType<Function>,
  options?: SecondParameter<typeof customInstance>,
  signal?: AbortSignal,
) => {
  return customInstance<AccessToken>(
    { url: `/auth/login`, method: "POST", headers: { "Content-Type": "application/json" }, data: _function, signal },
    options,
  );
};

export const getLoginUserWithEmailMutationOptions = <TError = ErrorType<void>, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof loginUserWithEmail>>,
    TError,
    { data: BodyType<Function> },
    TContext
  >;
  request?: SecondParameter<typeof customInstance>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof loginUserWithEmail>>,
  TError,
  { data: BodyType<Function> },
  TContext
> => {
  const { mutation: mutationOptions, request: requestOptions } = options ?? {};

  const mutationFn: MutationFunction<Awaited<ReturnType<typeof loginUserWithEmail>>, { data: BodyType<Function> }> = (
    props,
  ) => {
    const { data } = props ?? {};

    return loginUserWithEmail(data, requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type LoginUserWithEmailMutationResult = NonNullable<Awaited<ReturnType<typeof loginUserWithEmail>>>;
export type LoginUserWithEmailMutationBody = BodyType<Function>;
export type LoginUserWithEmailMutationError = ErrorType<void>;

export const useLoginUserWithEmail = <TError = ErrorType<void>, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof loginUserWithEmail>>,
    TError,
    { data: BodyType<Function> },
    TContext
  >;
  request?: SecondParameter<typeof customInstance>;
}): UseMutationResult<
  Awaited<ReturnType<typeof loginUserWithEmail>>,
  TError,
  { data: BodyType<Function> },
  TContext
> => {
  const mutationOptions = getLoginUserWithEmailMutationOptions(options);

  return useMutation(mutationOptions);
};

/**
 * Logout user
 */
export const logoutUser = (options?: SecondParameter<typeof customInstance>) => {
  return customInstance<void>({ url: `/auth/logout`, method: "DELETE" }, options);
};

export const getLogoutUserMutationOptions = <TError = ErrorType<unknown>, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<Awaited<ReturnType<typeof logoutUser>>, TError, void, TContext>;
  request?: SecondParameter<typeof customInstance>;
}): UseMutationOptions<Awaited<ReturnType<typeof logoutUser>>, TError, void, TContext> => {
  const { mutation: mutationOptions, request: requestOptions } = options ?? {};

  const mutationFn: MutationFunction<Awaited<ReturnType<typeof logoutUser>>, void> = () => {
    return logoutUser(requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type LogoutUserMutationResult = NonNullable<Awaited<ReturnType<typeof logoutUser>>>;

export type LogoutUserMutationError = ErrorType<unknown>;

export const useLogoutUser = <TError = ErrorType<unknown>, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<Awaited<ReturnType<typeof logoutUser>>, TError, void, TContext>;
  request?: SecondParameter<typeof customInstance>;
}): UseMutationResult<Awaited<ReturnType<typeof logoutUser>>, TError, void, TContext> => {
  const mutationOptions = getLogoutUserMutationOptions(options);

  return useMutation(mutationOptions);
};

export const createUser = (
  createUser: BodyType<CreateUser>,
  options?: SecondParameter<typeof customInstance>,
  signal?: AbortSignal,
) => {
  return customInstance<User>(
    { url: `/users`, method: "POST", headers: { "Content-Type": "application/json" }, data: createUser, signal },
    options,
  );
};

export const getCreateUserMutationOptions = <TError = ErrorType<void>, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof createUser>>,
    TError,
    { data: BodyType<CreateUser> },
    TContext
  >;
  request?: SecondParameter<typeof customInstance>;
}): UseMutationOptions<Awaited<ReturnType<typeof createUser>>, TError, { data: BodyType<CreateUser> }, TContext> => {
  const { mutation: mutationOptions, request: requestOptions } = options ?? {};

  const mutationFn: MutationFunction<Awaited<ReturnType<typeof createUser>>, { data: BodyType<CreateUser> }> = (
    props,
  ) => {
    const { data } = props ?? {};

    return createUser(data, requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type CreateUserMutationResult = NonNullable<Awaited<ReturnType<typeof createUser>>>;
export type CreateUserMutationBody = BodyType<CreateUser>;
export type CreateUserMutationError = ErrorType<void>;

export const useCreateUser = <TError = ErrorType<void>, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof createUser>>,
    TError,
    { data: BodyType<CreateUser> },
    TContext
  >;
  request?: SecondParameter<typeof customInstance>;
}): UseMutationResult<Awaited<ReturnType<typeof createUser>>, TError, { data: BodyType<CreateUser> }, TContext> => {
  const mutationOptions = getCreateUserMutationOptions(options);

  return useMutation(mutationOptions);
};

export const updateCurrentUser = (
  updateUser: BodyType<UpdateUser>,
  options?: SecondParameter<typeof customInstance>,
) => {
  return customInstance<User>(
    { url: `/users`, method: "PATCH", headers: { "Content-Type": "application/json" }, data: updateUser },
    options,
  );
};

export const getUpdateCurrentUserMutationOptions = <TError = ErrorType<unknown>, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof updateCurrentUser>>,
    TError,
    { data: BodyType<UpdateUser> },
    TContext
  >;
  request?: SecondParameter<typeof customInstance>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof updateCurrentUser>>,
  TError,
  { data: BodyType<UpdateUser> },
  TContext
> => {
  const { mutation: mutationOptions, request: requestOptions } = options ?? {};

  const mutationFn: MutationFunction<Awaited<ReturnType<typeof updateCurrentUser>>, { data: BodyType<UpdateUser> }> = (
    props,
  ) => {
    const { data } = props ?? {};

    return updateCurrentUser(data, requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type UpdateCurrentUserMutationResult = NonNullable<Awaited<ReturnType<typeof updateCurrentUser>>>;
export type UpdateCurrentUserMutationBody = BodyType<UpdateUser>;
export type UpdateCurrentUserMutationError = ErrorType<unknown>;

export const useUpdateCurrentUser = <TError = ErrorType<unknown>, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof updateCurrentUser>>,
    TError,
    { data: BodyType<UpdateUser> },
    TContext
  >;
  request?: SecondParameter<typeof customInstance>;
}): UseMutationResult<
  Awaited<ReturnType<typeof updateCurrentUser>>,
  TError,
  { data: BodyType<UpdateUser> },
  TContext
> => {
  const mutationOptions = getUpdateCurrentUserMutationOptions(options);

  return useMutation(mutationOptions);
};

export const getCurrentUser = (options?: SecondParameter<typeof customInstance>, signal?: AbortSignal) => {
  return customInstance<User>({ url: `/users`, method: "GET", signal }, options);
};

export const getGetCurrentUserQueryKey = () => {
  return [`/users`] as const;
};

export const getGetCurrentUserQueryOptions = <
  TData = Awaited<ReturnType<typeof getCurrentUser>>,
  TError = ErrorType<unknown>,
>(options?: {
  query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getCurrentUser>>, TError, TData>>;
  request?: SecondParameter<typeof customInstance>;
}) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getGetCurrentUserQueryKey();

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getCurrentUser>>> = ({ signal }) =>
    getCurrentUser(requestOptions, signal);

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof getCurrentUser>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData> };
};

export type GetCurrentUserQueryResult = NonNullable<Awaited<ReturnType<typeof getCurrentUser>>>;
export type GetCurrentUserQueryError = ErrorType<unknown>;

export function useGetCurrentUser<
  TData = Awaited<ReturnType<typeof getCurrentUser>>,
  TError = ErrorType<unknown>,
>(options: {
  query: Partial<UseQueryOptions<Awaited<ReturnType<typeof getCurrentUser>>, TError, TData>> &
    Pick<DefinedInitialDataOptions<Awaited<ReturnType<typeof getCurrentUser>>, TError, TData>, "initialData">;
  request?: SecondParameter<typeof customInstance>;
}): DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };
export function useGetCurrentUser<
  TData = Awaited<ReturnType<typeof getCurrentUser>>,
  TError = ErrorType<unknown>,
>(options?: {
  query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getCurrentUser>>, TError, TData>> &
    Pick<UndefinedInitialDataOptions<Awaited<ReturnType<typeof getCurrentUser>>, TError, TData>, "initialData">;
  request?: SecondParameter<typeof customInstance>;
}): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };
export function useGetCurrentUser<
  TData = Awaited<ReturnType<typeof getCurrentUser>>,
  TError = ErrorType<unknown>,
>(options?: {
  query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getCurrentUser>>, TError, TData>>;
  request?: SecondParameter<typeof customInstance>;
}): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

export function useGetCurrentUser<
  TData = Awaited<ReturnType<typeof getCurrentUser>>,
  TError = ErrorType<unknown>,
>(options?: {
  query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getCurrentUser>>, TError, TData>>;
  request?: SecondParameter<typeof customInstance>;
}): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {
  const queryOptions = getGetCurrentUserQueryOptions(options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey;

  return query;
}

export const updateCurrentUserPhoto = (
  updatePhoto: BodyType<UpdatePhoto>,
  options?: SecondParameter<typeof customInstance>,
) => {
  const formData = new FormData();
  formData.append("file", updatePhoto.file);

  return customInstance<User>(
    { url: `/users/photo`, method: "PATCH", headers: { "Content-Type": "multipart/form-data" }, data: formData },
    options,
  );
};

export const getUpdateCurrentUserPhotoMutationOptions = <TError = ErrorType<unknown>, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof updateCurrentUserPhoto>>,
    TError,
    { data: BodyType<UpdatePhoto> },
    TContext
  >;
  request?: SecondParameter<typeof customInstance>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof updateCurrentUserPhoto>>,
  TError,
  { data: BodyType<UpdatePhoto> },
  TContext
> => {
  const { mutation: mutationOptions, request: requestOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof updateCurrentUserPhoto>>,
    { data: BodyType<UpdatePhoto> }
  > = (props) => {
    const { data } = props ?? {};

    return updateCurrentUserPhoto(data, requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type UpdateCurrentUserPhotoMutationResult = NonNullable<Awaited<ReturnType<typeof updateCurrentUserPhoto>>>;
export type UpdateCurrentUserPhotoMutationBody = BodyType<UpdatePhoto>;
export type UpdateCurrentUserPhotoMutationError = ErrorType<unknown>;

export const useUpdateCurrentUserPhoto = <TError = ErrorType<unknown>, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof updateCurrentUserPhoto>>,
    TError,
    { data: BodyType<UpdatePhoto> },
    TContext
  >;
  request?: SecondParameter<typeof customInstance>;
}): UseMutationResult<
  Awaited<ReturnType<typeof updateCurrentUserPhoto>>,
  TError,
  { data: BodyType<UpdatePhoto> },
  TContext
> => {
  const mutationOptions = getUpdateCurrentUserPhotoMutationOptions(options);

  return useMutation(mutationOptions);
};

export const userOrganizationMemberships = (
  id: string,
  params?: UserOrganizationMembershipsParams,
  options?: SecondParameter<typeof customInstance>,
  signal?: AbortSignal,
) => {
  return customInstance<OrganizationMemberWithoutUser[]>(
    { url: `/users/${id}/organizations`, method: "GET", params, signal },
    options,
  );
};

export const getUserOrganizationMembershipsQueryKey = (id: string, params?: UserOrganizationMembershipsParams) => {
  return [`/users/${id}/organizations`, ...(params ? [params] : [])] as const;
};

export const getUserOrganizationMembershipsQueryOptions = <
  TData = Awaited<ReturnType<typeof userOrganizationMemberships>>,
  TError = ErrorType<unknown>,
>(
  id: string,
  params?: UserOrganizationMembershipsParams,
  options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof userOrganizationMemberships>>, TError, TData>>;
    request?: SecondParameter<typeof customInstance>;
  },
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getUserOrganizationMembershipsQueryKey(id, params);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof userOrganizationMemberships>>> = ({ signal }) =>
    userOrganizationMemberships(id, params, requestOptions, signal);

  return { queryKey, queryFn, enabled: !!id, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof userOrganizationMemberships>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData> };
};

export type UserOrganizationMembershipsQueryResult = NonNullable<
  Awaited<ReturnType<typeof userOrganizationMemberships>>
>;
export type UserOrganizationMembershipsQueryError = ErrorType<unknown>;

export function useUserOrganizationMemberships<
  TData = Awaited<ReturnType<typeof userOrganizationMemberships>>,
  TError = ErrorType<unknown>,
>(
  id: string,
  params: undefined | UserOrganizationMembershipsParams,
  options: {
    query: Partial<UseQueryOptions<Awaited<ReturnType<typeof userOrganizationMemberships>>, TError, TData>> &
      Pick<
        DefinedInitialDataOptions<Awaited<ReturnType<typeof userOrganizationMemberships>>, TError, TData>,
        "initialData"
      >;
    request?: SecondParameter<typeof customInstance>;
  },
): DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };
export function useUserOrganizationMemberships<
  TData = Awaited<ReturnType<typeof userOrganizationMemberships>>,
  TError = ErrorType<unknown>,
>(
  id: string,
  params?: UserOrganizationMembershipsParams,
  options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof userOrganizationMemberships>>, TError, TData>> &
      Pick<
        UndefinedInitialDataOptions<Awaited<ReturnType<typeof userOrganizationMemberships>>, TError, TData>,
        "initialData"
      >;
    request?: SecondParameter<typeof customInstance>;
  },
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };
export function useUserOrganizationMemberships<
  TData = Awaited<ReturnType<typeof userOrganizationMemberships>>,
  TError = ErrorType<unknown>,
>(
  id: string,
  params?: UserOrganizationMembershipsParams,
  options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof userOrganizationMemberships>>, TError, TData>>;
    request?: SecondParameter<typeof customInstance>;
  },
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

export function useUserOrganizationMemberships<
  TData = Awaited<ReturnType<typeof userOrganizationMemberships>>,
  TError = ErrorType<unknown>,
>(
  id: string,
  params?: UserOrganizationMembershipsParams,
  options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof userOrganizationMemberships>>, TError, TData>>;
    request?: SecondParameter<typeof customInstance>;
  },
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {
  const queryOptions = getUserOrganizationMembershipsQueryOptions(id, params, options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey;

  return query;
}

export const getPhoto = (id: string, options?: SecondParameter<typeof customInstance>, signal?: AbortSignal) => {
  return customInstance<void>({ url: `/photo/${id}`, method: "GET", signal }, options);
};

export const getGetPhotoQueryKey = (id: string) => {
  return [`/photo/${id}`] as const;
};

export const getGetPhotoQueryOptions = <TData = Awaited<ReturnType<typeof getPhoto>>, TError = ErrorType<void>>(
  id: string,
  options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getPhoto>>, TError, TData>>;
    request?: SecondParameter<typeof customInstance>;
  },
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getGetPhotoQueryKey(id);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getPhoto>>> = ({ signal }) =>
    getPhoto(id, requestOptions, signal);

  return { queryKey, queryFn, enabled: !!id, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof getPhoto>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData> };
};

export type GetPhotoQueryResult = NonNullable<Awaited<ReturnType<typeof getPhoto>>>;
export type GetPhotoQueryError = ErrorType<void>;

export function useGetPhoto<TData = Awaited<ReturnType<typeof getPhoto>>, TError = ErrorType<void>>(
  id: string,
  options: {
    query: Partial<UseQueryOptions<Awaited<ReturnType<typeof getPhoto>>, TError, TData>> &
      Pick<DefinedInitialDataOptions<Awaited<ReturnType<typeof getPhoto>>, TError, TData>, "initialData">;
    request?: SecondParameter<typeof customInstance>;
  },
): DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };
export function useGetPhoto<TData = Awaited<ReturnType<typeof getPhoto>>, TError = ErrorType<void>>(
  id: string,
  options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getPhoto>>, TError, TData>> &
      Pick<UndefinedInitialDataOptions<Awaited<ReturnType<typeof getPhoto>>, TError, TData>, "initialData">;
    request?: SecondParameter<typeof customInstance>;
  },
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };
export function useGetPhoto<TData = Awaited<ReturnType<typeof getPhoto>>, TError = ErrorType<void>>(
  id: string,
  options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getPhoto>>, TError, TData>>;
    request?: SecondParameter<typeof customInstance>;
  },
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

export function useGetPhoto<TData = Awaited<ReturnType<typeof getPhoto>>, TError = ErrorType<void>>(
  id: string,
  options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getPhoto>>, TError, TData>>;
    request?: SecondParameter<typeof customInstance>;
  },
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {
  const queryOptions = getGetPhotoQueryOptions(id, options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey;

  return query;
}

export const allOrganizations = (
  params?: AllOrganizationsParams,
  options?: SecondParameter<typeof customInstance>,
  signal?: AbortSignal,
) => {
  return customInstance<Organization[]>({ url: `/organizations`, method: "GET", params, signal }, options);
};

export const getAllOrganizationsQueryKey = (params?: AllOrganizationsParams) => {
  return [`/organizations`, ...(params ? [params] : [])] as const;
};

export const getAllOrganizationsQueryOptions = <
  TData = Awaited<ReturnType<typeof allOrganizations>>,
  TError = ErrorType<unknown>,
>(
  params?: AllOrganizationsParams,
  options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof allOrganizations>>, TError, TData>>;
    request?: SecondParameter<typeof customInstance>;
  },
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getAllOrganizationsQueryKey(params);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof allOrganizations>>> = ({ signal }) =>
    allOrganizations(params, requestOptions, signal);

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof allOrganizations>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData> };
};

export type AllOrganizationsQueryResult = NonNullable<Awaited<ReturnType<typeof allOrganizations>>>;
export type AllOrganizationsQueryError = ErrorType<unknown>;

export function useAllOrganizations<TData = Awaited<ReturnType<typeof allOrganizations>>, TError = ErrorType<unknown>>(
  params: undefined | AllOrganizationsParams,
  options: {
    query: Partial<UseQueryOptions<Awaited<ReturnType<typeof allOrganizations>>, TError, TData>> &
      Pick<DefinedInitialDataOptions<Awaited<ReturnType<typeof allOrganizations>>, TError, TData>, "initialData">;
    request?: SecondParameter<typeof customInstance>;
  },
): DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };
export function useAllOrganizations<TData = Awaited<ReturnType<typeof allOrganizations>>, TError = ErrorType<unknown>>(
  params?: AllOrganizationsParams,
  options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof allOrganizations>>, TError, TData>> &
      Pick<UndefinedInitialDataOptions<Awaited<ReturnType<typeof allOrganizations>>, TError, TData>, "initialData">;
    request?: SecondParameter<typeof customInstance>;
  },
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };
export function useAllOrganizations<TData = Awaited<ReturnType<typeof allOrganizations>>, TError = ErrorType<unknown>>(
  params?: AllOrganizationsParams,
  options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof allOrganizations>>, TError, TData>>;
    request?: SecondParameter<typeof customInstance>;
  },
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

export function useAllOrganizations<TData = Awaited<ReturnType<typeof allOrganizations>>, TError = ErrorType<unknown>>(
  params?: AllOrganizationsParams,
  options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof allOrganizations>>, TError, TData>>;
    request?: SecondParameter<typeof customInstance>;
  },
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {
  const queryOptions = getAllOrganizationsQueryOptions(params, options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey;

  return query;
}

export const organizationMembers = (
  id: string,
  params?: OrganizationMembersParams,
  options?: SecondParameter<typeof customInstance>,
  signal?: AbortSignal,
) => {
  return customInstance<OrganizationMemberWithoutOrganization[]>(
    { url: `/organization/${id}/members`, method: "GET", params, signal },
    options,
  );
};

export const getOrganizationMembersQueryKey = (id: string, params?: OrganizationMembersParams) => {
  return [`/organization/${id}/members`, ...(params ? [params] : [])] as const;
};

export const getOrganizationMembersQueryOptions = <
  TData = Awaited<ReturnType<typeof organizationMembers>>,
  TError = ErrorType<unknown>,
>(
  id: string,
  params?: OrganizationMembersParams,
  options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof organizationMembers>>, TError, TData>>;
    request?: SecondParameter<typeof customInstance>;
  },
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getOrganizationMembersQueryKey(id, params);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof organizationMembers>>> = ({ signal }) =>
    organizationMembers(id, params, requestOptions, signal);

  return { queryKey, queryFn, enabled: !!id, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof organizationMembers>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData> };
};

export type OrganizationMembersQueryResult = NonNullable<Awaited<ReturnType<typeof organizationMembers>>>;
export type OrganizationMembersQueryError = ErrorType<unknown>;

export function useOrganizationMembers<
  TData = Awaited<ReturnType<typeof organizationMembers>>,
  TError = ErrorType<unknown>,
>(
  id: string,
  params: undefined | OrganizationMembersParams,
  options: {
    query: Partial<UseQueryOptions<Awaited<ReturnType<typeof organizationMembers>>, TError, TData>> &
      Pick<DefinedInitialDataOptions<Awaited<ReturnType<typeof organizationMembers>>, TError, TData>, "initialData">;
    request?: SecondParameter<typeof customInstance>;
  },
): DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };
export function useOrganizationMembers<
  TData = Awaited<ReturnType<typeof organizationMembers>>,
  TError = ErrorType<unknown>,
>(
  id: string,
  params?: OrganizationMembersParams,
  options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof organizationMembers>>, TError, TData>> &
      Pick<UndefinedInitialDataOptions<Awaited<ReturnType<typeof organizationMembers>>, TError, TData>, "initialData">;
    request?: SecondParameter<typeof customInstance>;
  },
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };
export function useOrganizationMembers<
  TData = Awaited<ReturnType<typeof organizationMembers>>,
  TError = ErrorType<unknown>,
>(
  id: string,
  params?: OrganizationMembersParams,
  options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof organizationMembers>>, TError, TData>>;
    request?: SecondParameter<typeof customInstance>;
  },
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

export function useOrganizationMembers<
  TData = Awaited<ReturnType<typeof organizationMembers>>,
  TError = ErrorType<unknown>,
>(
  id: string,
  params?: OrganizationMembersParams,
  options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof organizationMembers>>, TError, TData>>;
    request?: SecondParameter<typeof customInstance>;
  },
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {
  const queryOptions = getOrganizationMembersQueryOptions(id, params, options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey;

  return query;
}

export const userOrganizationMembership = (
  id: string,
  options?: SecondParameter<typeof customInstance>,
  signal?: AbortSignal,
) => {
  return customInstance<OrganizationMemberWithoutOrganization>(
    { url: `/organization/${id}/membership`, method: "GET", signal },
    options,
  );
};

export const getUserOrganizationMembershipQueryKey = (id: string) => {
  return [`/organization/${id}/membership`] as const;
};

export const getUserOrganizationMembershipQueryOptions = <
  TData = Awaited<ReturnType<typeof userOrganizationMembership>>,
  TError = ErrorType<void>,
>(
  id: string,
  options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof userOrganizationMembership>>, TError, TData>>;
    request?: SecondParameter<typeof customInstance>;
  },
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getUserOrganizationMembershipQueryKey(id);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof userOrganizationMembership>>> = ({ signal }) =>
    userOrganizationMembership(id, requestOptions, signal);

  return { queryKey, queryFn, enabled: !!id, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof userOrganizationMembership>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData> };
};

export type UserOrganizationMembershipQueryResult = NonNullable<Awaited<ReturnType<typeof userOrganizationMembership>>>;
export type UserOrganizationMembershipQueryError = ErrorType<void>;

export function useUserOrganizationMembership<
  TData = Awaited<ReturnType<typeof userOrganizationMembership>>,
  TError = ErrorType<void>,
>(
  id: string,
  options: {
    query: Partial<UseQueryOptions<Awaited<ReturnType<typeof userOrganizationMembership>>, TError, TData>> &
      Pick<
        DefinedInitialDataOptions<Awaited<ReturnType<typeof userOrganizationMembership>>, TError, TData>,
        "initialData"
      >;
    request?: SecondParameter<typeof customInstance>;
  },
): DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };
export function useUserOrganizationMembership<
  TData = Awaited<ReturnType<typeof userOrganizationMembership>>,
  TError = ErrorType<void>,
>(
  id: string,
  options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof userOrganizationMembership>>, TError, TData>> &
      Pick<
        UndefinedInitialDataOptions<Awaited<ReturnType<typeof userOrganizationMembership>>, TError, TData>,
        "initialData"
      >;
    request?: SecondParameter<typeof customInstance>;
  },
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };
export function useUserOrganizationMembership<
  TData = Awaited<ReturnType<typeof userOrganizationMembership>>,
  TError = ErrorType<void>,
>(
  id: string,
  options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof userOrganizationMembership>>, TError, TData>>;
    request?: SecondParameter<typeof customInstance>;
  },
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

export function useUserOrganizationMembership<
  TData = Awaited<ReturnType<typeof userOrganizationMembership>>,
  TError = ErrorType<void>,
>(
  id: string,
  options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof userOrganizationMembership>>, TError, TData>>;
    request?: SecondParameter<typeof customInstance>;
  },
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {
  const queryOptions = getUserOrganizationMembershipQueryOptions(id, options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey;

  return query;
}

/**
 * Find upcoming visible events
 */
export const upcomingEvents = (
  params?: UpcomingEventsParams,
  options?: SecondParameter<typeof customInstance>,
  signal?: AbortSignal,
) => {
  return customInstance<EventSimple[]>({ url: `/events/upcoming`, method: "GET", params, signal }, options);
};

export const getUpcomingEventsQueryKey = (params?: UpcomingEventsParams) => {
  return [`/events/upcoming`, ...(params ? [params] : [])] as const;
};

export const getUpcomingEventsQueryOptions = <
  TData = Awaited<ReturnType<typeof upcomingEvents>>,
  TError = ErrorType<unknown>,
>(
  params?: UpcomingEventsParams,
  options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof upcomingEvents>>, TError, TData>>;
    request?: SecondParameter<typeof customInstance>;
  },
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getUpcomingEventsQueryKey(params);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof upcomingEvents>>> = ({ signal }) =>
    upcomingEvents(params, requestOptions, signal);

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof upcomingEvents>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData> };
};

export type UpcomingEventsQueryResult = NonNullable<Awaited<ReturnType<typeof upcomingEvents>>>;
export type UpcomingEventsQueryError = ErrorType<unknown>;

export function useUpcomingEvents<TData = Awaited<ReturnType<typeof upcomingEvents>>, TError = ErrorType<unknown>>(
  params: undefined | UpcomingEventsParams,
  options: {
    query: Partial<UseQueryOptions<Awaited<ReturnType<typeof upcomingEvents>>, TError, TData>> &
      Pick<DefinedInitialDataOptions<Awaited<ReturnType<typeof upcomingEvents>>, TError, TData>, "initialData">;
    request?: SecondParameter<typeof customInstance>;
  },
): DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };
export function useUpcomingEvents<TData = Awaited<ReturnType<typeof upcomingEvents>>, TError = ErrorType<unknown>>(
  params?: UpcomingEventsParams,
  options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof upcomingEvents>>, TError, TData>> &
      Pick<UndefinedInitialDataOptions<Awaited<ReturnType<typeof upcomingEvents>>, TError, TData>, "initialData">;
    request?: SecondParameter<typeof customInstance>;
  },
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };
export function useUpcomingEvents<TData = Awaited<ReturnType<typeof upcomingEvents>>, TError = ErrorType<unknown>>(
  params?: UpcomingEventsParams,
  options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof upcomingEvents>>, TError, TData>>;
    request?: SecondParameter<typeof customInstance>;
  },
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

export function useUpcomingEvents<TData = Awaited<ReturnType<typeof upcomingEvents>>, TError = ErrorType<unknown>>(
  params?: UpcomingEventsParams,
  options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof upcomingEvents>>, TError, TData>>;
    request?: SecondParameter<typeof customInstance>;
  },
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {
  const queryOptions = getUpcomingEventsQueryOptions(params, options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey;

  return query;
}

/**
 * Find event by ID or slug
 */
export const getEvent = (idOrSlug: string, options?: SecondParameter<typeof customInstance>, signal?: AbortSignal) => {
  return customInstance<EventSimple>({ url: `/events/${idOrSlug}`, method: "GET", signal }, options);
};

export const getGetEventQueryKey = (idOrSlug: string) => {
  return [`/events/${idOrSlug}`] as const;
};

export const getGetEventQueryOptions = <TData = Awaited<ReturnType<typeof getEvent>>, TError = ErrorType<void>>(
  idOrSlug: string,
  options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getEvent>>, TError, TData>>;
    request?: SecondParameter<typeof customInstance>;
  },
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getGetEventQueryKey(idOrSlug);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getEvent>>> = ({ signal }) =>
    getEvent(idOrSlug, requestOptions, signal);

  return { queryKey, queryFn, enabled: !!idOrSlug, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof getEvent>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData> };
};

export type GetEventQueryResult = NonNullable<Awaited<ReturnType<typeof getEvent>>>;
export type GetEventQueryError = ErrorType<void>;

export function useGetEvent<TData = Awaited<ReturnType<typeof getEvent>>, TError = ErrorType<void>>(
  idOrSlug: string,
  options: {
    query: Partial<UseQueryOptions<Awaited<ReturnType<typeof getEvent>>, TError, TData>> &
      Pick<DefinedInitialDataOptions<Awaited<ReturnType<typeof getEvent>>, TError, TData>, "initialData">;
    request?: SecondParameter<typeof customInstance>;
  },
): DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };
export function useGetEvent<TData = Awaited<ReturnType<typeof getEvent>>, TError = ErrorType<void>>(
  idOrSlug: string,
  options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getEvent>>, TError, TData>> &
      Pick<UndefinedInitialDataOptions<Awaited<ReturnType<typeof getEvent>>, TError, TData>, "initialData">;
    request?: SecondParameter<typeof customInstance>;
  },
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };
export function useGetEvent<TData = Awaited<ReturnType<typeof getEvent>>, TError = ErrorType<void>>(
  idOrSlug: string,
  options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getEvent>>, TError, TData>>;
    request?: SecondParameter<typeof customInstance>;
  },
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

export function useGetEvent<TData = Awaited<ReturnType<typeof getEvent>>, TError = ErrorType<void>>(
  idOrSlug: string,
  options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getEvent>>, TError, TData>>;
    request?: SecondParameter<typeof customInstance>;
  },
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {
  const queryOptions = getGetEventQueryOptions(idOrSlug, options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey;

  return query;
}

/**
 * Create new event

Organization permissions required: `create.event`
 */
export const createEvent = (
  organizationId: string,
  _function: BodyType<Function>,
  options?: SecondParameter<typeof customInstance>,
  signal?: AbortSignal,
) => {
  return customInstance<EventSimple>(
    {
      url: `/events/${organizationId}`,
      method: "POST",
      headers: { "Content-Type": "application/json" },
      data: _function,
      signal,
    },
    options,
  );
};

export const getCreateEventMutationOptions = <TError = ErrorType<void>, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof createEvent>>,
    TError,
    { organizationId: string; data: BodyType<Function> },
    TContext
  >;
  request?: SecondParameter<typeof customInstance>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof createEvent>>,
  TError,
  { organizationId: string; data: BodyType<Function> },
  TContext
> => {
  const { mutation: mutationOptions, request: requestOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof createEvent>>,
    { organizationId: string; data: BodyType<Function> }
  > = (props) => {
    const { organizationId, data } = props ?? {};

    return createEvent(organizationId, data, requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type CreateEventMutationResult = NonNullable<Awaited<ReturnType<typeof createEvent>>>;
export type CreateEventMutationBody = BodyType<Function>;
export type CreateEventMutationError = ErrorType<void>;

export const useCreateEvent = <TError = ErrorType<void>, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof createEvent>>,
    TError,
    { organizationId: string; data: BodyType<Function> },
    TContext
  >;
  request?: SecondParameter<typeof customInstance>;
}): UseMutationResult<
  Awaited<ReturnType<typeof createEvent>>,
  TError,
  { organizationId: string; data: BodyType<Function> },
  TContext
> => {
  const mutationOptions = getCreateEventMutationOptions(options);

  return useMutation(mutationOptions);
};

export const updateEvent = (
  eventId: string,
  _function: BodyType<Function>,
  options?: SecondParameter<typeof customInstance>,
) => {
  return customInstance<EventSimple>(
    { url: `/events/${eventId}`, method: "PATCH", headers: { "Content-Type": "application/json" }, data: _function },
    options,
  );
};

export const getUpdateEventMutationOptions = <TError = ErrorType<void>, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof updateEvent>>,
    TError,
    { eventId: string; data: BodyType<Function> },
    TContext
  >;
  request?: SecondParameter<typeof customInstance>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof updateEvent>>,
  TError,
  { eventId: string; data: BodyType<Function> },
  TContext
> => {
  const { mutation: mutationOptions, request: requestOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof updateEvent>>,
    { eventId: string; data: BodyType<Function> }
  > = (props) => {
    const { eventId, data } = props ?? {};

    return updateEvent(eventId, data, requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type UpdateEventMutationResult = NonNullable<Awaited<ReturnType<typeof updateEvent>>>;
export type UpdateEventMutationBody = BodyType<Function>;
export type UpdateEventMutationError = ErrorType<void>;

export const useUpdateEvent = <TError = ErrorType<void>, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof updateEvent>>,
    TError,
    { eventId: string; data: BodyType<Function> },
    TContext
  >;
  request?: SecondParameter<typeof customInstance>;
}): UseMutationResult<
  Awaited<ReturnType<typeof updateEvent>>,
  TError,
  { eventId: string; data: BodyType<Function> },
  TContext
> => {
  const mutationOptions = getUpdateEventMutationOptions(options);

  return useMutation(mutationOptions);
};

/**
 * Update event photo
Organization permissions required: `create.event`
 */
export const updateEventPhoto = (
  eventId: string,
  _function: BodyType<Function>,
  options?: SecondParameter<typeof customInstance>,
) => {
  const formData = new FormData();

  return customInstance<void>(
    {
      url: `/events/${eventId}/photo`,
      method: "PATCH",
      headers: { "Content-Type": "multipart/form-data" },
      data: formData,
    },
    options,
  );
};

export const getUpdateEventPhotoMutationOptions = <TError = ErrorType<void>, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof updateEventPhoto>>,
    TError,
    { eventId: string; data: BodyType<Function> },
    TContext
  >;
  request?: SecondParameter<typeof customInstance>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof updateEventPhoto>>,
  TError,
  { eventId: string; data: BodyType<Function> },
  TContext
> => {
  const { mutation: mutationOptions, request: requestOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof updateEventPhoto>>,
    { eventId: string; data: BodyType<Function> }
  > = (props) => {
    const { eventId, data } = props ?? {};

    return updateEventPhoto(eventId, data, requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type UpdateEventPhotoMutationResult = NonNullable<Awaited<ReturnType<typeof updateEventPhoto>>>;
export type UpdateEventPhotoMutationBody = BodyType<Function>;
export type UpdateEventPhotoMutationError = ErrorType<void>;

export const useUpdateEventPhoto = <TError = ErrorType<void>, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof updateEventPhoto>>,
    TError,
    { eventId: string; data: BodyType<Function> },
    TContext
  >;
  request?: SecondParameter<typeof customInstance>;
}): UseMutationResult<
  Awaited<ReturnType<typeof updateEventPhoto>>,
  TError,
  { eventId: string; data: BodyType<Function> },
  TContext
> => {
  const mutationOptions = getUpdateEventPhotoMutationOptions(options);

  return useMutation(mutationOptions);
};

/**
 * Find event spots for event
 */
export const getEventSpots = (
  id: string,
  params?: GetEventSpotsParams,
  options?: SecondParameter<typeof customInstance>,
  signal?: AbortSignal,
) => {
  return customInstance<EventSpotSimple[]>({ url: `/events/${id}/spots`, method: "GET", params, signal }, options);
};

export const getGetEventSpotsQueryKey = (id: string, params?: GetEventSpotsParams) => {
  return [`/events/${id}/spots`, ...(params ? [params] : [])] as const;
};

export const getGetEventSpotsQueryOptions = <
  TData = Awaited<ReturnType<typeof getEventSpots>>,
  TError = ErrorType<unknown>,
>(
  id: string,
  params?: GetEventSpotsParams,
  options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getEventSpots>>, TError, TData>>;
    request?: SecondParameter<typeof customInstance>;
  },
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getGetEventSpotsQueryKey(id, params);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getEventSpots>>> = ({ signal }) =>
    getEventSpots(id, params, requestOptions, signal);

  return { queryKey, queryFn, enabled: !!id, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof getEventSpots>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData> };
};

export type GetEventSpotsQueryResult = NonNullable<Awaited<ReturnType<typeof getEventSpots>>>;
export type GetEventSpotsQueryError = ErrorType<unknown>;

export function useGetEventSpots<TData = Awaited<ReturnType<typeof getEventSpots>>, TError = ErrorType<unknown>>(
  id: string,
  params: undefined | GetEventSpotsParams,
  options: {
    query: Partial<UseQueryOptions<Awaited<ReturnType<typeof getEventSpots>>, TError, TData>> &
      Pick<DefinedInitialDataOptions<Awaited<ReturnType<typeof getEventSpots>>, TError, TData>, "initialData">;
    request?: SecondParameter<typeof customInstance>;
  },
): DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };
export function useGetEventSpots<TData = Awaited<ReturnType<typeof getEventSpots>>, TError = ErrorType<unknown>>(
  id: string,
  params?: GetEventSpotsParams,
  options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getEventSpots>>, TError, TData>> &
      Pick<UndefinedInitialDataOptions<Awaited<ReturnType<typeof getEventSpots>>, TError, TData>, "initialData">;
    request?: SecondParameter<typeof customInstance>;
  },
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };
export function useGetEventSpots<TData = Awaited<ReturnType<typeof getEventSpots>>, TError = ErrorType<unknown>>(
  id: string,
  params?: GetEventSpotsParams,
  options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getEventSpots>>, TError, TData>>;
    request?: SecondParameter<typeof customInstance>;
  },
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

export function useGetEventSpots<TData = Awaited<ReturnType<typeof getEventSpots>>, TError = ErrorType<unknown>>(
  id: string,
  params?: GetEventSpotsParams,
  options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getEventSpots>>, TError, TData>>;
    request?: SecondParameter<typeof customInstance>;
  },
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {
  const queryOptions = getGetEventSpotsQueryOptions(id, params, options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey;

  return query;
}

/**
 * Create new event spot
 */
export const createEventSpot = (
  id: string,
  createEventSpot: BodyType<CreateEventSpot>,
  options?: SecondParameter<typeof customInstance>,
  signal?: AbortSignal,
) => {
  return customInstance<EventSpotSimple>(
    {
      url: `/events/${id}/spots`,
      method: "POST",
      headers: { "Content-Type": "application/json" },
      data: createEventSpot,
      signal,
    },
    options,
  );
};

export const getCreateEventSpotMutationOptions = <TError = ErrorType<void>, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof createEventSpot>>,
    TError,
    { id: string; data: BodyType<CreateEventSpot> },
    TContext
  >;
  request?: SecondParameter<typeof customInstance>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof createEventSpot>>,
  TError,
  { id: string; data: BodyType<CreateEventSpot> },
  TContext
> => {
  const { mutation: mutationOptions, request: requestOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof createEventSpot>>,
    { id: string; data: BodyType<CreateEventSpot> }
  > = (props) => {
    const { id, data } = props ?? {};

    return createEventSpot(id, data, requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type CreateEventSpotMutationResult = NonNullable<Awaited<ReturnType<typeof createEventSpot>>>;
export type CreateEventSpotMutationBody = BodyType<CreateEventSpot>;
export type CreateEventSpotMutationError = ErrorType<void>;

export const useCreateEventSpot = <TError = ErrorType<void>, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof createEventSpot>>,
    TError,
    { id: string; data: BodyType<CreateEventSpot> },
    TContext
  >;
  request?: SecondParameter<typeof customInstance>;
}): UseMutationResult<
  Awaited<ReturnType<typeof createEventSpot>>,
  TError,
  { id: string; data: BodyType<CreateEventSpot> },
  TContext
> => {
  const mutationOptions = getCreateEventSpotMutationOptions(options);

  return useMutation(mutationOptions);
};

export const deleteEventSpot = (
  id: string,
  deleteEventSpot: BodyType<DeleteEventSpot>,
  options?: SecondParameter<typeof customInstance>,
) => {
  return customInstance<void>(
    {
      url: `/events/spots/${id}`,
      method: "DELETE",
      headers: { "Content-Type": "application/json" },
      data: deleteEventSpot,
    },
    options,
  );
};

export const getDeleteEventSpotMutationOptions = <TError = ErrorType<void>, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof deleteEventSpot>>,
    TError,
    { id: string; data: BodyType<DeleteEventSpot> },
    TContext
  >;
  request?: SecondParameter<typeof customInstance>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof deleteEventSpot>>,
  TError,
  { id: string; data: BodyType<DeleteEventSpot> },
  TContext
> => {
  const { mutation: mutationOptions, request: requestOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof deleteEventSpot>>,
    { id: string; data: BodyType<DeleteEventSpot> }
  > = (props) => {
    const { id, data } = props ?? {};

    return deleteEventSpot(id, data, requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type DeleteEventSpotMutationResult = NonNullable<Awaited<ReturnType<typeof deleteEventSpot>>>;
export type DeleteEventSpotMutationBody = BodyType<DeleteEventSpot>;
export type DeleteEventSpotMutationError = ErrorType<void>;

export const useDeleteEventSpot = <TError = ErrorType<void>, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof deleteEventSpot>>,
    TError,
    { id: string; data: BodyType<DeleteEventSpot> },
    TContext
  >;
  request?: SecondParameter<typeof customInstance>;
}): UseMutationResult<
  Awaited<ReturnType<typeof deleteEventSpot>>,
  TError,
  { id: string; data: BodyType<DeleteEventSpot> },
  TContext
> => {
  const mutationOptions = getDeleteEventSpotMutationOptions(options);

  return useMutation(mutationOptions);
};

export const updateEventSpot = (
  id: string,
  updateEventSpot: BodyType<UpdateEventSpot>,
  options?: SecondParameter<typeof customInstance>,
) => {
  return customInstance<EventSpotSimple>(
    {
      url: `/events/spots/${id}`,
      method: "PATCH",
      headers: { "Content-Type": "application/json" },
      data: updateEventSpot,
    },
    options,
  );
};

export const getUpdateEventSpotMutationOptions = <TError = ErrorType<void>, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof updateEventSpot>>,
    TError,
    { id: string; data: BodyType<UpdateEventSpot> },
    TContext
  >;
  request?: SecondParameter<typeof customInstance>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof updateEventSpot>>,
  TError,
  { id: string; data: BodyType<UpdateEventSpot> },
  TContext
> => {
  const { mutation: mutationOptions, request: requestOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof updateEventSpot>>,
    { id: string; data: BodyType<UpdateEventSpot> }
  > = (props) => {
    const { id, data } = props ?? {};

    return updateEventSpot(id, data, requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type UpdateEventSpotMutationResult = NonNullable<Awaited<ReturnType<typeof updateEventSpot>>>;
export type UpdateEventSpotMutationBody = BodyType<UpdateEventSpot>;
export type UpdateEventSpotMutationError = ErrorType<void>;

export const useUpdateEventSpot = <TError = ErrorType<void>, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof updateEventSpot>>,
    TError,
    { id: string; data: BodyType<UpdateEventSpot> },
    TContext
  >;
  request?: SecondParameter<typeof customInstance>;
}): UseMutationResult<
  Awaited<ReturnType<typeof updateEventSpot>>,
  TError,
  { id: string; data: BodyType<UpdateEventSpot> },
  TContext
> => {
  const mutationOptions = getUpdateEventSpotMutationOptions(options);

  return useMutation(mutationOptions);
};

/**
 * Get all user applications
 */
export const getUserApplications = (
  params?: GetUserApplicationsParams,
  options?: SecondParameter<typeof customInstance>,
  signal?: AbortSignal,
) => {
  return customInstance<EventApplication[]>({ url: `/events/applications`, method: "GET", params, signal }, options);
};

export const getGetUserApplicationsQueryKey = (params?: GetUserApplicationsParams) => {
  return [`/events/applications`, ...(params ? [params] : [])] as const;
};

export const getGetUserApplicationsQueryOptions = <
  TData = Awaited<ReturnType<typeof getUserApplications>>,
  TError = ErrorType<unknown>,
>(
  params?: GetUserApplicationsParams,
  options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getUserApplications>>, TError, TData>>;
    request?: SecondParameter<typeof customInstance>;
  },
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getGetUserApplicationsQueryKey(params);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getUserApplications>>> = ({ signal }) =>
    getUserApplications(params, requestOptions, signal);

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof getUserApplications>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData> };
};

export type GetUserApplicationsQueryResult = NonNullable<Awaited<ReturnType<typeof getUserApplications>>>;
export type GetUserApplicationsQueryError = ErrorType<unknown>;

export function useGetUserApplications<
  TData = Awaited<ReturnType<typeof getUserApplications>>,
  TError = ErrorType<unknown>,
>(
  params: undefined | GetUserApplicationsParams,
  options: {
    query: Partial<UseQueryOptions<Awaited<ReturnType<typeof getUserApplications>>, TError, TData>> &
      Pick<DefinedInitialDataOptions<Awaited<ReturnType<typeof getUserApplications>>, TError, TData>, "initialData">;
    request?: SecondParameter<typeof customInstance>;
  },
): DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };
export function useGetUserApplications<
  TData = Awaited<ReturnType<typeof getUserApplications>>,
  TError = ErrorType<unknown>,
>(
  params?: GetUserApplicationsParams,
  options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getUserApplications>>, TError, TData>> &
      Pick<UndefinedInitialDataOptions<Awaited<ReturnType<typeof getUserApplications>>, TError, TData>, "initialData">;
    request?: SecondParameter<typeof customInstance>;
  },
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };
export function useGetUserApplications<
  TData = Awaited<ReturnType<typeof getUserApplications>>,
  TError = ErrorType<unknown>,
>(
  params?: GetUserApplicationsParams,
  options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getUserApplications>>, TError, TData>>;
    request?: SecondParameter<typeof customInstance>;
  },
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

export function useGetUserApplications<
  TData = Awaited<ReturnType<typeof getUserApplications>>,
  TError = ErrorType<unknown>,
>(
  params?: GetUserApplicationsParams,
  options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getUserApplications>>, TError, TData>>;
    request?: SecondParameter<typeof customInstance>;
  },
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {
  const queryOptions = getGetUserApplicationsQueryOptions(params, options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey;

  return query;
}
