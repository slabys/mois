/**
 * Generated by orval v7.3.0 üç∫
 * Do not edit manually.
 * backend API
 * The backend API description
 * OpenAPI spec version: 0.0.1
 */
import { useMutation, useQuery } from "@tanstack/react-query";
import type {
  DataTag,
  DefinedInitialDataOptions,
  DefinedUseQueryResult,
  MutationFunction,
  QueryFunction,
  QueryKey,
  UndefinedInitialDataOptions,
  UseMutationOptions,
  UseMutationResult,
  UseQueryOptions,
  UseQueryResult,
} from "@tanstack/react-query";

import type {
  AccessToken,
  AddOrganizationMembers,
  AllOrganizationsParams,
  CreateEvent,
  CreateEventApplication,
  CreateEventSpot,
  CreateOrganization,
  CreateOrganization201,
  CreateUser,
  DeleteEventSpot,
  DeleteOrganizationMembers,
  EventApplication,
  EventApplicationSimple,
  EventDetail,
  EventSimple,
  EventSpotSimple,
  GetEventSpotsParams,
  GetEventsParams,
  GetManagementEventsParams,
  InvoiceSimple,
  InvoiceUrl,
  LoginUser,
  Organization,
  OrganizationMember,
  OrganizationMemberWithoutOrganization,
  OrganizationMemberWithoutUser,
  OrganizationMembersParams,
  UpdateEvent,
  UpdateEventApplication,
  UpdateEventApplication200,
  UpdateEventSpot,
  UpdateOrganization,
  UpdateOrganization201,
  UpdatePhoto,
  UpdateUser,
  User,
  UserOrganizationMembershipsParams,
} from "./api.schemas";
import { customInstance } from "./customInstance";
import type { BodyType, ErrorType } from "./customInstance";

type SecondParameter<T extends (...args: any) => any> = Parameters<T>[1];

/**
 * Try to login user with given email and password
 */
export const loginUserWithEmailOrUsername = (
  loginUser: BodyType<LoginUser>,
  options?: SecondParameter<typeof customInstance>,
  signal?: AbortSignal,
) => {
  return customInstance<AccessToken>(
    { url: `/auth/login`, method: "POST", headers: { "Content-Type": "application/json" }, data: loginUser, signal },
    options,
  );
};

export const getLoginUserWithEmailOrUsernameMutationOptions = <TError = ErrorType<void>, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof loginUserWithEmailOrUsername>>,
    TError,
    { data: BodyType<LoginUser> },
    TContext
  >;
  request?: SecondParameter<typeof customInstance>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof loginUserWithEmailOrUsername>>,
  TError,
  { data: BodyType<LoginUser> },
  TContext
> => {
  const { mutation: mutationOptions, request: requestOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof loginUserWithEmailOrUsername>>,
    { data: BodyType<LoginUser> }
  > = (props) => {
    const { data } = props ?? {};

    return loginUserWithEmailOrUsername(data, requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type LoginUserWithEmailOrUsernameMutationResult = NonNullable<
  Awaited<ReturnType<typeof loginUserWithEmailOrUsername>>
>;
export type LoginUserWithEmailOrUsernameMutationBody = BodyType<LoginUser>;
export type LoginUserWithEmailOrUsernameMutationError = ErrorType<void>;

export const useLoginUserWithEmailOrUsername = <TError = ErrorType<void>, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof loginUserWithEmailOrUsername>>,
    TError,
    { data: BodyType<LoginUser> },
    TContext
  >;
  request?: SecondParameter<typeof customInstance>;
}): UseMutationResult<
  Awaited<ReturnType<typeof loginUserWithEmailOrUsername>>,
  TError,
  { data: BodyType<LoginUser> },
  TContext
> => {
  const mutationOptions = getLoginUserWithEmailOrUsernameMutationOptions(options);

  return useMutation(mutationOptions);
};

/**
 * Logout user
 */
export const logoutUser = (options?: SecondParameter<typeof customInstance>) => {
  return customInstance<void>({ url: `/auth/logout`, method: "DELETE" }, options);
};

export const getLogoutUserMutationOptions = <TError = ErrorType<unknown>, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<Awaited<ReturnType<typeof logoutUser>>, TError, void, TContext>;
  request?: SecondParameter<typeof customInstance>;
}): UseMutationOptions<Awaited<ReturnType<typeof logoutUser>>, TError, void, TContext> => {
  const { mutation: mutationOptions, request: requestOptions } = options ?? {};

  const mutationFn: MutationFunction<Awaited<ReturnType<typeof logoutUser>>, void> = () => {
    return logoutUser(requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type LogoutUserMutationResult = NonNullable<Awaited<ReturnType<typeof logoutUser>>>;

export type LogoutUserMutationError = ErrorType<unknown>;

export const useLogoutUser = <TError = ErrorType<unknown>, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<Awaited<ReturnType<typeof logoutUser>>, TError, void, TContext>;
  request?: SecondParameter<typeof customInstance>;
}): UseMutationResult<Awaited<ReturnType<typeof logoutUser>>, TError, void, TContext> => {
  const mutationOptions = getLogoutUserMutationOptions(options);

  return useMutation(mutationOptions);
};

export const createUser = (
  createUser: BodyType<CreateUser>,
  options?: SecondParameter<typeof customInstance>,
  signal?: AbortSignal,
) => {
  return customInstance<User>(
    { url: `/users`, method: "POST", headers: { "Content-Type": "application/json" }, data: createUser, signal },
    options,
  );
};

export const getCreateUserMutationOptions = <TError = ErrorType<void>, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof createUser>>,
    TError,
    { data: BodyType<CreateUser> },
    TContext
  >;
  request?: SecondParameter<typeof customInstance>;
}): UseMutationOptions<Awaited<ReturnType<typeof createUser>>, TError, { data: BodyType<CreateUser> }, TContext> => {
  const { mutation: mutationOptions, request: requestOptions } = options ?? {};

  const mutationFn: MutationFunction<Awaited<ReturnType<typeof createUser>>, { data: BodyType<CreateUser> }> = (
    props,
  ) => {
    const { data } = props ?? {};

    return createUser(data, requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type CreateUserMutationResult = NonNullable<Awaited<ReturnType<typeof createUser>>>;
export type CreateUserMutationBody = BodyType<CreateUser>;
export type CreateUserMutationError = ErrorType<void>;

export const useCreateUser = <TError = ErrorType<void>, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof createUser>>,
    TError,
    { data: BodyType<CreateUser> },
    TContext
  >;
  request?: SecondParameter<typeof customInstance>;
}): UseMutationResult<Awaited<ReturnType<typeof createUser>>, TError, { data: BodyType<CreateUser> }, TContext> => {
  const mutationOptions = getCreateUserMutationOptions(options);

  return useMutation(mutationOptions);
};

/**
 * Update user data
 */
export const updateCurrentUser = (
  updateUser: BodyType<UpdateUser>,
  options?: SecondParameter<typeof customInstance>,
) => {
  return customInstance<User>(
    { url: `/users`, method: "PATCH", headers: { "Content-Type": "application/json" }, data: updateUser },
    options,
  );
};

export const getUpdateCurrentUserMutationOptions = <TError = ErrorType<void>, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof updateCurrentUser>>,
    TError,
    { data: BodyType<UpdateUser> },
    TContext
  >;
  request?: SecondParameter<typeof customInstance>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof updateCurrentUser>>,
  TError,
  { data: BodyType<UpdateUser> },
  TContext
> => {
  const { mutation: mutationOptions, request: requestOptions } = options ?? {};

  const mutationFn: MutationFunction<Awaited<ReturnType<typeof updateCurrentUser>>, { data: BodyType<UpdateUser> }> = (
    props,
  ) => {
    const { data } = props ?? {};

    return updateCurrentUser(data, requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type UpdateCurrentUserMutationResult = NonNullable<Awaited<ReturnType<typeof updateCurrentUser>>>;
export type UpdateCurrentUserMutationBody = BodyType<UpdateUser>;
export type UpdateCurrentUserMutationError = ErrorType<void>;

export const useUpdateCurrentUser = <TError = ErrorType<void>, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof updateCurrentUser>>,
    TError,
    { data: BodyType<UpdateUser> },
    TContext
  >;
  request?: SecondParameter<typeof customInstance>;
}): UseMutationResult<
  Awaited<ReturnType<typeof updateCurrentUser>>,
  TError,
  { data: BodyType<UpdateUser> },
  TContext
> => {
  const mutationOptions = getUpdateCurrentUserMutationOptions(options);

  return useMutation(mutationOptions);
};

export const getCurrentUser = (options?: SecondParameter<typeof customInstance>, signal?: AbortSignal) => {
  return customInstance<User>({ url: `/users`, method: "GET", signal }, options);
};

export const getGetCurrentUserQueryKey = () => {
  return [`/users`] as const;
};

export const getGetCurrentUserQueryOptions = <
  TData = Awaited<ReturnType<typeof getCurrentUser>>,
  TError = ErrorType<unknown>,
>(options?: {
  query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getCurrentUser>>, TError, TData>>;
  request?: SecondParameter<typeof customInstance>;
}) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getGetCurrentUserQueryKey();

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getCurrentUser>>> = ({ signal }) =>
    getCurrentUser(requestOptions, signal);

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof getCurrentUser>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData> };
};

export type GetCurrentUserQueryResult = NonNullable<Awaited<ReturnType<typeof getCurrentUser>>>;
export type GetCurrentUserQueryError = ErrorType<unknown>;

export function useGetCurrentUser<
  TData = Awaited<ReturnType<typeof getCurrentUser>>,
  TError = ErrorType<unknown>,
>(options: {
  query: Partial<UseQueryOptions<Awaited<ReturnType<typeof getCurrentUser>>, TError, TData>> &
    Pick<DefinedInitialDataOptions<Awaited<ReturnType<typeof getCurrentUser>>, TError, TData>, "initialData">;
  request?: SecondParameter<typeof customInstance>;
}): DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };
export function useGetCurrentUser<
  TData = Awaited<ReturnType<typeof getCurrentUser>>,
  TError = ErrorType<unknown>,
>(options?: {
  query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getCurrentUser>>, TError, TData>> &
    Pick<UndefinedInitialDataOptions<Awaited<ReturnType<typeof getCurrentUser>>, TError, TData>, "initialData">;
  request?: SecondParameter<typeof customInstance>;
}): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };
export function useGetCurrentUser<
  TData = Awaited<ReturnType<typeof getCurrentUser>>,
  TError = ErrorType<unknown>,
>(options?: {
  query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getCurrentUser>>, TError, TData>>;
  request?: SecondParameter<typeof customInstance>;
}): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

export function useGetCurrentUser<
  TData = Awaited<ReturnType<typeof getCurrentUser>>,
  TError = ErrorType<unknown>,
>(options?: {
  query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getCurrentUser>>, TError, TData>>;
  request?: SecondParameter<typeof customInstance>;
}): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {
  const queryOptions = getGetCurrentUserQueryOptions(options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey;

  return query;
}

export const updateCurrentUserPhoto = (
  updatePhoto: BodyType<UpdatePhoto>,
  options?: SecondParameter<typeof customInstance>,
) => {
  const formData = new FormData();
  formData.append("file", updatePhoto.file);

  return customInstance<User>(
    { url: `/users/photo`, method: "PATCH", headers: { "Content-Type": "multipart/form-data" }, data: formData },
    options,
  );
};

export const getUpdateCurrentUserPhotoMutationOptions = <TError = ErrorType<unknown>, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof updateCurrentUserPhoto>>,
    TError,
    { data: BodyType<UpdatePhoto> },
    TContext
  >;
  request?: SecondParameter<typeof customInstance>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof updateCurrentUserPhoto>>,
  TError,
  { data: BodyType<UpdatePhoto> },
  TContext
> => {
  const { mutation: mutationOptions, request: requestOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof updateCurrentUserPhoto>>,
    { data: BodyType<UpdatePhoto> }
  > = (props) => {
    const { data } = props ?? {};

    return updateCurrentUserPhoto(data, requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type UpdateCurrentUserPhotoMutationResult = NonNullable<Awaited<ReturnType<typeof updateCurrentUserPhoto>>>;
export type UpdateCurrentUserPhotoMutationBody = BodyType<UpdatePhoto>;
export type UpdateCurrentUserPhotoMutationError = ErrorType<unknown>;

export const useUpdateCurrentUserPhoto = <TError = ErrorType<unknown>, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof updateCurrentUserPhoto>>,
    TError,
    { data: BodyType<UpdatePhoto> },
    TContext
  >;
  request?: SecondParameter<typeof customInstance>;
}): UseMutationResult<
  Awaited<ReturnType<typeof updateCurrentUserPhoto>>,
  TError,
  { data: BodyType<UpdatePhoto> },
  TContext
> => {
  const mutationOptions = getUpdateCurrentUserPhotoMutationOptions(options);

  return useMutation(mutationOptions);
};

export const userOrganizationMemberships = (
  id: string,
  params?: UserOrganizationMembershipsParams,
  options?: SecondParameter<typeof customInstance>,
  signal?: AbortSignal,
) => {
  return customInstance<OrganizationMemberWithoutUser[]>(
    { url: `/users/${id}/organizations`, method: "GET", params, signal },
    options,
  );
};

export const getUserOrganizationMembershipsQueryKey = (id: string, params?: UserOrganizationMembershipsParams) => {
  return [`/users/${id}/organizations`, ...(params ? [params] : [])] as const;
};

export const getUserOrganizationMembershipsQueryOptions = <
  TData = Awaited<ReturnType<typeof userOrganizationMemberships>>,
  TError = ErrorType<unknown>,
>(
  id: string,
  params?: UserOrganizationMembershipsParams,
  options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof userOrganizationMemberships>>, TError, TData>>;
    request?: SecondParameter<typeof customInstance>;
  },
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getUserOrganizationMembershipsQueryKey(id, params);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof userOrganizationMemberships>>> = ({ signal }) =>
    userOrganizationMemberships(id, params, requestOptions, signal);

  return { queryKey, queryFn, enabled: !!id, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof userOrganizationMemberships>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData> };
};

export type UserOrganizationMembershipsQueryResult = NonNullable<
  Awaited<ReturnType<typeof userOrganizationMemberships>>
>;
export type UserOrganizationMembershipsQueryError = ErrorType<unknown>;

export function useUserOrganizationMemberships<
  TData = Awaited<ReturnType<typeof userOrganizationMemberships>>,
  TError = ErrorType<unknown>,
>(
  id: string,
  params: undefined | UserOrganizationMembershipsParams,
  options: {
    query: Partial<UseQueryOptions<Awaited<ReturnType<typeof userOrganizationMemberships>>, TError, TData>> &
      Pick<
        DefinedInitialDataOptions<Awaited<ReturnType<typeof userOrganizationMemberships>>, TError, TData>,
        "initialData"
      >;
    request?: SecondParameter<typeof customInstance>;
  },
): DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };
export function useUserOrganizationMemberships<
  TData = Awaited<ReturnType<typeof userOrganizationMemberships>>,
  TError = ErrorType<unknown>,
>(
  id: string,
  params?: UserOrganizationMembershipsParams,
  options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof userOrganizationMemberships>>, TError, TData>> &
      Pick<
        UndefinedInitialDataOptions<Awaited<ReturnType<typeof userOrganizationMemberships>>, TError, TData>,
        "initialData"
      >;
    request?: SecondParameter<typeof customInstance>;
  },
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };
export function useUserOrganizationMemberships<
  TData = Awaited<ReturnType<typeof userOrganizationMemberships>>,
  TError = ErrorType<unknown>,
>(
  id: string,
  params?: UserOrganizationMembershipsParams,
  options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof userOrganizationMemberships>>, TError, TData>>;
    request?: SecondParameter<typeof customInstance>;
  },
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

export function useUserOrganizationMemberships<
  TData = Awaited<ReturnType<typeof userOrganizationMemberships>>,
  TError = ErrorType<unknown>,
>(
  id: string,
  params?: UserOrganizationMembershipsParams,
  options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof userOrganizationMemberships>>, TError, TData>>;
    request?: SecondParameter<typeof customInstance>;
  },
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {
  const queryOptions = getUserOrganizationMembershipsQueryOptions(id, params, options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey;

  return query;
}

export const getPhoto = (id: string, options?: SecondParameter<typeof customInstance>, signal?: AbortSignal) => {
  return customInstance<void>({ url: `/photo/${id}`, method: "GET", signal }, options);
};

export const getGetPhotoQueryKey = (id: string) => {
  return [`/photo/${id}`] as const;
};

export const getGetPhotoQueryOptions = <TData = Awaited<ReturnType<typeof getPhoto>>, TError = ErrorType<void>>(
  id: string,
  options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getPhoto>>, TError, TData>>;
    request?: SecondParameter<typeof customInstance>;
  },
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getGetPhotoQueryKey(id);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getPhoto>>> = ({ signal }) =>
    getPhoto(id, requestOptions, signal);

  return { queryKey, queryFn, enabled: !!id, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof getPhoto>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData> };
};

export type GetPhotoQueryResult = NonNullable<Awaited<ReturnType<typeof getPhoto>>>;
export type GetPhotoQueryError = ErrorType<void>;

export function useGetPhoto<TData = Awaited<ReturnType<typeof getPhoto>>, TError = ErrorType<void>>(
  id: string,
  options: {
    query: Partial<UseQueryOptions<Awaited<ReturnType<typeof getPhoto>>, TError, TData>> &
      Pick<DefinedInitialDataOptions<Awaited<ReturnType<typeof getPhoto>>, TError, TData>, "initialData">;
    request?: SecondParameter<typeof customInstance>;
  },
): DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };
export function useGetPhoto<TData = Awaited<ReturnType<typeof getPhoto>>, TError = ErrorType<void>>(
  id: string,
  options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getPhoto>>, TError, TData>> &
      Pick<UndefinedInitialDataOptions<Awaited<ReturnType<typeof getPhoto>>, TError, TData>, "initialData">;
    request?: SecondParameter<typeof customInstance>;
  },
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };
export function useGetPhoto<TData = Awaited<ReturnType<typeof getPhoto>>, TError = ErrorType<void>>(
  id: string,
  options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getPhoto>>, TError, TData>>;
    request?: SecondParameter<typeof customInstance>;
  },
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

export function useGetPhoto<TData = Awaited<ReturnType<typeof getPhoto>>, TError = ErrorType<void>>(
  id: string,
  options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getPhoto>>, TError, TData>>;
    request?: SecondParameter<typeof customInstance>;
  },
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {
  const queryOptions = getGetPhotoQueryOptions(id, options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey;

  return query;
}

export const allOrganizations = (
  params?: AllOrganizationsParams,
  options?: SecondParameter<typeof customInstance>,
  signal?: AbortSignal,
) => {
  return customInstance<Organization[]>({ url: `/organizations`, method: "GET", params, signal }, options);
};

export const getAllOrganizationsQueryKey = (params?: AllOrganizationsParams) => {
  return [`/organizations`, ...(params ? [params] : [])] as const;
};

export const getAllOrganizationsQueryOptions = <
  TData = Awaited<ReturnType<typeof allOrganizations>>,
  TError = ErrorType<unknown>,
>(
  params?: AllOrganizationsParams,
  options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof allOrganizations>>, TError, TData>>;
    request?: SecondParameter<typeof customInstance>;
  },
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getAllOrganizationsQueryKey(params);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof allOrganizations>>> = ({ signal }) =>
    allOrganizations(params, requestOptions, signal);

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof allOrganizations>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData> };
};

export type AllOrganizationsQueryResult = NonNullable<Awaited<ReturnType<typeof allOrganizations>>>;
export type AllOrganizationsQueryError = ErrorType<unknown>;

export function useAllOrganizations<TData = Awaited<ReturnType<typeof allOrganizations>>, TError = ErrorType<unknown>>(
  params: undefined | AllOrganizationsParams,
  options: {
    query: Partial<UseQueryOptions<Awaited<ReturnType<typeof allOrganizations>>, TError, TData>> &
      Pick<DefinedInitialDataOptions<Awaited<ReturnType<typeof allOrganizations>>, TError, TData>, "initialData">;
    request?: SecondParameter<typeof customInstance>;
  },
): DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };
export function useAllOrganizations<TData = Awaited<ReturnType<typeof allOrganizations>>, TError = ErrorType<unknown>>(
  params?: AllOrganizationsParams,
  options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof allOrganizations>>, TError, TData>> &
      Pick<UndefinedInitialDataOptions<Awaited<ReturnType<typeof allOrganizations>>, TError, TData>, "initialData">;
    request?: SecondParameter<typeof customInstance>;
  },
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };
export function useAllOrganizations<TData = Awaited<ReturnType<typeof allOrganizations>>, TError = ErrorType<unknown>>(
  params?: AllOrganizationsParams,
  options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof allOrganizations>>, TError, TData>>;
    request?: SecondParameter<typeof customInstance>;
  },
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

export function useAllOrganizations<TData = Awaited<ReturnType<typeof allOrganizations>>, TError = ErrorType<unknown>>(
  params?: AllOrganizationsParams,
  options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof allOrganizations>>, TError, TData>>;
    request?: SecondParameter<typeof customInstance>;
  },
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {
  const queryOptions = getAllOrganizationsQueryOptions(params, options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey;

  return query;
}

export const createOrganization = (
  createOrganization: BodyType<CreateOrganization>,
  options?: SecondParameter<typeof customInstance>,
  signal?: AbortSignal,
) => {
  return customInstance<CreateOrganization201>(
    {
      url: `/organizations`,
      method: "POST",
      headers: { "Content-Type": "application/json" },
      data: createOrganization,
      signal,
    },
    options,
  );
};

export const getCreateOrganizationMutationOptions = <TError = ErrorType<unknown>, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof createOrganization>>,
    TError,
    { data: BodyType<CreateOrganization> },
    TContext
  >;
  request?: SecondParameter<typeof customInstance>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof createOrganization>>,
  TError,
  { data: BodyType<CreateOrganization> },
  TContext
> => {
  const { mutation: mutationOptions, request: requestOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof createOrganization>>,
    { data: BodyType<CreateOrganization> }
  > = (props) => {
    const { data } = props ?? {};

    return createOrganization(data, requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type CreateOrganizationMutationResult = NonNullable<Awaited<ReturnType<typeof createOrganization>>>;
export type CreateOrganizationMutationBody = BodyType<CreateOrganization>;
export type CreateOrganizationMutationError = ErrorType<unknown>;

export const useCreateOrganization = <TError = ErrorType<unknown>, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof createOrganization>>,
    TError,
    { data: BodyType<CreateOrganization> },
    TContext
  >;
  request?: SecondParameter<typeof customInstance>;
}): UseMutationResult<
  Awaited<ReturnType<typeof createOrganization>>,
  TError,
  { data: BodyType<CreateOrganization> },
  TContext
> => {
  const mutationOptions = getCreateOrganizationMutationOptions(options);

  return useMutation(mutationOptions);
};

export const updateOrganization = (
  id: string,
  updateOrganization: BodyType<UpdateOrganization>,
  options?: SecondParameter<typeof customInstance>,
  signal?: AbortSignal,
) => {
  return customInstance<UpdateOrganization201>(
    {
      url: `/organizations/${id}`,
      method: "POST",
      headers: { "Content-Type": "application/json" },
      data: updateOrganization,
      signal,
    },
    options,
  );
};

export const getUpdateOrganizationMutationOptions = <TError = ErrorType<unknown>, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof updateOrganization>>,
    TError,
    { id: string; data: BodyType<UpdateOrganization> },
    TContext
  >;
  request?: SecondParameter<typeof customInstance>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof updateOrganization>>,
  TError,
  { id: string; data: BodyType<UpdateOrganization> },
  TContext
> => {
  const { mutation: mutationOptions, request: requestOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof updateOrganization>>,
    { id: string; data: BodyType<UpdateOrganization> }
  > = (props) => {
    const { id, data } = props ?? {};

    return updateOrganization(id, data, requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type UpdateOrganizationMutationResult = NonNullable<Awaited<ReturnType<typeof updateOrganization>>>;
export type UpdateOrganizationMutationBody = BodyType<UpdateOrganization>;
export type UpdateOrganizationMutationError = ErrorType<unknown>;

export const useUpdateOrganization = <TError = ErrorType<unknown>, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof updateOrganization>>,
    TError,
    { id: string; data: BodyType<UpdateOrganization> },
    TContext
  >;
  request?: SecondParameter<typeof customInstance>;
}): UseMutationResult<
  Awaited<ReturnType<typeof updateOrganization>>,
  TError,
  { id: string; data: BodyType<UpdateOrganization> },
  TContext
> => {
  const mutationOptions = getUpdateOrganizationMutationOptions(options);

  return useMutation(mutationOptions);
};

export const organizationMembers = (
  id: string,
  params?: OrganizationMembersParams,
  options?: SecondParameter<typeof customInstance>,
  signal?: AbortSignal,
) => {
  return customInstance<OrganizationMemberWithoutOrganization[]>(
    { url: `/organization/${id}/members`, method: "GET", params, signal },
    options,
  );
};

export const getOrganizationMembersQueryKey = (id: string, params?: OrganizationMembersParams) => {
  return [`/organization/${id}/members`, ...(params ? [params] : [])] as const;
};

export const getOrganizationMembersQueryOptions = <
  TData = Awaited<ReturnType<typeof organizationMembers>>,
  TError = ErrorType<unknown>,
>(
  id: string,
  params?: OrganizationMembersParams,
  options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof organizationMembers>>, TError, TData>>;
    request?: SecondParameter<typeof customInstance>;
  },
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getOrganizationMembersQueryKey(id, params);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof organizationMembers>>> = ({ signal }) =>
    organizationMembers(id, params, requestOptions, signal);

  return { queryKey, queryFn, enabled: !!id, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof organizationMembers>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData> };
};

export type OrganizationMembersQueryResult = NonNullable<Awaited<ReturnType<typeof organizationMembers>>>;
export type OrganizationMembersQueryError = ErrorType<unknown>;

export function useOrganizationMembers<
  TData = Awaited<ReturnType<typeof organizationMembers>>,
  TError = ErrorType<unknown>,
>(
  id: string,
  params: undefined | OrganizationMembersParams,
  options: {
    query: Partial<UseQueryOptions<Awaited<ReturnType<typeof organizationMembers>>, TError, TData>> &
      Pick<DefinedInitialDataOptions<Awaited<ReturnType<typeof organizationMembers>>, TError, TData>, "initialData">;
    request?: SecondParameter<typeof customInstance>;
  },
): DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };
export function useOrganizationMembers<
  TData = Awaited<ReturnType<typeof organizationMembers>>,
  TError = ErrorType<unknown>,
>(
  id: string,
  params?: OrganizationMembersParams,
  options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof organizationMembers>>, TError, TData>> &
      Pick<UndefinedInitialDataOptions<Awaited<ReturnType<typeof organizationMembers>>, TError, TData>, "initialData">;
    request?: SecondParameter<typeof customInstance>;
  },
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };
export function useOrganizationMembers<
  TData = Awaited<ReturnType<typeof organizationMembers>>,
  TError = ErrorType<unknown>,
>(
  id: string,
  params?: OrganizationMembersParams,
  options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof organizationMembers>>, TError, TData>>;
    request?: SecondParameter<typeof customInstance>;
  },
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

export function useOrganizationMembers<
  TData = Awaited<ReturnType<typeof organizationMembers>>,
  TError = ErrorType<unknown>,
>(
  id: string,
  params?: OrganizationMembersParams,
  options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof organizationMembers>>, TError, TData>>;
    request?: SecondParameter<typeof customInstance>;
  },
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {
  const queryOptions = getOrganizationMembersQueryOptions(id, params, options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey;

  return query;
}

/**
 * Add members to organization
 */
export const addOrganizationMembers = (
  id: string,
  addOrganizationMembers: BodyType<AddOrganizationMembers>,
  options?: SecondParameter<typeof customInstance>,
  signal?: AbortSignal,
) => {
  return customInstance<OrganizationMember[]>(
    {
      url: `/organization/${id}/members`,
      method: "POST",
      headers: { "Content-Type": "application/json" },
      data: addOrganizationMembers,
      signal,
    },
    options,
  );
};

export const getAddOrganizationMembersMutationOptions = <TError = ErrorType<unknown>, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof addOrganizationMembers>>,
    TError,
    { id: string; data: BodyType<AddOrganizationMembers> },
    TContext
  >;
  request?: SecondParameter<typeof customInstance>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof addOrganizationMembers>>,
  TError,
  { id: string; data: BodyType<AddOrganizationMembers> },
  TContext
> => {
  const { mutation: mutationOptions, request: requestOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof addOrganizationMembers>>,
    { id: string; data: BodyType<AddOrganizationMembers> }
  > = (props) => {
    const { id, data } = props ?? {};

    return addOrganizationMembers(id, data, requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type AddOrganizationMembersMutationResult = NonNullable<Awaited<ReturnType<typeof addOrganizationMembers>>>;
export type AddOrganizationMembersMutationBody = BodyType<AddOrganizationMembers>;
export type AddOrganizationMembersMutationError = ErrorType<unknown>;

export const useAddOrganizationMembers = <TError = ErrorType<unknown>, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof addOrganizationMembers>>,
    TError,
    { id: string; data: BodyType<AddOrganizationMembers> },
    TContext
  >;
  request?: SecondParameter<typeof customInstance>;
}): UseMutationResult<
  Awaited<ReturnType<typeof addOrganizationMembers>>,
  TError,
  { id: string; data: BodyType<AddOrganizationMembers> },
  TContext
> => {
  const mutationOptions = getAddOrganizationMembersMutationOptions(options);

  return useMutation(mutationOptions);
};

/**
 * Delete members from organization (`member.id` not `user.id`)
 */
export const deleteOrganizationMembers = (
  id: string,
  deleteOrganizationMembers: BodyType<DeleteOrganizationMembers>,
  options?: SecondParameter<typeof customInstance>,
) => {
  return customInstance<void>(
    {
      url: `/organization/${id}/members`,
      method: "DELETE",
      headers: { "Content-Type": "application/json" },
      data: deleteOrganizationMembers,
    },
    options,
  );
};

export const getDeleteOrganizationMembersMutationOptions = <TError = ErrorType<unknown>, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof deleteOrganizationMembers>>,
    TError,
    { id: string; data: BodyType<DeleteOrganizationMembers> },
    TContext
  >;
  request?: SecondParameter<typeof customInstance>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof deleteOrganizationMembers>>,
  TError,
  { id: string; data: BodyType<DeleteOrganizationMembers> },
  TContext
> => {
  const { mutation: mutationOptions, request: requestOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof deleteOrganizationMembers>>,
    { id: string; data: BodyType<DeleteOrganizationMembers> }
  > = (props) => {
    const { id, data } = props ?? {};

    return deleteOrganizationMembers(id, data, requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type DeleteOrganizationMembersMutationResult = NonNullable<
  Awaited<ReturnType<typeof deleteOrganizationMembers>>
>;
export type DeleteOrganizationMembersMutationBody = BodyType<DeleteOrganizationMembers>;
export type DeleteOrganizationMembersMutationError = ErrorType<unknown>;

export const useDeleteOrganizationMembers = <TError = ErrorType<unknown>, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof deleteOrganizationMembers>>,
    TError,
    { id: string; data: BodyType<DeleteOrganizationMembers> },
    TContext
  >;
  request?: SecondParameter<typeof customInstance>;
}): UseMutationResult<
  Awaited<ReturnType<typeof deleteOrganizationMembers>>,
  TError,
  { id: string; data: BodyType<DeleteOrganizationMembers> },
  TContext
> => {
  const mutationOptions = getDeleteOrganizationMembersMutationOptions(options);

  return useMutation(mutationOptions);
};

/**
 * Get all signed-in user applications
 */
export const getUserApplications = (options?: SecondParameter<typeof customInstance>, signal?: AbortSignal) => {
  return customInstance<EventApplication[]>({ url: `/events/applications`, method: "GET", signal }, options);
};

export const getGetUserApplicationsQueryKey = () => {
  return [`/events/applications`] as const;
};

export const getGetUserApplicationsQueryOptions = <
  TData = Awaited<ReturnType<typeof getUserApplications>>,
  TError = ErrorType<unknown>,
>(options?: {
  query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getUserApplications>>, TError, TData>>;
  request?: SecondParameter<typeof customInstance>;
}) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getGetUserApplicationsQueryKey();

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getUserApplications>>> = ({ signal }) =>
    getUserApplications(requestOptions, signal);

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof getUserApplications>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData> };
};

export type GetUserApplicationsQueryResult = NonNullable<Awaited<ReturnType<typeof getUserApplications>>>;
export type GetUserApplicationsQueryError = ErrorType<unknown>;

export function useGetUserApplications<
  TData = Awaited<ReturnType<typeof getUserApplications>>,
  TError = ErrorType<unknown>,
>(options: {
  query: Partial<UseQueryOptions<Awaited<ReturnType<typeof getUserApplications>>, TError, TData>> &
    Pick<DefinedInitialDataOptions<Awaited<ReturnType<typeof getUserApplications>>, TError, TData>, "initialData">;
  request?: SecondParameter<typeof customInstance>;
}): DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };
export function useGetUserApplications<
  TData = Awaited<ReturnType<typeof getUserApplications>>,
  TError = ErrorType<unknown>,
>(options?: {
  query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getUserApplications>>, TError, TData>> &
    Pick<UndefinedInitialDataOptions<Awaited<ReturnType<typeof getUserApplications>>, TError, TData>, "initialData">;
  request?: SecondParameter<typeof customInstance>;
}): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };
export function useGetUserApplications<
  TData = Awaited<ReturnType<typeof getUserApplications>>,
  TError = ErrorType<unknown>,
>(options?: {
  query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getUserApplications>>, TError, TData>>;
  request?: SecondParameter<typeof customInstance>;
}): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

export function useGetUserApplications<
  TData = Awaited<ReturnType<typeof getUserApplications>>,
  TError = ErrorType<unknown>,
>(options?: {
  query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getUserApplications>>, TError, TData>>;
  request?: SecondParameter<typeof customInstance>;
}): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {
  const queryOptions = getGetUserApplicationsQueryOptions(options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey;

  return query;
}

/**
 * Gett all event user applications
 */
export const getEventApplications = (
  eventId: number,
  options?: SecondParameter<typeof customInstance>,
  signal?: AbortSignal,
) => {
  return customInstance<EventApplication[]>({ url: `/events/${eventId}/applications`, method: "GET", signal }, options);
};

export const getGetEventApplicationsQueryKey = (eventId: number) => {
  return [`/events/${eventId}/applications`] as const;
};

export const getGetEventApplicationsQueryOptions = <
  TData = Awaited<ReturnType<typeof getEventApplications>>,
  TError = ErrorType<unknown>,
>(
  eventId: number,
  options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getEventApplications>>, TError, TData>>;
    request?: SecondParameter<typeof customInstance>;
  },
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getGetEventApplicationsQueryKey(eventId);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getEventApplications>>> = ({ signal }) =>
    getEventApplications(eventId, requestOptions, signal);

  return { queryKey, queryFn, enabled: !!eventId, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof getEventApplications>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData> };
};

export type GetEventApplicationsQueryResult = NonNullable<Awaited<ReturnType<typeof getEventApplications>>>;
export type GetEventApplicationsQueryError = ErrorType<unknown>;

export function useGetEventApplications<
  TData = Awaited<ReturnType<typeof getEventApplications>>,
  TError = ErrorType<unknown>,
>(
  eventId: number,
  options: {
    query: Partial<UseQueryOptions<Awaited<ReturnType<typeof getEventApplications>>, TError, TData>> &
      Pick<DefinedInitialDataOptions<Awaited<ReturnType<typeof getEventApplications>>, TError, TData>, "initialData">;
    request?: SecondParameter<typeof customInstance>;
  },
): DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };
export function useGetEventApplications<
  TData = Awaited<ReturnType<typeof getEventApplications>>,
  TError = ErrorType<unknown>,
>(
  eventId: number,
  options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getEventApplications>>, TError, TData>> &
      Pick<UndefinedInitialDataOptions<Awaited<ReturnType<typeof getEventApplications>>, TError, TData>, "initialData">;
    request?: SecondParameter<typeof customInstance>;
  },
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };
export function useGetEventApplications<
  TData = Awaited<ReturnType<typeof getEventApplications>>,
  TError = ErrorType<unknown>,
>(
  eventId: number,
  options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getEventApplications>>, TError, TData>>;
    request?: SecondParameter<typeof customInstance>;
  },
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

export function useGetEventApplications<
  TData = Awaited<ReturnType<typeof getEventApplications>>,
  TError = ErrorType<unknown>,
>(
  eventId: number,
  options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getEventApplications>>, TError, TData>>;
    request?: SecondParameter<typeof customInstance>;
  },
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {
  const queryOptions = getGetEventApplicationsQueryOptions(eventId, options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey;

  return query;
}

/**
 * Create event application
 */
export const createUserApplication = (
  eventId: number,
  createEventApplication: BodyType<CreateEventApplication>,
  options?: SecondParameter<typeof customInstance>,
  signal?: AbortSignal,
) => {
  return customInstance<EventApplicationSimple>(
    {
      url: `/events/${eventId}/applications`,
      method: "POST",
      headers: { "Content-Type": "application/json" },
      data: createEventApplication,
      signal,
    },
    options,
  );
};

export const getCreateUserApplicationMutationOptions = <TError = ErrorType<unknown>, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof createUserApplication>>,
    TError,
    { eventId: number; data: BodyType<CreateEventApplication> },
    TContext
  >;
  request?: SecondParameter<typeof customInstance>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof createUserApplication>>,
  TError,
  { eventId: number; data: BodyType<CreateEventApplication> },
  TContext
> => {
  const { mutation: mutationOptions, request: requestOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof createUserApplication>>,
    { eventId: number; data: BodyType<CreateEventApplication> }
  > = (props) => {
    const { eventId, data } = props ?? {};

    return createUserApplication(eventId, data, requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type CreateUserApplicationMutationResult = NonNullable<Awaited<ReturnType<typeof createUserApplication>>>;
export type CreateUserApplicationMutationBody = BodyType<CreateEventApplication>;
export type CreateUserApplicationMutationError = ErrorType<unknown>;

export const useCreateUserApplication = <TError = ErrorType<unknown>, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof createUserApplication>>,
    TError,
    { eventId: number; data: BodyType<CreateEventApplication> },
    TContext
  >;
  request?: SecondParameter<typeof customInstance>;
}): UseMutationResult<
  Awaited<ReturnType<typeof createUserApplication>>,
  TError,
  { eventId: number; data: BodyType<CreateEventApplication> },
  TContext
> => {
  const mutationOptions = getCreateUserApplicationMutationOptions(options);

  return useMutation(mutationOptions);
};

/**
 * Update event application
 */
export const updateEventApplication = (
  id: string,
  updateEventApplication: BodyType<UpdateEventApplication>,
  options?: SecondParameter<typeof customInstance>,
) => {
  return customInstance<UpdateEventApplication200 | EventApplicationSimple>(
    {
      url: `/events/application/${id}`,
      method: "PATCH",
      headers: { "Content-Type": "application/json" },
      data: updateEventApplication,
    },
    options,
  );
};

export const getUpdateEventApplicationMutationOptions = <TError = ErrorType<unknown>, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof updateEventApplication>>,
    TError,
    { id: string; data: BodyType<UpdateEventApplication> },
    TContext
  >;
  request?: SecondParameter<typeof customInstance>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof updateEventApplication>>,
  TError,
  { id: string; data: BodyType<UpdateEventApplication> },
  TContext
> => {
  const { mutation: mutationOptions, request: requestOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof updateEventApplication>>,
    { id: string; data: BodyType<UpdateEventApplication> }
  > = (props) => {
    const { id, data } = props ?? {};

    return updateEventApplication(id, data, requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type UpdateEventApplicationMutationResult = NonNullable<Awaited<ReturnType<typeof updateEventApplication>>>;
export type UpdateEventApplicationMutationBody = BodyType<UpdateEventApplication>;
export type UpdateEventApplicationMutationError = ErrorType<unknown>;

export const useUpdateEventApplication = <TError = ErrorType<unknown>, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof updateEventApplication>>,
    TError,
    { id: string; data: BodyType<UpdateEventApplication> },
    TContext
  >;
  request?: SecondParameter<typeof customInstance>;
}): UseMutationResult<
  Awaited<ReturnType<typeof updateEventApplication>>,
  TError,
  { id: string; data: BodyType<UpdateEventApplication> },
  TContext
> => {
  const mutationOptions = getUpdateEventApplicationMutationOptions(options);

  return useMutation(mutationOptions);
};

/**
 * Delete event application by ID
 */
export const deleteEventApplication = (id: string, options?: SecondParameter<typeof customInstance>) => {
  return customInstance<void>({ url: `/events/application/${id}`, method: "DELETE" }, options);
};

export const getDeleteEventApplicationMutationOptions = <TError = ErrorType<void>, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<Awaited<ReturnType<typeof deleteEventApplication>>, TError, { id: string }, TContext>;
  request?: SecondParameter<typeof customInstance>;
}): UseMutationOptions<Awaited<ReturnType<typeof deleteEventApplication>>, TError, { id: string }, TContext> => {
  const { mutation: mutationOptions, request: requestOptions } = options ?? {};

  const mutationFn: MutationFunction<Awaited<ReturnType<typeof deleteEventApplication>>, { id: string }> = (props) => {
    const { id } = props ?? {};

    return deleteEventApplication(id, requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type DeleteEventApplicationMutationResult = NonNullable<Awaited<ReturnType<typeof deleteEventApplication>>>;

export type DeleteEventApplicationMutationError = ErrorType<void>;

export const useDeleteEventApplication = <TError = ErrorType<void>, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<Awaited<ReturnType<typeof deleteEventApplication>>, TError, { id: string }, TContext>;
  request?: SecondParameter<typeof customInstance>;
}): UseMutationResult<Awaited<ReturnType<typeof deleteEventApplication>>, TError, { id: string }, TContext> => {
  const mutationOptions = getDeleteEventApplicationMutationOptions(options);

  return useMutation(mutationOptions);
};

/**
 * To filter by `since` use:

`sinceSince`: Events with `since` more than entered value

`toSince`: Events with `since` less than entered value


Examples:
- To filter only future events use `sinceSince` `(new Date().getTime())`
- To filter only past events use `toSince` `(new Date().getTime())`
- To filter only events between two dates use `sinceSince`: `dateA`, `toSince`: `dateB`
 */
export const getEvents = (
  params?: GetEventsParams,
  options?: SecondParameter<typeof customInstance>,
  signal?: AbortSignal,
) => {
  return customInstance<EventSimple[]>({ url: `/events`, method: "GET", params, signal }, options);
};

export const getGetEventsQueryKey = (params?: GetEventsParams) => {
  return [`/events`, ...(params ? [params] : [])] as const;
};

export const getGetEventsQueryOptions = <TData = Awaited<ReturnType<typeof getEvents>>, TError = ErrorType<unknown>>(
  params?: GetEventsParams,
  options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getEvents>>, TError, TData>>;
    request?: SecondParameter<typeof customInstance>;
  },
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getGetEventsQueryKey(params);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getEvents>>> = ({ signal }) =>
    getEvents(params, requestOptions, signal);

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof getEvents>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData> };
};

export type GetEventsQueryResult = NonNullable<Awaited<ReturnType<typeof getEvents>>>;
export type GetEventsQueryError = ErrorType<unknown>;

export function useGetEvents<TData = Awaited<ReturnType<typeof getEvents>>, TError = ErrorType<unknown>>(
  params: undefined | GetEventsParams,
  options: {
    query: Partial<UseQueryOptions<Awaited<ReturnType<typeof getEvents>>, TError, TData>> &
      Pick<DefinedInitialDataOptions<Awaited<ReturnType<typeof getEvents>>, TError, TData>, "initialData">;
    request?: SecondParameter<typeof customInstance>;
  },
): DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };
export function useGetEvents<TData = Awaited<ReturnType<typeof getEvents>>, TError = ErrorType<unknown>>(
  params?: GetEventsParams,
  options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getEvents>>, TError, TData>> &
      Pick<UndefinedInitialDataOptions<Awaited<ReturnType<typeof getEvents>>, TError, TData>, "initialData">;
    request?: SecondParameter<typeof customInstance>;
  },
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };
export function useGetEvents<TData = Awaited<ReturnType<typeof getEvents>>, TError = ErrorType<unknown>>(
  params?: GetEventsParams,
  options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getEvents>>, TError, TData>>;
    request?: SecondParameter<typeof customInstance>;
  },
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

export function useGetEvents<TData = Awaited<ReturnType<typeof getEvents>>, TError = ErrorType<unknown>>(
  params?: GetEventsParams,
  options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getEvents>>, TError, TData>>;
    request?: SecondParameter<typeof customInstance>;
  },
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {
  const queryOptions = getGetEventsQueryOptions(params, options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey;

  return query;
}

/**
 * Create new event

Organization permissions required: `create.event`
 */
export const createEvent = (
  createEvent: BodyType<CreateEvent>,
  options?: SecondParameter<typeof customInstance>,
  signal?: AbortSignal,
) => {
  return customInstance<EventSimple>(
    { url: `/events`, method: "POST", headers: { "Content-Type": "application/json" }, data: createEvent, signal },
    options,
  );
};

export const getCreateEventMutationOptions = <TError = ErrorType<void>, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof createEvent>>,
    TError,
    { data: BodyType<CreateEvent> },
    TContext
  >;
  request?: SecondParameter<typeof customInstance>;
}): UseMutationOptions<Awaited<ReturnType<typeof createEvent>>, TError, { data: BodyType<CreateEvent> }, TContext> => {
  const { mutation: mutationOptions, request: requestOptions } = options ?? {};

  const mutationFn: MutationFunction<Awaited<ReturnType<typeof createEvent>>, { data: BodyType<CreateEvent> }> = (
    props,
  ) => {
    const { data } = props ?? {};

    return createEvent(data, requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type CreateEventMutationResult = NonNullable<Awaited<ReturnType<typeof createEvent>>>;
export type CreateEventMutationBody = BodyType<CreateEvent>;
export type CreateEventMutationError = ErrorType<void>;

export const useCreateEvent = <TError = ErrorType<void>, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof createEvent>>,
    TError,
    { data: BodyType<CreateEvent> },
    TContext
  >;
  request?: SecondParameter<typeof customInstance>;
}): UseMutationResult<Awaited<ReturnType<typeof createEvent>>, TError, { data: BodyType<CreateEvent> }, TContext> => {
  const mutationOptions = getCreateEventMutationOptions(options);

  return useMutation(mutationOptions);
};

/**
 * Find event by ID or slug
 */
export const getEvent = (id: number, options?: SecondParameter<typeof customInstance>, signal?: AbortSignal) => {
  return customInstance<EventDetail>({ url: `/events/${id}`, method: "GET", signal }, options);
};

export const getGetEventQueryKey = (id: number) => {
  return [`/events/${id}`] as const;
};

export const getGetEventQueryOptions = <TData = Awaited<ReturnType<typeof getEvent>>, TError = ErrorType<void>>(
  id: number,
  options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getEvent>>, TError, TData>>;
    request?: SecondParameter<typeof customInstance>;
  },
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getGetEventQueryKey(id);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getEvent>>> = ({ signal }) =>
    getEvent(id, requestOptions, signal);

  return { queryKey, queryFn, enabled: !!id, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof getEvent>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData> };
};

export type GetEventQueryResult = NonNullable<Awaited<ReturnType<typeof getEvent>>>;
export type GetEventQueryError = ErrorType<void>;

export function useGetEvent<TData = Awaited<ReturnType<typeof getEvent>>, TError = ErrorType<void>>(
  id: number,
  options: {
    query: Partial<UseQueryOptions<Awaited<ReturnType<typeof getEvent>>, TError, TData>> &
      Pick<DefinedInitialDataOptions<Awaited<ReturnType<typeof getEvent>>, TError, TData>, "initialData">;
    request?: SecondParameter<typeof customInstance>;
  },
): DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };
export function useGetEvent<TData = Awaited<ReturnType<typeof getEvent>>, TError = ErrorType<void>>(
  id: number,
  options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getEvent>>, TError, TData>> &
      Pick<UndefinedInitialDataOptions<Awaited<ReturnType<typeof getEvent>>, TError, TData>, "initialData">;
    request?: SecondParameter<typeof customInstance>;
  },
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };
export function useGetEvent<TData = Awaited<ReturnType<typeof getEvent>>, TError = ErrorType<void>>(
  id: number,
  options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getEvent>>, TError, TData>>;
    request?: SecondParameter<typeof customInstance>;
  },
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

export function useGetEvent<TData = Awaited<ReturnType<typeof getEvent>>, TError = ErrorType<void>>(
  id: number,
  options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getEvent>>, TError, TData>>;
    request?: SecondParameter<typeof customInstance>;
  },
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {
  const queryOptions = getGetEventQueryOptions(id, options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey;

  return query;
}

/**
 * Duplicate event by ID
 */
export const duplicateEvent = (id: number, options?: SecondParameter<typeof customInstance>, signal?: AbortSignal) => {
  return customInstance<EventDetail>({ url: `/events/${id}`, method: "POST", signal }, options);
};

export const getDuplicateEventMutationOptions = <TError = ErrorType<unknown>, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<Awaited<ReturnType<typeof duplicateEvent>>, TError, { id: number }, TContext>;
  request?: SecondParameter<typeof customInstance>;
}): UseMutationOptions<Awaited<ReturnType<typeof duplicateEvent>>, TError, { id: number }, TContext> => {
  const { mutation: mutationOptions, request: requestOptions } = options ?? {};

  const mutationFn: MutationFunction<Awaited<ReturnType<typeof duplicateEvent>>, { id: number }> = (props) => {
    const { id } = props ?? {};

    return duplicateEvent(id, requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type DuplicateEventMutationResult = NonNullable<Awaited<ReturnType<typeof duplicateEvent>>>;

export type DuplicateEventMutationError = ErrorType<unknown>;

export const useDuplicateEvent = <TError = ErrorType<unknown>, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<Awaited<ReturnType<typeof duplicateEvent>>, TError, { id: number }, TContext>;
  request?: SecondParameter<typeof customInstance>;
}): UseMutationResult<Awaited<ReturnType<typeof duplicateEvent>>, TError, { id: number }, TContext> => {
  const mutationOptions = getDuplicateEventMutationOptions(options);

  return useMutation(mutationOptions);
};

export const updateEvent = (
  eventId: number,
  updateEvent: BodyType<UpdateEvent>,
  options?: SecondParameter<typeof customInstance>,
) => {
  return customInstance<EventDetail>(
    { url: `/events/${eventId}`, method: "PATCH", headers: { "Content-Type": "application/json" }, data: updateEvent },
    options,
  );
};

export const getUpdateEventMutationOptions = <TError = ErrorType<void>, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof updateEvent>>,
    TError,
    { eventId: number; data: BodyType<UpdateEvent> },
    TContext
  >;
  request?: SecondParameter<typeof customInstance>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof updateEvent>>,
  TError,
  { eventId: number; data: BodyType<UpdateEvent> },
  TContext
> => {
  const { mutation: mutationOptions, request: requestOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof updateEvent>>,
    { eventId: number; data: BodyType<UpdateEvent> }
  > = (props) => {
    const { eventId, data } = props ?? {};

    return updateEvent(eventId, data, requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type UpdateEventMutationResult = NonNullable<Awaited<ReturnType<typeof updateEvent>>>;
export type UpdateEventMutationBody = BodyType<UpdateEvent>;
export type UpdateEventMutationError = ErrorType<void>;

export const useUpdateEvent = <TError = ErrorType<void>, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof updateEvent>>,
    TError,
    { eventId: number; data: BodyType<UpdateEvent> },
    TContext
  >;
  request?: SecondParameter<typeof customInstance>;
}): UseMutationResult<
  Awaited<ReturnType<typeof updateEvent>>,
  TError,
  { eventId: number; data: BodyType<UpdateEvent> },
  TContext
> => {
  const mutationOptions = getUpdateEventMutationOptions(options);

  return useMutation(mutationOptions);
};

/**
 * Update event photo
Organization permissions required: `create.event`
 */
export const updateEventPhoto = (
  eventId: number,
  updatePhoto: BodyType<UpdatePhoto>,
  options?: SecondParameter<typeof customInstance>,
) => {
  const formData = new FormData();
  formData.append("file", updatePhoto.file);

  return customInstance<void>(
    {
      url: `/events/${eventId}/photo`,
      method: "PATCH",
      headers: { "Content-Type": "multipart/form-data" },
      data: formData,
    },
    options,
  );
};

export const getUpdateEventPhotoMutationOptions = <TError = ErrorType<void>, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof updateEventPhoto>>,
    TError,
    { eventId: number; data: BodyType<UpdatePhoto> },
    TContext
  >;
  request?: SecondParameter<typeof customInstance>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof updateEventPhoto>>,
  TError,
  { eventId: number; data: BodyType<UpdatePhoto> },
  TContext
> => {
  const { mutation: mutationOptions, request: requestOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof updateEventPhoto>>,
    { eventId: number; data: BodyType<UpdatePhoto> }
  > = (props) => {
    const { eventId, data } = props ?? {};

    return updateEventPhoto(eventId, data, requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type UpdateEventPhotoMutationResult = NonNullable<Awaited<ReturnType<typeof updateEventPhoto>>>;
export type UpdateEventPhotoMutationBody = BodyType<UpdatePhoto>;
export type UpdateEventPhotoMutationError = ErrorType<void>;

export const useUpdateEventPhoto = <TError = ErrorType<void>, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof updateEventPhoto>>,
    TError,
    { eventId: number; data: BodyType<UpdatePhoto> },
    TContext
  >;
  request?: SecondParameter<typeof customInstance>;
}): UseMutationResult<
  Awaited<ReturnType<typeof updateEventPhoto>>,
  TError,
  { eventId: number; data: BodyType<UpdatePhoto> },
  TContext
> => {
  const mutationOptions = getUpdateEventPhotoMutationOptions(options);

  return useMutation(mutationOptions);
};

/**
 * Find event spots for event
 */
export const getEventSpots = (
  id: number,
  params?: GetEventSpotsParams,
  options?: SecondParameter<typeof customInstance>,
  signal?: AbortSignal,
) => {
  return customInstance<EventSpotSimple[]>({ url: `/events/${id}/spots`, method: "GET", params, signal }, options);
};

export const getGetEventSpotsQueryKey = (id: number, params?: GetEventSpotsParams) => {
  return [`/events/${id}/spots`, ...(params ? [params] : [])] as const;
};

export const getGetEventSpotsQueryOptions = <
  TData = Awaited<ReturnType<typeof getEventSpots>>,
  TError = ErrorType<unknown>,
>(
  id: number,
  params?: GetEventSpotsParams,
  options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getEventSpots>>, TError, TData>>;
    request?: SecondParameter<typeof customInstance>;
  },
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getGetEventSpotsQueryKey(id, params);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getEventSpots>>> = ({ signal }) =>
    getEventSpots(id, params, requestOptions, signal);

  return { queryKey, queryFn, enabled: !!id, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof getEventSpots>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData> };
};

export type GetEventSpotsQueryResult = NonNullable<Awaited<ReturnType<typeof getEventSpots>>>;
export type GetEventSpotsQueryError = ErrorType<unknown>;

export function useGetEventSpots<TData = Awaited<ReturnType<typeof getEventSpots>>, TError = ErrorType<unknown>>(
  id: number,
  params: undefined | GetEventSpotsParams,
  options: {
    query: Partial<UseQueryOptions<Awaited<ReturnType<typeof getEventSpots>>, TError, TData>> &
      Pick<DefinedInitialDataOptions<Awaited<ReturnType<typeof getEventSpots>>, TError, TData>, "initialData">;
    request?: SecondParameter<typeof customInstance>;
  },
): DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };
export function useGetEventSpots<TData = Awaited<ReturnType<typeof getEventSpots>>, TError = ErrorType<unknown>>(
  id: number,
  params?: GetEventSpotsParams,
  options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getEventSpots>>, TError, TData>> &
      Pick<UndefinedInitialDataOptions<Awaited<ReturnType<typeof getEventSpots>>, TError, TData>, "initialData">;
    request?: SecondParameter<typeof customInstance>;
  },
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };
export function useGetEventSpots<TData = Awaited<ReturnType<typeof getEventSpots>>, TError = ErrorType<unknown>>(
  id: number,
  params?: GetEventSpotsParams,
  options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getEventSpots>>, TError, TData>>;
    request?: SecondParameter<typeof customInstance>;
  },
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

export function useGetEventSpots<TData = Awaited<ReturnType<typeof getEventSpots>>, TError = ErrorType<unknown>>(
  id: number,
  params?: GetEventSpotsParams,
  options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getEventSpots>>, TError, TData>>;
    request?: SecondParameter<typeof customInstance>;
  },
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {
  const queryOptions = getGetEventSpotsQueryOptions(id, params, options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey;

  return query;
}

/**
 * Create new event spot
 */
export const createEventSpot = (
  id: number,
  createEventSpot: BodyType<CreateEventSpot>,
  options?: SecondParameter<typeof customInstance>,
  signal?: AbortSignal,
) => {
  return customInstance<EventSpotSimple>(
    {
      url: `/events/${id}/spots`,
      method: "POST",
      headers: { "Content-Type": "application/json" },
      data: createEventSpot,
      signal,
    },
    options,
  );
};

export const getCreateEventSpotMutationOptions = <TError = ErrorType<void>, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof createEventSpot>>,
    TError,
    { id: number; data: BodyType<CreateEventSpot> },
    TContext
  >;
  request?: SecondParameter<typeof customInstance>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof createEventSpot>>,
  TError,
  { id: number; data: BodyType<CreateEventSpot> },
  TContext
> => {
  const { mutation: mutationOptions, request: requestOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof createEventSpot>>,
    { id: number; data: BodyType<CreateEventSpot> }
  > = (props) => {
    const { id, data } = props ?? {};

    return createEventSpot(id, data, requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type CreateEventSpotMutationResult = NonNullable<Awaited<ReturnType<typeof createEventSpot>>>;
export type CreateEventSpotMutationBody = BodyType<CreateEventSpot>;
export type CreateEventSpotMutationError = ErrorType<void>;

export const useCreateEventSpot = <TError = ErrorType<void>, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof createEventSpot>>,
    TError,
    { id: number; data: BodyType<CreateEventSpot> },
    TContext
  >;
  request?: SecondParameter<typeof customInstance>;
}): UseMutationResult<
  Awaited<ReturnType<typeof createEventSpot>>,
  TError,
  { id: number; data: BodyType<CreateEventSpot> },
  TContext
> => {
  const mutationOptions = getCreateEventSpotMutationOptions(options);

  return useMutation(mutationOptions);
};

export const deleteEventSpot = (
  id: number,
  deleteEventSpot: BodyType<DeleteEventSpot>,
  options?: SecondParameter<typeof customInstance>,
) => {
  return customInstance<void>(
    {
      url: `/events/spots/${id}`,
      method: "DELETE",
      headers: { "Content-Type": "application/json" },
      data: deleteEventSpot,
    },
    options,
  );
};

export const getDeleteEventSpotMutationOptions = <TError = ErrorType<void>, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof deleteEventSpot>>,
    TError,
    { id: number; data: BodyType<DeleteEventSpot> },
    TContext
  >;
  request?: SecondParameter<typeof customInstance>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof deleteEventSpot>>,
  TError,
  { id: number; data: BodyType<DeleteEventSpot> },
  TContext
> => {
  const { mutation: mutationOptions, request: requestOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof deleteEventSpot>>,
    { id: number; data: BodyType<DeleteEventSpot> }
  > = (props) => {
    const { id, data } = props ?? {};

    return deleteEventSpot(id, data, requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type DeleteEventSpotMutationResult = NonNullable<Awaited<ReturnType<typeof deleteEventSpot>>>;
export type DeleteEventSpotMutationBody = BodyType<DeleteEventSpot>;
export type DeleteEventSpotMutationError = ErrorType<void>;

export const useDeleteEventSpot = <TError = ErrorType<void>, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof deleteEventSpot>>,
    TError,
    { id: number; data: BodyType<DeleteEventSpot> },
    TContext
  >;
  request?: SecondParameter<typeof customInstance>;
}): UseMutationResult<
  Awaited<ReturnType<typeof deleteEventSpot>>,
  TError,
  { id: number; data: BodyType<DeleteEventSpot> },
  TContext
> => {
  const mutationOptions = getDeleteEventSpotMutationOptions(options);

  return useMutation(mutationOptions);
};

export const updateEventSpot = (
  id: number,
  updateEventSpot: BodyType<UpdateEventSpot>,
  options?: SecondParameter<typeof customInstance>,
) => {
  return customInstance<EventSpotSimple>(
    {
      url: `/events/spots/${id}`,
      method: "PATCH",
      headers: { "Content-Type": "application/json" },
      data: updateEventSpot,
    },
    options,
  );
};

export const getUpdateEventSpotMutationOptions = <TError = ErrorType<void>, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof updateEventSpot>>,
    TError,
    { id: number; data: BodyType<UpdateEventSpot> },
    TContext
  >;
  request?: SecondParameter<typeof customInstance>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof updateEventSpot>>,
  TError,
  { id: number; data: BodyType<UpdateEventSpot> },
  TContext
> => {
  const { mutation: mutationOptions, request: requestOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof updateEventSpot>>,
    { id: number; data: BodyType<UpdateEventSpot> }
  > = (props) => {
    const { id, data } = props ?? {};

    return updateEventSpot(id, data, requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type UpdateEventSpotMutationResult = NonNullable<Awaited<ReturnType<typeof updateEventSpot>>>;
export type UpdateEventSpotMutationBody = BodyType<UpdateEventSpot>;
export type UpdateEventSpotMutationError = ErrorType<void>;

export const useUpdateEventSpot = <TError = ErrorType<void>, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof updateEventSpot>>,
    TError,
    { id: number; data: BodyType<UpdateEventSpot> },
    TContext
  >;
  request?: SecondParameter<typeof customInstance>;
}): UseMutationResult<
  Awaited<ReturnType<typeof updateEventSpot>>,
  TError,
  { id: number; data: BodyType<UpdateEventSpot> },
  TContext
> => {
  const mutationOptions = getUpdateEventSpotMutationOptions(options);

  return useMutation(mutationOptions);
};

/**
 * Get invoice data
 */
export const getInvoice = (id: string, options?: SecondParameter<typeof customInstance>, signal?: AbortSignal) => {
  return customInstance<InvoiceSimple>({ url: `/invoice/${id}`, method: "GET", signal }, options);
};

export const getGetInvoiceQueryKey = (id: string) => {
  return [`/invoice/${id}`] as const;
};

export const getGetInvoiceQueryOptions = <TData = Awaited<ReturnType<typeof getInvoice>>, TError = ErrorType<void>>(
  id: string,
  options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getInvoice>>, TError, TData>>;
    request?: SecondParameter<typeof customInstance>;
  },
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getGetInvoiceQueryKey(id);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getInvoice>>> = ({ signal }) =>
    getInvoice(id, requestOptions, signal);

  return { queryKey, queryFn, enabled: !!id, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof getInvoice>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData> };
};

export type GetInvoiceQueryResult = NonNullable<Awaited<ReturnType<typeof getInvoice>>>;
export type GetInvoiceQueryError = ErrorType<void>;

export function useGetInvoice<TData = Awaited<ReturnType<typeof getInvoice>>, TError = ErrorType<void>>(
  id: string,
  options: {
    query: Partial<UseQueryOptions<Awaited<ReturnType<typeof getInvoice>>, TError, TData>> &
      Pick<DefinedInitialDataOptions<Awaited<ReturnType<typeof getInvoice>>, TError, TData>, "initialData">;
    request?: SecondParameter<typeof customInstance>;
  },
): DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };
export function useGetInvoice<TData = Awaited<ReturnType<typeof getInvoice>>, TError = ErrorType<void>>(
  id: string,
  options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getInvoice>>, TError, TData>> &
      Pick<UndefinedInitialDataOptions<Awaited<ReturnType<typeof getInvoice>>, TError, TData>, "initialData">;
    request?: SecondParameter<typeof customInstance>;
  },
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };
export function useGetInvoice<TData = Awaited<ReturnType<typeof getInvoice>>, TError = ErrorType<void>>(
  id: string,
  options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getInvoice>>, TError, TData>>;
    request?: SecondParameter<typeof customInstance>;
  },
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

export function useGetInvoice<TData = Awaited<ReturnType<typeof getInvoice>>, TError = ErrorType<void>>(
  id: string,
  options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getInvoice>>, TError, TData>>;
    request?: SecondParameter<typeof customInstance>;
  },
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {
  const queryOptions = getGetInvoiceQueryOptions(id, options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey;

  return query;
}

/**
 * Get invoice PDF public address

Will be generated if does not exist.
 */
export const getInvoiceUrl = (id: string, options?: SecondParameter<typeof customInstance>, signal?: AbortSignal) => {
  return customInstance<InvoiceUrl>({ url: `/invoice/${id}/url`, method: "GET", signal }, options);
};

export const getGetInvoiceUrlQueryKey = (id: string) => {
  return [`/invoice/${id}/url`] as const;
};

export const getGetInvoiceUrlQueryOptions = <
  TData = Awaited<ReturnType<typeof getInvoiceUrl>>,
  TError = ErrorType<void>,
>(
  id: string,
  options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getInvoiceUrl>>, TError, TData>>;
    request?: SecondParameter<typeof customInstance>;
  },
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getGetInvoiceUrlQueryKey(id);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getInvoiceUrl>>> = ({ signal }) =>
    getInvoiceUrl(id, requestOptions, signal);

  return { queryKey, queryFn, enabled: !!id, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof getInvoiceUrl>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData> };
};

export type GetInvoiceUrlQueryResult = NonNullable<Awaited<ReturnType<typeof getInvoiceUrl>>>;
export type GetInvoiceUrlQueryError = ErrorType<void>;

export function useGetInvoiceUrl<TData = Awaited<ReturnType<typeof getInvoiceUrl>>, TError = ErrorType<void>>(
  id: string,
  options: {
    query: Partial<UseQueryOptions<Awaited<ReturnType<typeof getInvoiceUrl>>, TError, TData>> &
      Pick<DefinedInitialDataOptions<Awaited<ReturnType<typeof getInvoiceUrl>>, TError, TData>, "initialData">;
    request?: SecondParameter<typeof customInstance>;
  },
): DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };
export function useGetInvoiceUrl<TData = Awaited<ReturnType<typeof getInvoiceUrl>>, TError = ErrorType<void>>(
  id: string,
  options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getInvoiceUrl>>, TError, TData>> &
      Pick<UndefinedInitialDataOptions<Awaited<ReturnType<typeof getInvoiceUrl>>, TError, TData>, "initialData">;
    request?: SecondParameter<typeof customInstance>;
  },
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };
export function useGetInvoiceUrl<TData = Awaited<ReturnType<typeof getInvoiceUrl>>, TError = ErrorType<void>>(
  id: string,
  options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getInvoiceUrl>>, TError, TData>>;
    request?: SecondParameter<typeof customInstance>;
  },
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

export function useGetInvoiceUrl<TData = Awaited<ReturnType<typeof getInvoiceUrl>>, TError = ErrorType<void>>(
  id: string,
  options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getInvoiceUrl>>, TError, TData>>;
    request?: SecondParameter<typeof customInstance>;
  },
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {
  const queryOptions = getGetInvoiceUrlQueryOptions(id, options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey;

  return query;
}

/**
 * Get invoice PDF public address

Will be generated if does not exist.
 */
export const getInvoicePdfStream = (
  id: string,
  options?: SecondParameter<typeof customInstance>,
  signal?: AbortSignal,
) => {
  return customInstance<unknown>({ url: `/invoice/${id}/stream`, method: "GET", signal }, options);
};

export const getGetInvoicePdfStreamQueryKey = (id: string) => {
  return [`/invoice/${id}/stream`] as const;
};

export const getGetInvoicePdfStreamQueryOptions = <
  TData = Awaited<ReturnType<typeof getInvoicePdfStream>>,
  TError = ErrorType<unknown>,
>(
  id: string,
  options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getInvoicePdfStream>>, TError, TData>>;
    request?: SecondParameter<typeof customInstance>;
  },
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getGetInvoicePdfStreamQueryKey(id);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getInvoicePdfStream>>> = ({ signal }) =>
    getInvoicePdfStream(id, requestOptions, signal);

  return { queryKey, queryFn, enabled: !!id, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof getInvoicePdfStream>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData> };
};

export type GetInvoicePdfStreamQueryResult = NonNullable<Awaited<ReturnType<typeof getInvoicePdfStream>>>;
export type GetInvoicePdfStreamQueryError = ErrorType<unknown>;

export function useGetInvoicePdfStream<
  TData = Awaited<ReturnType<typeof getInvoicePdfStream>>,
  TError = ErrorType<unknown>,
>(
  id: string,
  options: {
    query: Partial<UseQueryOptions<Awaited<ReturnType<typeof getInvoicePdfStream>>, TError, TData>> &
      Pick<DefinedInitialDataOptions<Awaited<ReturnType<typeof getInvoicePdfStream>>, TError, TData>, "initialData">;
    request?: SecondParameter<typeof customInstance>;
  },
): DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };
export function useGetInvoicePdfStream<
  TData = Awaited<ReturnType<typeof getInvoicePdfStream>>,
  TError = ErrorType<unknown>,
>(
  id: string,
  options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getInvoicePdfStream>>, TError, TData>> &
      Pick<UndefinedInitialDataOptions<Awaited<ReturnType<typeof getInvoicePdfStream>>, TError, TData>, "initialData">;
    request?: SecondParameter<typeof customInstance>;
  },
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };
export function useGetInvoicePdfStream<
  TData = Awaited<ReturnType<typeof getInvoicePdfStream>>,
  TError = ErrorType<unknown>,
>(
  id: string,
  options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getInvoicePdfStream>>, TError, TData>>;
    request?: SecondParameter<typeof customInstance>;
  },
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

export function useGetInvoicePdfStream<
  TData = Awaited<ReturnType<typeof getInvoicePdfStream>>,
  TError = ErrorType<unknown>,
>(
  id: string,
  options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getInvoicePdfStream>>, TError, TData>>;
    request?: SecondParameter<typeof customInstance>;
  },
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {
  const queryOptions = getGetInvoicePdfStreamQueryOptions(id, options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey;

  return query;
}

/**
 * Find all events including not published/visible events
 */
export const getManagementEvents = (
  params?: GetManagementEventsParams,
  options?: SecondParameter<typeof customInstance>,
  signal?: AbortSignal,
) => {
  return customInstance<EventSimple[]>({ url: `/management/events`, method: "GET", params, signal }, options);
};

export const getGetManagementEventsQueryKey = (params?: GetManagementEventsParams) => {
  return [`/management/events`, ...(params ? [params] : [])] as const;
};

export const getGetManagementEventsQueryOptions = <
  TData = Awaited<ReturnType<typeof getManagementEvents>>,
  TError = ErrorType<unknown>,
>(
  params?: GetManagementEventsParams,
  options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getManagementEvents>>, TError, TData>>;
    request?: SecondParameter<typeof customInstance>;
  },
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getGetManagementEventsQueryKey(params);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getManagementEvents>>> = ({ signal }) =>
    getManagementEvents(params, requestOptions, signal);

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof getManagementEvents>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData> };
};

export type GetManagementEventsQueryResult = NonNullable<Awaited<ReturnType<typeof getManagementEvents>>>;
export type GetManagementEventsQueryError = ErrorType<unknown>;

export function useGetManagementEvents<
  TData = Awaited<ReturnType<typeof getManagementEvents>>,
  TError = ErrorType<unknown>,
>(
  params: undefined | GetManagementEventsParams,
  options: {
    query: Partial<UseQueryOptions<Awaited<ReturnType<typeof getManagementEvents>>, TError, TData>> &
      Pick<DefinedInitialDataOptions<Awaited<ReturnType<typeof getManagementEvents>>, TError, TData>, "initialData">;
    request?: SecondParameter<typeof customInstance>;
  },
): DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };
export function useGetManagementEvents<
  TData = Awaited<ReturnType<typeof getManagementEvents>>,
  TError = ErrorType<unknown>,
>(
  params?: GetManagementEventsParams,
  options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getManagementEvents>>, TError, TData>> &
      Pick<UndefinedInitialDataOptions<Awaited<ReturnType<typeof getManagementEvents>>, TError, TData>, "initialData">;
    request?: SecondParameter<typeof customInstance>;
  },
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };
export function useGetManagementEvents<
  TData = Awaited<ReturnType<typeof getManagementEvents>>,
  TError = ErrorType<unknown>,
>(
  params?: GetManagementEventsParams,
  options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getManagementEvents>>, TError, TData>>;
    request?: SecondParameter<typeof customInstance>;
  },
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

export function useGetManagementEvents<
  TData = Awaited<ReturnType<typeof getManagementEvents>>,
  TError = ErrorType<unknown>,
>(
  params?: GetManagementEventsParams,
  options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getManagementEvents>>, TError, TData>>;
    request?: SecondParameter<typeof customInstance>;
  },
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {
  const queryOptions = getGetManagementEventsQueryOptions(params, options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey;

  return query;
}
