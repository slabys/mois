/**
 * Generated by orval v7.10.0 üç∫
 * Do not edit manually.
 * backend API
 * The backend API description
 * OpenAPI spec version: 0.0.1
 */
import { useMutation, useQuery } from "@tanstack/react-query";
import type {
  DataTag,
  DefinedInitialDataOptions,
  DefinedUseQueryResult,
  MutationFunction,
  QueryClient,
  QueryFunction,
  QueryKey,
  UndefinedInitialDataOptions,
  UseMutationOptions,
  UseMutationResult,
  UseQueryOptions,
  UseQueryResult,
} from "@tanstack/react-query";

import type {
  AccessToken,
  AddOrganizationMembers,
  CreateEvent,
  CreateEventApplication,
  CreateEventSpot,
  CreateOrganization,
  CreateOrganization201,
  CreateRole,
  CreateUser,
  Error,
  EventApplicationDetailedWithApplications,
  EventApplicationSimpleWithApplications,
  EventDetail,
  EventSimple,
  EventSimpleWithApplications,
  EventSpotSimple,
  GenerateSheetEventApplication200,
  GenerateSheetUsers200,
  GetAllUsers200,
  GetAllUsersParams,
  GetEvents200,
  GetEventsParams,
  GetInitialized200,
  GetManagementEvents200,
  GetManagementEventsParams,
  GetRoleAllPermissions200Item,
  GetUserApplications200,
  GetUserApplicationsParams,
  InitializeType,
  LoginUser,
  Organization,
  OrganizationMember,
  OrganizationMemberWithoutUser,
  OrganizationMembers200,
  OrganizationMembersParams,
  Role,
  SendEmailDTO,
  TransferManager201,
  UpdateEvent,
  UpdateEventApplication,
  UpdateEventSpot,
  UpdateOrganization,
  UpdateOrganization201,
  UpdatePhoto,
  UpdateUser,
  User,
  VerifyEmailParams,
} from "./api.schemas";
import { customInstance } from "./customInstance";
import type { ErrorType } from "./customInstance";

type SecondParameter<T extends (...args: never) => unknown> = Parameters<T>[1];

export const getInitialized = (options?: SecondParameter<typeof customInstance>, signal?: AbortSignal) => {
  return customInstance<GetInitialized200>({ url: `/initialize`, method: "GET", signal }, options);
};

export const getGetInitializedQueryKey = () => {
  return [`/initialize`] as const;
};

export const getGetInitializedQueryOptions = <
  TData = Awaited<ReturnType<typeof getInitialized>>,
  TError = ErrorType<unknown>,
>(options?: {
  query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getInitialized>>, TError, TData>>;
  request?: SecondParameter<typeof customInstance>;
}) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getGetInitializedQueryKey();

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getInitialized>>> = ({ signal }) =>
    getInitialized(requestOptions, signal);

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof getInitialized>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData> };
};

export type GetInitializedQueryResult = NonNullable<Awaited<ReturnType<typeof getInitialized>>>;
export type GetInitializedQueryError = ErrorType<unknown>;

export function useGetInitialized<TData = Awaited<ReturnType<typeof getInitialized>>, TError = ErrorType<unknown>>(
  options: {
    query: Partial<UseQueryOptions<Awaited<ReturnType<typeof getInitialized>>, TError, TData>> &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getInitialized>>,
          TError,
          Awaited<ReturnType<typeof getInitialized>>
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient,
): DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };
export function useGetInitialized<TData = Awaited<ReturnType<typeof getInitialized>>, TError = ErrorType<unknown>>(
  options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getInitialized>>, TError, TData>> &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getInitialized>>,
          TError,
          Awaited<ReturnType<typeof getInitialized>>
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };
export function useGetInitialized<TData = Awaited<ReturnType<typeof getInitialized>>, TError = ErrorType<unknown>>(
  options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getInitialized>>, TError, TData>>;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

export function useGetInitialized<TData = Awaited<ReturnType<typeof getInitialized>>, TError = ErrorType<unknown>>(
  options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getInitialized>>, TError, TData>>;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {
  const queryOptions = getGetInitializedQueryOptions(options);

  const query = useQuery(queryOptions, queryClient) as UseQueryResult<TData, TError> & {
    queryKey: DataTag<QueryKey, TData>;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}

export const createInitialState = (
  initializeType: InitializeType,
  options?: SecondParameter<typeof customInstance>,
  signal?: AbortSignal,
) => {
  return customInstance<InitializeType>(
    {
      url: `/initialize`,
      method: "POST",
      headers: { "Content-Type": "application/json" },
      data: initializeType,
      signal,
    },
    options,
  );
};

export const getCreateInitialStateMutationOptions = <TError = ErrorType<unknown>, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof createInitialState>>,
    TError,
    { data: InitializeType },
    TContext
  >;
  request?: SecondParameter<typeof customInstance>;
}): UseMutationOptions<Awaited<ReturnType<typeof createInitialState>>, TError, { data: InitializeType }, TContext> => {
  const mutationKey = ["createInitialState"];
  const { mutation: mutationOptions, request: requestOptions } = options
    ? options.mutation && "mutationKey" in options.mutation && options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, request: undefined };

  const mutationFn: MutationFunction<Awaited<ReturnType<typeof createInitialState>>, { data: InitializeType }> = (
    props,
  ) => {
    const { data } = props ?? {};

    return createInitialState(data, requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type CreateInitialStateMutationResult = NonNullable<Awaited<ReturnType<typeof createInitialState>>>;
export type CreateInitialStateMutationBody = InitializeType;
export type CreateInitialStateMutationError = ErrorType<unknown>;

export const useCreateInitialState = <TError = ErrorType<unknown>, TContext = unknown>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof createInitialState>>,
      TError,
      { data: InitializeType },
      TContext
    >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient,
): UseMutationResult<Awaited<ReturnType<typeof createInitialState>>, TError, { data: InitializeType }, TContext> => {
  const mutationOptions = getCreateInitialStateMutationOptions(options);

  return useMutation(mutationOptions, queryClient);
};

/**
 * Try to login user with given email and password
 */
export const loginUserWithEmailOrUsername = (
  loginUser: LoginUser,
  options?: SecondParameter<typeof customInstance>,
  signal?: AbortSignal,
) => {
  return customInstance<AccessToken>(
    { url: `/auth/login`, method: "POST", headers: { "Content-Type": "application/json" }, data: loginUser, signal },
    options,
  );
};

export const getLoginUserWithEmailOrUsernameMutationOptions = <
  TError = ErrorType<unknown>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof loginUserWithEmailOrUsername>>,
    TError,
    { data: LoginUser },
    TContext
  >;
  request?: SecondParameter<typeof customInstance>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof loginUserWithEmailOrUsername>>,
  TError,
  { data: LoginUser },
  TContext
> => {
  const mutationKey = ["loginUserWithEmailOrUsername"];
  const { mutation: mutationOptions, request: requestOptions } = options
    ? options.mutation && "mutationKey" in options.mutation && options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, request: undefined };

  const mutationFn: MutationFunction<Awaited<ReturnType<typeof loginUserWithEmailOrUsername>>, { data: LoginUser }> = (
    props,
  ) => {
    const { data } = props ?? {};

    return loginUserWithEmailOrUsername(data, requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type LoginUserWithEmailOrUsernameMutationResult = NonNullable<
  Awaited<ReturnType<typeof loginUserWithEmailOrUsername>>
>;
export type LoginUserWithEmailOrUsernameMutationBody = LoginUser;
export type LoginUserWithEmailOrUsernameMutationError = ErrorType<unknown>;

export const useLoginUserWithEmailOrUsername = <TError = ErrorType<unknown>, TContext = unknown>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof loginUserWithEmailOrUsername>>,
      TError,
      { data: LoginUser },
      TContext
    >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient,
): UseMutationResult<
  Awaited<ReturnType<typeof loginUserWithEmailOrUsername>>,
  TError,
  { data: LoginUser },
  TContext
> => {
  const mutationOptions = getLoginUserWithEmailOrUsernameMutationOptions(options);

  return useMutation(mutationOptions, queryClient);
};

/**
 * Logout user
 */
export const logoutUser = (options?: SecondParameter<typeof customInstance>) => {
  return customInstance<void>({ url: `/auth/logout`, method: "DELETE" }, options);
};

export const getLogoutUserMutationOptions = <TError = ErrorType<unknown>, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<Awaited<ReturnType<typeof logoutUser>>, TError, void, TContext>;
  request?: SecondParameter<typeof customInstance>;
}): UseMutationOptions<Awaited<ReturnType<typeof logoutUser>>, TError, void, TContext> => {
  const mutationKey = ["logoutUser"];
  const { mutation: mutationOptions, request: requestOptions } = options
    ? options.mutation && "mutationKey" in options.mutation && options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, request: undefined };

  const mutationFn: MutationFunction<Awaited<ReturnType<typeof logoutUser>>, void> = () => {
    return logoutUser(requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type LogoutUserMutationResult = NonNullable<Awaited<ReturnType<typeof logoutUser>>>;

export type LogoutUserMutationError = ErrorType<unknown>;

export const useLogoutUser = <TError = ErrorType<unknown>, TContext = unknown>(
  options?: {
    mutation?: UseMutationOptions<Awaited<ReturnType<typeof logoutUser>>, TError, void, TContext>;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient,
): UseMutationResult<Awaited<ReturnType<typeof logoutUser>>, TError, void, TContext> => {
  const mutationOptions = getLogoutUserMutationOptions(options);

  return useMutation(mutationOptions, queryClient);
};

export const removeCookie = (options?: SecondParameter<typeof customInstance>) => {
  return customInstance<void>({ url: `/auth/clear-auth`, method: "DELETE" }, options);
};

export const getRemoveCookieMutationOptions = <TError = ErrorType<unknown>, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<Awaited<ReturnType<typeof removeCookie>>, TError, void, TContext>;
  request?: SecondParameter<typeof customInstance>;
}): UseMutationOptions<Awaited<ReturnType<typeof removeCookie>>, TError, void, TContext> => {
  const mutationKey = ["removeCookie"];
  const { mutation: mutationOptions, request: requestOptions } = options
    ? options.mutation && "mutationKey" in options.mutation && options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, request: undefined };

  const mutationFn: MutationFunction<Awaited<ReturnType<typeof removeCookie>>, void> = () => {
    return removeCookie(requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type RemoveCookieMutationResult = NonNullable<Awaited<ReturnType<typeof removeCookie>>>;

export type RemoveCookieMutationError = ErrorType<unknown>;

export const useRemoveCookie = <TError = ErrorType<unknown>, TContext = unknown>(
  options?: {
    mutation?: UseMutationOptions<Awaited<ReturnType<typeof removeCookie>>, TError, void, TContext>;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient,
): UseMutationResult<Awaited<ReturnType<typeof removeCookie>>, TError, void, TContext> => {
  const mutationOptions = getRemoveCookieMutationOptions(options);

  return useMutation(mutationOptions, queryClient);
};

export const verifyEmail = (
  params: VerifyEmailParams,
  options?: SecondParameter<typeof customInstance>,
  signal?: AbortSignal,
) => {
  return customInstance<void>({ url: `/auth/verify`, method: "GET", params, signal }, options);
};

export const getVerifyEmailQueryKey = (params: VerifyEmailParams) => {
  return [`/auth/verify`, ...(params ? [params] : [])] as const;
};

export const getVerifyEmailQueryOptions = <
  TData = Awaited<ReturnType<typeof verifyEmail>>,
  TError = ErrorType<unknown>,
>(
  params: VerifyEmailParams,
  options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof verifyEmail>>, TError, TData>>;
    request?: SecondParameter<typeof customInstance>;
  },
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getVerifyEmailQueryKey(params);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof verifyEmail>>> = ({ signal }) =>
    verifyEmail(params, requestOptions, signal);

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof verifyEmail>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData> };
};

export type VerifyEmailQueryResult = NonNullable<Awaited<ReturnType<typeof verifyEmail>>>;
export type VerifyEmailQueryError = ErrorType<unknown>;

export function useVerifyEmail<TData = Awaited<ReturnType<typeof verifyEmail>>, TError = ErrorType<unknown>>(
  params: VerifyEmailParams,
  options: {
    query: Partial<UseQueryOptions<Awaited<ReturnType<typeof verifyEmail>>, TError, TData>> &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof verifyEmail>>,
          TError,
          Awaited<ReturnType<typeof verifyEmail>>
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient,
): DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };
export function useVerifyEmail<TData = Awaited<ReturnType<typeof verifyEmail>>, TError = ErrorType<unknown>>(
  params: VerifyEmailParams,
  options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof verifyEmail>>, TError, TData>> &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof verifyEmail>>,
          TError,
          Awaited<ReturnType<typeof verifyEmail>>
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };
export function useVerifyEmail<TData = Awaited<ReturnType<typeof verifyEmail>>, TError = ErrorType<unknown>>(
  params: VerifyEmailParams,
  options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof verifyEmail>>, TError, TData>>;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

export function useVerifyEmail<TData = Awaited<ReturnType<typeof verifyEmail>>, TError = ErrorType<unknown>>(
  params: VerifyEmailParams,
  options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof verifyEmail>>, TError, TData>>;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {
  const queryOptions = getVerifyEmailQueryOptions(params, options);

  const query = useQuery(queryOptions, queryClient) as UseQueryResult<TData, TError> & {
    queryKey: DataTag<QueryKey, TData>;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}

export const createUser = (
  createUser: CreateUser,
  options?: SecondParameter<typeof customInstance>,
  signal?: AbortSignal,
) => {
  return customInstance<User>(
    { url: `/users`, method: "POST", headers: { "Content-Type": "application/json" }, data: createUser, signal },
    options,
  );
};

export const getCreateUserMutationOptions = <TError = ErrorType<unknown>, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<Awaited<ReturnType<typeof createUser>>, TError, { data: CreateUser }, TContext>;
  request?: SecondParameter<typeof customInstance>;
}): UseMutationOptions<Awaited<ReturnType<typeof createUser>>, TError, { data: CreateUser }, TContext> => {
  const mutationKey = ["createUser"];
  const { mutation: mutationOptions, request: requestOptions } = options
    ? options.mutation && "mutationKey" in options.mutation && options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, request: undefined };

  const mutationFn: MutationFunction<Awaited<ReturnType<typeof createUser>>, { data: CreateUser }> = (props) => {
    const { data } = props ?? {};

    return createUser(data, requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type CreateUserMutationResult = NonNullable<Awaited<ReturnType<typeof createUser>>>;
export type CreateUserMutationBody = CreateUser;
export type CreateUserMutationError = ErrorType<unknown>;

export const useCreateUser = <TError = ErrorType<unknown>, TContext = unknown>(
  options?: {
    mutation?: UseMutationOptions<Awaited<ReturnType<typeof createUser>>, TError, { data: CreateUser }, TContext>;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient,
): UseMutationResult<Awaited<ReturnType<typeof createUser>>, TError, { data: CreateUser }, TContext> => {
  const mutationOptions = getCreateUserMutationOptions(options);

  return useMutation(mutationOptions, queryClient);
};

/**
 * Update user data
 */
export const updateCurrentUser = (updateUser: UpdateUser, options?: SecondParameter<typeof customInstance>) => {
  return customInstance<User>(
    { url: `/users`, method: "PATCH", headers: { "Content-Type": "application/json" }, data: updateUser },
    options,
  );
};

export const getUpdateCurrentUserMutationOptions = <TError = ErrorType<void>, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<Awaited<ReturnType<typeof updateCurrentUser>>, TError, { data: UpdateUser }, TContext>;
  request?: SecondParameter<typeof customInstance>;
}): UseMutationOptions<Awaited<ReturnType<typeof updateCurrentUser>>, TError, { data: UpdateUser }, TContext> => {
  const mutationKey = ["updateCurrentUser"];
  const { mutation: mutationOptions, request: requestOptions } = options
    ? options.mutation && "mutationKey" in options.mutation && options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, request: undefined };

  const mutationFn: MutationFunction<Awaited<ReturnType<typeof updateCurrentUser>>, { data: UpdateUser }> = (props) => {
    const { data } = props ?? {};

    return updateCurrentUser(data, requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type UpdateCurrentUserMutationResult = NonNullable<Awaited<ReturnType<typeof updateCurrentUser>>>;
export type UpdateCurrentUserMutationBody = UpdateUser;
export type UpdateCurrentUserMutationError = ErrorType<void>;

export const useUpdateCurrentUser = <TError = ErrorType<void>, TContext = unknown>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof updateCurrentUser>>,
      TError,
      { data: UpdateUser },
      TContext
    >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient,
): UseMutationResult<Awaited<ReturnType<typeof updateCurrentUser>>, TError, { data: UpdateUser }, TContext> => {
  const mutationOptions = getUpdateCurrentUserMutationOptions(options);

  return useMutation(mutationOptions, queryClient);
};

export const getCurrentUser = (options?: SecondParameter<typeof customInstance>, signal?: AbortSignal) => {
  return customInstance<User>({ url: `/users`, method: "GET", signal }, options);
};

export const getGetCurrentUserQueryKey = () => {
  return [`/users`] as const;
};

export const getGetCurrentUserQueryOptions = <
  TData = Awaited<ReturnType<typeof getCurrentUser>>,
  TError = ErrorType<unknown>,
>(options?: {
  query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getCurrentUser>>, TError, TData>>;
  request?: SecondParameter<typeof customInstance>;
}) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getGetCurrentUserQueryKey();

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getCurrentUser>>> = ({ signal }) =>
    getCurrentUser(requestOptions, signal);

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof getCurrentUser>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData> };
};

export type GetCurrentUserQueryResult = NonNullable<Awaited<ReturnType<typeof getCurrentUser>>>;
export type GetCurrentUserQueryError = ErrorType<unknown>;

export function useGetCurrentUser<TData = Awaited<ReturnType<typeof getCurrentUser>>, TError = ErrorType<unknown>>(
  options: {
    query: Partial<UseQueryOptions<Awaited<ReturnType<typeof getCurrentUser>>, TError, TData>> &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getCurrentUser>>,
          TError,
          Awaited<ReturnType<typeof getCurrentUser>>
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient,
): DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };
export function useGetCurrentUser<TData = Awaited<ReturnType<typeof getCurrentUser>>, TError = ErrorType<unknown>>(
  options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getCurrentUser>>, TError, TData>> &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getCurrentUser>>,
          TError,
          Awaited<ReturnType<typeof getCurrentUser>>
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };
export function useGetCurrentUser<TData = Awaited<ReturnType<typeof getCurrentUser>>, TError = ErrorType<unknown>>(
  options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getCurrentUser>>, TError, TData>>;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

export function useGetCurrentUser<TData = Awaited<ReturnType<typeof getCurrentUser>>, TError = ErrorType<unknown>>(
  options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getCurrentUser>>, TError, TData>>;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {
  const queryOptions = getGetCurrentUserQueryOptions(options);

  const query = useQuery(queryOptions, queryClient) as UseQueryResult<TData, TError> & {
    queryKey: DataTag<QueryKey, TData>;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}

export const updateCurrentUserPhoto = (updatePhoto: UpdatePhoto, options?: SecondParameter<typeof customInstance>) => {
  const formData = new FormData();
  formData.append(`file`, updatePhoto.file);

  return customInstance<User>(
    { url: `/users/photo`, method: "PATCH", headers: { "Content-Type": "multipart/form-data" }, data: formData },
    options,
  );
};

export const getUpdateCurrentUserPhotoMutationOptions = <TError = ErrorType<unknown>, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof updateCurrentUserPhoto>>,
    TError,
    { data: UpdatePhoto },
    TContext
  >;
  request?: SecondParameter<typeof customInstance>;
}): UseMutationOptions<Awaited<ReturnType<typeof updateCurrentUserPhoto>>, TError, { data: UpdatePhoto }, TContext> => {
  const mutationKey = ["updateCurrentUserPhoto"];
  const { mutation: mutationOptions, request: requestOptions } = options
    ? options.mutation && "mutationKey" in options.mutation && options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, request: undefined };

  const mutationFn: MutationFunction<Awaited<ReturnType<typeof updateCurrentUserPhoto>>, { data: UpdatePhoto }> = (
    props,
  ) => {
    const { data } = props ?? {};

    return updateCurrentUserPhoto(data, requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type UpdateCurrentUserPhotoMutationResult = NonNullable<Awaited<ReturnType<typeof updateCurrentUserPhoto>>>;
export type UpdateCurrentUserPhotoMutationBody = UpdatePhoto;
export type UpdateCurrentUserPhotoMutationError = ErrorType<unknown>;

export const useUpdateCurrentUserPhoto = <TError = ErrorType<unknown>, TContext = unknown>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof updateCurrentUserPhoto>>,
      TError,
      { data: UpdatePhoto },
      TContext
    >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient,
): UseMutationResult<Awaited<ReturnType<typeof updateCurrentUserPhoto>>, TError, { data: UpdatePhoto }, TContext> => {
  const mutationOptions = getUpdateCurrentUserPhotoMutationOptions(options);

  return useMutation(mutationOptions, queryClient);
};

export const userOrganizationMemberships = (
  id: string,
  options?: SecondParameter<typeof customInstance>,
  signal?: AbortSignal,
) => {
  return customInstance<OrganizationMemberWithoutUser[]>(
    { url: `/users/${id}/organizations`, method: "GET", signal },
    options,
  );
};

export const getUserOrganizationMembershipsQueryKey = (id: string) => {
  return [`/users/${id}/organizations`] as const;
};

export const getUserOrganizationMembershipsQueryOptions = <
  TData = Awaited<ReturnType<typeof userOrganizationMemberships>>,
  TError = ErrorType<unknown>,
>(
  id: string,
  options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof userOrganizationMemberships>>, TError, TData>>;
    request?: SecondParameter<typeof customInstance>;
  },
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getUserOrganizationMembershipsQueryKey(id);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof userOrganizationMemberships>>> = ({ signal }) =>
    userOrganizationMemberships(id, requestOptions, signal);

  return { queryKey, queryFn, enabled: !!id, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof userOrganizationMemberships>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData> };
};

export type UserOrganizationMembershipsQueryResult = NonNullable<
  Awaited<ReturnType<typeof userOrganizationMemberships>>
>;
export type UserOrganizationMembershipsQueryError = ErrorType<unknown>;

export function useUserOrganizationMemberships<
  TData = Awaited<ReturnType<typeof userOrganizationMemberships>>,
  TError = ErrorType<unknown>,
>(
  id: string,
  options: {
    query: Partial<UseQueryOptions<Awaited<ReturnType<typeof userOrganizationMemberships>>, TError, TData>> &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof userOrganizationMemberships>>,
          TError,
          Awaited<ReturnType<typeof userOrganizationMemberships>>
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient,
): DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };
export function useUserOrganizationMemberships<
  TData = Awaited<ReturnType<typeof userOrganizationMemberships>>,
  TError = ErrorType<unknown>,
>(
  id: string,
  options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof userOrganizationMemberships>>, TError, TData>> &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof userOrganizationMemberships>>,
          TError,
          Awaited<ReturnType<typeof userOrganizationMemberships>>
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };
export function useUserOrganizationMemberships<
  TData = Awaited<ReturnType<typeof userOrganizationMemberships>>,
  TError = ErrorType<unknown>,
>(
  id: string,
  options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof userOrganizationMemberships>>, TError, TData>>;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

export function useUserOrganizationMemberships<
  TData = Awaited<ReturnType<typeof userOrganizationMemberships>>,
  TError = ErrorType<unknown>,
>(
  id: string,
  options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof userOrganizationMemberships>>, TError, TData>>;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {
  const queryOptions = getUserOrganizationMembershipsQueryOptions(id, options);

  const query = useQuery(queryOptions, queryClient) as UseQueryResult<TData, TError> & {
    queryKey: DataTag<QueryKey, TData>;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}

/**
 * Find all users ordered by `lastName`.
 */
export const getAllUsers = (
  params?: GetAllUsersParams,
  options?: SecondParameter<typeof customInstance>,
  signal?: AbortSignal,
) => {
  return customInstance<GetAllUsers200>({ url: `/users/all`, method: "GET", params, signal }, options);
};

export const getGetAllUsersQueryKey = (params?: GetAllUsersParams) => {
  return [`/users/all`, ...(params ? [params] : [])] as const;
};

export const getGetAllUsersQueryOptions = <
  TData = Awaited<ReturnType<typeof getAllUsers>>,
  TError = ErrorType<unknown>,
>(
  params?: GetAllUsersParams,
  options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getAllUsers>>, TError, TData>>;
    request?: SecondParameter<typeof customInstance>;
  },
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getGetAllUsersQueryKey(params);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getAllUsers>>> = ({ signal }) =>
    getAllUsers(params, requestOptions, signal);

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof getAllUsers>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData> };
};

export type GetAllUsersQueryResult = NonNullable<Awaited<ReturnType<typeof getAllUsers>>>;
export type GetAllUsersQueryError = ErrorType<unknown>;

export function useGetAllUsers<TData = Awaited<ReturnType<typeof getAllUsers>>, TError = ErrorType<unknown>>(
  params: undefined | GetAllUsersParams,
  options: {
    query: Partial<UseQueryOptions<Awaited<ReturnType<typeof getAllUsers>>, TError, TData>> &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getAllUsers>>,
          TError,
          Awaited<ReturnType<typeof getAllUsers>>
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient,
): DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };
export function useGetAllUsers<TData = Awaited<ReturnType<typeof getAllUsers>>, TError = ErrorType<unknown>>(
  params?: GetAllUsersParams,
  options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getAllUsers>>, TError, TData>> &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getAllUsers>>,
          TError,
          Awaited<ReturnType<typeof getAllUsers>>
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };
export function useGetAllUsers<TData = Awaited<ReturnType<typeof getAllUsers>>, TError = ErrorType<unknown>>(
  params?: GetAllUsersParams,
  options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getAllUsers>>, TError, TData>>;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

export function useGetAllUsers<TData = Awaited<ReturnType<typeof getAllUsers>>, TError = ErrorType<unknown>>(
  params?: GetAllUsersParams,
  options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getAllUsers>>, TError, TData>>;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {
  const queryOptions = getGetAllUsersQueryOptions(params, options);

  const query = useQuery(queryOptions, queryClient) as UseQueryResult<TData, TError> & {
    queryKey: DataTag<QueryKey, TData>;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}

export const generateSheetUsers = (options?: SecondParameter<typeof customInstance>, signal?: AbortSignal) => {
  return customInstance<GenerateSheetUsers200>({ url: `/users/export/users`, method: "GET", signal }, options);
};

export const getGenerateSheetUsersQueryKey = () => {
  return [`/users/export/users`] as const;
};

export const getGenerateSheetUsersQueryOptions = <
  TData = Awaited<ReturnType<typeof generateSheetUsers>>,
  TError = ErrorType<unknown>,
>(options?: {
  query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof generateSheetUsers>>, TError, TData>>;
  request?: SecondParameter<typeof customInstance>;
}) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getGenerateSheetUsersQueryKey();

  const queryFn: QueryFunction<Awaited<ReturnType<typeof generateSheetUsers>>> = ({ signal }) =>
    generateSheetUsers(requestOptions, signal);

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof generateSheetUsers>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData> };
};

export type GenerateSheetUsersQueryResult = NonNullable<Awaited<ReturnType<typeof generateSheetUsers>>>;
export type GenerateSheetUsersQueryError = ErrorType<unknown>;

export function useGenerateSheetUsers<
  TData = Awaited<ReturnType<typeof generateSheetUsers>>,
  TError = ErrorType<unknown>,
>(
  options: {
    query: Partial<UseQueryOptions<Awaited<ReturnType<typeof generateSheetUsers>>, TError, TData>> &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof generateSheetUsers>>,
          TError,
          Awaited<ReturnType<typeof generateSheetUsers>>
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient,
): DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };
export function useGenerateSheetUsers<
  TData = Awaited<ReturnType<typeof generateSheetUsers>>,
  TError = ErrorType<unknown>,
>(
  options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof generateSheetUsers>>, TError, TData>> &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof generateSheetUsers>>,
          TError,
          Awaited<ReturnType<typeof generateSheetUsers>>
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };
export function useGenerateSheetUsers<
  TData = Awaited<ReturnType<typeof generateSheetUsers>>,
  TError = ErrorType<unknown>,
>(
  options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof generateSheetUsers>>, TError, TData>>;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

export function useGenerateSheetUsers<
  TData = Awaited<ReturnType<typeof generateSheetUsers>>,
  TError = ErrorType<unknown>,
>(
  options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof generateSheetUsers>>, TError, TData>>;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {
  const queryOptions = getGenerateSheetUsersQueryOptions(options);

  const query = useQuery(queryOptions, queryClient) as UseQueryResult<TData, TError> & {
    queryKey: DataTag<QueryKey, TData>;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}

export const resendVerification = (
  resendVerificationBody: string,
  options?: SecondParameter<typeof customInstance>,
  signal?: AbortSignal,
) => {
  return customInstance<void>(
    {
      url: `/users/resend-verification`,
      method: "POST",
      headers: { "Content-Type": "application/json" },
      data: resendVerificationBody,
      signal,
    },
    options,
  );
};

export const getResendVerificationMutationOptions = <TError = ErrorType<unknown>, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<Awaited<ReturnType<typeof resendVerification>>, TError, { data: string }, TContext>;
  request?: SecondParameter<typeof customInstance>;
}): UseMutationOptions<Awaited<ReturnType<typeof resendVerification>>, TError, { data: string }, TContext> => {
  const mutationKey = ["resendVerification"];
  const { mutation: mutationOptions, request: requestOptions } = options
    ? options.mutation && "mutationKey" in options.mutation && options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, request: undefined };

  const mutationFn: MutationFunction<Awaited<ReturnType<typeof resendVerification>>, { data: string }> = (props) => {
    const { data } = props ?? {};

    return resendVerification(data, requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type ResendVerificationMutationResult = NonNullable<Awaited<ReturnType<typeof resendVerification>>>;
export type ResendVerificationMutationBody = string;
export type ResendVerificationMutationError = ErrorType<unknown>;

export const useResendVerification = <TError = ErrorType<unknown>, TContext = unknown>(
  options?: {
    mutation?: UseMutationOptions<Awaited<ReturnType<typeof resendVerification>>, TError, { data: string }, TContext>;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient,
): UseMutationResult<Awaited<ReturnType<typeof resendVerification>>, TError, { data: string }, TContext> => {
  const mutationOptions = getResendVerificationMutationOptions(options);

  return useMutation(mutationOptions, queryClient);
};

export const getPhoto = (id: string, options?: SecondParameter<typeof customInstance>, signal?: AbortSignal) => {
  return customInstance<void>({ url: `/photo/${id}`, method: "GET", signal }, options);
};

export const getGetPhotoQueryKey = (id: string) => {
  return [`/photo/${id}`] as const;
};

export const getGetPhotoQueryOptions = <TData = Awaited<ReturnType<typeof getPhoto>>, TError = ErrorType<void>>(
  id: string,
  options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getPhoto>>, TError, TData>>;
    request?: SecondParameter<typeof customInstance>;
  },
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getGetPhotoQueryKey(id);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getPhoto>>> = ({ signal }) =>
    getPhoto(id, requestOptions, signal);

  return { queryKey, queryFn, enabled: !!id, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof getPhoto>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData> };
};

export type GetPhotoQueryResult = NonNullable<Awaited<ReturnType<typeof getPhoto>>>;
export type GetPhotoQueryError = ErrorType<void>;

export function useGetPhoto<TData = Awaited<ReturnType<typeof getPhoto>>, TError = ErrorType<void>>(
  id: string,
  options: {
    query: Partial<UseQueryOptions<Awaited<ReturnType<typeof getPhoto>>, TError, TData>> &
      Pick<
        DefinedInitialDataOptions<Awaited<ReturnType<typeof getPhoto>>, TError, Awaited<ReturnType<typeof getPhoto>>>,
        "initialData"
      >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient,
): DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };
export function useGetPhoto<TData = Awaited<ReturnType<typeof getPhoto>>, TError = ErrorType<void>>(
  id: string,
  options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getPhoto>>, TError, TData>> &
      Pick<
        UndefinedInitialDataOptions<Awaited<ReturnType<typeof getPhoto>>, TError, Awaited<ReturnType<typeof getPhoto>>>,
        "initialData"
      >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };
export function useGetPhoto<TData = Awaited<ReturnType<typeof getPhoto>>, TError = ErrorType<void>>(
  id: string,
  options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getPhoto>>, TError, TData>>;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

export function useGetPhoto<TData = Awaited<ReturnType<typeof getPhoto>>, TError = ErrorType<void>>(
  id: string,
  options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getPhoto>>, TError, TData>>;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {
  const queryOptions = getGetPhotoQueryOptions(id, options);

  const query = useQuery(queryOptions, queryClient) as UseQueryResult<TData, TError> & {
    queryKey: DataTag<QueryKey, TData>;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}

export const allOrganizations = (options?: SecondParameter<typeof customInstance>, signal?: AbortSignal) => {
  return customInstance<Organization[]>({ url: `/organizations`, method: "GET", signal }, options);
};

export const getAllOrganizationsQueryKey = () => {
  return [`/organizations`] as const;
};

export const getAllOrganizationsQueryOptions = <
  TData = Awaited<ReturnType<typeof allOrganizations>>,
  TError = ErrorType<unknown>,
>(options?: {
  query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof allOrganizations>>, TError, TData>>;
  request?: SecondParameter<typeof customInstance>;
}) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getAllOrganizationsQueryKey();

  const queryFn: QueryFunction<Awaited<ReturnType<typeof allOrganizations>>> = ({ signal }) =>
    allOrganizations(requestOptions, signal);

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof allOrganizations>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData> };
};

export type AllOrganizationsQueryResult = NonNullable<Awaited<ReturnType<typeof allOrganizations>>>;
export type AllOrganizationsQueryError = ErrorType<unknown>;

export function useAllOrganizations<TData = Awaited<ReturnType<typeof allOrganizations>>, TError = ErrorType<unknown>>(
  options: {
    query: Partial<UseQueryOptions<Awaited<ReturnType<typeof allOrganizations>>, TError, TData>> &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof allOrganizations>>,
          TError,
          Awaited<ReturnType<typeof allOrganizations>>
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient,
): DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };
export function useAllOrganizations<TData = Awaited<ReturnType<typeof allOrganizations>>, TError = ErrorType<unknown>>(
  options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof allOrganizations>>, TError, TData>> &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof allOrganizations>>,
          TError,
          Awaited<ReturnType<typeof allOrganizations>>
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };
export function useAllOrganizations<TData = Awaited<ReturnType<typeof allOrganizations>>, TError = ErrorType<unknown>>(
  options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof allOrganizations>>, TError, TData>>;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

export function useAllOrganizations<TData = Awaited<ReturnType<typeof allOrganizations>>, TError = ErrorType<unknown>>(
  options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof allOrganizations>>, TError, TData>>;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {
  const queryOptions = getAllOrganizationsQueryOptions(options);

  const query = useQuery(queryOptions, queryClient) as UseQueryResult<TData, TError> & {
    queryKey: DataTag<QueryKey, TData>;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}

export const createOrganization = (
  createOrganization: CreateOrganization,
  options?: SecondParameter<typeof customInstance>,
  signal?: AbortSignal,
) => {
  return customInstance<CreateOrganization201>(
    {
      url: `/organizations`,
      method: "POST",
      headers: { "Content-Type": "application/json" },
      data: createOrganization,
      signal,
    },
    options,
  );
};

export const getCreateOrganizationMutationOptions = <TError = ErrorType<unknown>, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof createOrganization>>,
    TError,
    { data: CreateOrganization },
    TContext
  >;
  request?: SecondParameter<typeof customInstance>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof createOrganization>>,
  TError,
  { data: CreateOrganization },
  TContext
> => {
  const mutationKey = ["createOrganization"];
  const { mutation: mutationOptions, request: requestOptions } = options
    ? options.mutation && "mutationKey" in options.mutation && options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, request: undefined };

  const mutationFn: MutationFunction<Awaited<ReturnType<typeof createOrganization>>, { data: CreateOrganization }> = (
    props,
  ) => {
    const { data } = props ?? {};

    return createOrganization(data, requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type CreateOrganizationMutationResult = NonNullable<Awaited<ReturnType<typeof createOrganization>>>;
export type CreateOrganizationMutationBody = CreateOrganization;
export type CreateOrganizationMutationError = ErrorType<unknown>;

export const useCreateOrganization = <TError = ErrorType<unknown>, TContext = unknown>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof createOrganization>>,
      TError,
      { data: CreateOrganization },
      TContext
    >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient,
): UseMutationResult<
  Awaited<ReturnType<typeof createOrganization>>,
  TError,
  { data: CreateOrganization },
  TContext
> => {
  const mutationOptions = getCreateOrganizationMutationOptions(options);

  return useMutation(mutationOptions, queryClient);
};

export const getOrganisationById = (
  id: string,
  options?: SecondParameter<typeof customInstance>,
  signal?: AbortSignal,
) => {
  return customInstance<Organization>({ url: `/organizations/${id}`, method: "GET", signal }, options);
};

export const getGetOrganisationByIdQueryKey = (id: string) => {
  return [`/organizations/${id}`] as const;
};

export const getGetOrganisationByIdQueryOptions = <
  TData = Awaited<ReturnType<typeof getOrganisationById>>,
  TError = ErrorType<unknown>,
>(
  id: string,
  options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrganisationById>>, TError, TData>>;
    request?: SecondParameter<typeof customInstance>;
  },
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getGetOrganisationByIdQueryKey(id);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getOrganisationById>>> = ({ signal }) =>
    getOrganisationById(id, requestOptions, signal);

  return { queryKey, queryFn, enabled: !!id, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof getOrganisationById>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData> };
};

export type GetOrganisationByIdQueryResult = NonNullable<Awaited<ReturnType<typeof getOrganisationById>>>;
export type GetOrganisationByIdQueryError = ErrorType<unknown>;

export function useGetOrganisationById<
  TData = Awaited<ReturnType<typeof getOrganisationById>>,
  TError = ErrorType<unknown>,
>(
  id: string,
  options: {
    query: Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrganisationById>>, TError, TData>> &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getOrganisationById>>,
          TError,
          Awaited<ReturnType<typeof getOrganisationById>>
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient,
): DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };
export function useGetOrganisationById<
  TData = Awaited<ReturnType<typeof getOrganisationById>>,
  TError = ErrorType<unknown>,
>(
  id: string,
  options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrganisationById>>, TError, TData>> &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getOrganisationById>>,
          TError,
          Awaited<ReturnType<typeof getOrganisationById>>
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };
export function useGetOrganisationById<
  TData = Awaited<ReturnType<typeof getOrganisationById>>,
  TError = ErrorType<unknown>,
>(
  id: string,
  options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrganisationById>>, TError, TData>>;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

export function useGetOrganisationById<
  TData = Awaited<ReturnType<typeof getOrganisationById>>,
  TError = ErrorType<unknown>,
>(
  id: string,
  options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrganisationById>>, TError, TData>>;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {
  const queryOptions = getGetOrganisationByIdQueryOptions(id, options);

  const query = useQuery(queryOptions, queryClient) as UseQueryResult<TData, TError> & {
    queryKey: DataTag<QueryKey, TData>;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}

export const updateOrganization = (
  id: string,
  updateOrganization: UpdateOrganization,
  options?: SecondParameter<typeof customInstance>,
  signal?: AbortSignal,
) => {
  return customInstance<UpdateOrganization201>(
    {
      url: `/organizations/${id}`,
      method: "POST",
      headers: { "Content-Type": "application/json" },
      data: updateOrganization,
      signal,
    },
    options,
  );
};

export const getUpdateOrganizationMutationOptions = <TError = ErrorType<unknown>, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof updateOrganization>>,
    TError,
    { id: string; data: UpdateOrganization },
    TContext
  >;
  request?: SecondParameter<typeof customInstance>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof updateOrganization>>,
  TError,
  { id: string; data: UpdateOrganization },
  TContext
> => {
  const mutationKey = ["updateOrganization"];
  const { mutation: mutationOptions, request: requestOptions } = options
    ? options.mutation && "mutationKey" in options.mutation && options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, request: undefined };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof updateOrganization>>,
    { id: string; data: UpdateOrganization }
  > = (props) => {
    const { id, data } = props ?? {};

    return updateOrganization(id, data, requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type UpdateOrganizationMutationResult = NonNullable<Awaited<ReturnType<typeof updateOrganization>>>;
export type UpdateOrganizationMutationBody = UpdateOrganization;
export type UpdateOrganizationMutationError = ErrorType<unknown>;

export const useUpdateOrganization = <TError = ErrorType<unknown>, TContext = unknown>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof updateOrganization>>,
      TError,
      { id: string; data: UpdateOrganization },
      TContext
    >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient,
): UseMutationResult<
  Awaited<ReturnType<typeof updateOrganization>>,
  TError,
  { id: string; data: UpdateOrganization },
  TContext
> => {
  const mutationOptions = getUpdateOrganizationMutationOptions(options);

  return useMutation(mutationOptions, queryClient);
};

export const transferManager = (
  organisationId: string,
  userId: string,
  options?: SecondParameter<typeof customInstance>,
  signal?: AbortSignal,
) => {
  return customInstance<TransferManager201>(
    { url: `/organizations/${organisationId}/${userId}`, method: "POST", signal },
    options,
  );
};

export const getTransferManagerMutationOptions = <TError = ErrorType<unknown>, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof transferManager>>,
    TError,
    { organisationId: string; userId: string },
    TContext
  >;
  request?: SecondParameter<typeof customInstance>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof transferManager>>,
  TError,
  { organisationId: string; userId: string },
  TContext
> => {
  const mutationKey = ["transferManager"];
  const { mutation: mutationOptions, request: requestOptions } = options
    ? options.mutation && "mutationKey" in options.mutation && options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, request: undefined };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof transferManager>>,
    { organisationId: string; userId: string }
  > = (props) => {
    const { organisationId, userId } = props ?? {};

    return transferManager(organisationId, userId, requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type TransferManagerMutationResult = NonNullable<Awaited<ReturnType<typeof transferManager>>>;

export type TransferManagerMutationError = ErrorType<unknown>;

export const useTransferManager = <TError = ErrorType<unknown>, TContext = unknown>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof transferManager>>,
      TError,
      { organisationId: string; userId: string },
      TContext
    >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient,
): UseMutationResult<
  Awaited<ReturnType<typeof transferManager>>,
  TError,
  { organisationId: string; userId: string },
  TContext
> => {
  const mutationOptions = getTransferManagerMutationOptions(options);

  return useMutation(mutationOptions, queryClient);
};

export const organizationMembers = (
  id: string,
  params?: OrganizationMembersParams,
  options?: SecondParameter<typeof customInstance>,
  signal?: AbortSignal,
) => {
  return customInstance<OrganizationMembers200>(
    { url: `/organization/${id}/members`, method: "GET", params, signal },
    options,
  );
};

export const getOrganizationMembersQueryKey = (id: string, params?: OrganizationMembersParams) => {
  return [`/organization/${id}/members`, ...(params ? [params] : [])] as const;
};

export const getOrganizationMembersQueryOptions = <
  TData = Awaited<ReturnType<typeof organizationMembers>>,
  TError = ErrorType<unknown>,
>(
  id: string,
  params?: OrganizationMembersParams,
  options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof organizationMembers>>, TError, TData>>;
    request?: SecondParameter<typeof customInstance>;
  },
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getOrganizationMembersQueryKey(id, params);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof organizationMembers>>> = ({ signal }) =>
    organizationMembers(id, params, requestOptions, signal);

  return { queryKey, queryFn, enabled: !!id, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof organizationMembers>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData> };
};

export type OrganizationMembersQueryResult = NonNullable<Awaited<ReturnType<typeof organizationMembers>>>;
export type OrganizationMembersQueryError = ErrorType<unknown>;

export function useOrganizationMembers<
  TData = Awaited<ReturnType<typeof organizationMembers>>,
  TError = ErrorType<unknown>,
>(
  id: string,
  params: undefined | OrganizationMembersParams,
  options: {
    query: Partial<UseQueryOptions<Awaited<ReturnType<typeof organizationMembers>>, TError, TData>> &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof organizationMembers>>,
          TError,
          Awaited<ReturnType<typeof organizationMembers>>
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient,
): DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };
export function useOrganizationMembers<
  TData = Awaited<ReturnType<typeof organizationMembers>>,
  TError = ErrorType<unknown>,
>(
  id: string,
  params?: OrganizationMembersParams,
  options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof organizationMembers>>, TError, TData>> &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof organizationMembers>>,
          TError,
          Awaited<ReturnType<typeof organizationMembers>>
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };
export function useOrganizationMembers<
  TData = Awaited<ReturnType<typeof organizationMembers>>,
  TError = ErrorType<unknown>,
>(
  id: string,
  params?: OrganizationMembersParams,
  options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof organizationMembers>>, TError, TData>>;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

export function useOrganizationMembers<
  TData = Awaited<ReturnType<typeof organizationMembers>>,
  TError = ErrorType<unknown>,
>(
  id: string,
  params?: OrganizationMembersParams,
  options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof organizationMembers>>, TError, TData>>;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {
  const queryOptions = getOrganizationMembersQueryOptions(id, params, options);

  const query = useQuery(queryOptions, queryClient) as UseQueryResult<TData, TError> & {
    queryKey: DataTag<QueryKey, TData>;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}

/**
 * Add members to organization
 */
export const addOrganizationMembers = (
  id: string,
  addOrganizationMembers: AddOrganizationMembers,
  options?: SecondParameter<typeof customInstance>,
  signal?: AbortSignal,
) => {
  return customInstance<OrganizationMember[]>(
    {
      url: `/organization/${id}/members`,
      method: "POST",
      headers: { "Content-Type": "application/json" },
      data: addOrganizationMembers,
      signal,
    },
    options,
  );
};

export const getAddOrganizationMembersMutationOptions = <TError = ErrorType<unknown>, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof addOrganizationMembers>>,
    TError,
    { id: string; data: AddOrganizationMembers },
    TContext
  >;
  request?: SecondParameter<typeof customInstance>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof addOrganizationMembers>>,
  TError,
  { id: string; data: AddOrganizationMembers },
  TContext
> => {
  const mutationKey = ["addOrganizationMembers"];
  const { mutation: mutationOptions, request: requestOptions } = options
    ? options.mutation && "mutationKey" in options.mutation && options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, request: undefined };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof addOrganizationMembers>>,
    { id: string; data: AddOrganizationMembers }
  > = (props) => {
    const { id, data } = props ?? {};

    return addOrganizationMembers(id, data, requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type AddOrganizationMembersMutationResult = NonNullable<Awaited<ReturnType<typeof addOrganizationMembers>>>;
export type AddOrganizationMembersMutationBody = AddOrganizationMembers;
export type AddOrganizationMembersMutationError = ErrorType<unknown>;

export const useAddOrganizationMembers = <TError = ErrorType<unknown>, TContext = unknown>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof addOrganizationMembers>>,
      TError,
      { id: string; data: AddOrganizationMembers },
      TContext
    >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient,
): UseMutationResult<
  Awaited<ReturnType<typeof addOrganizationMembers>>,
  TError,
  { id: string; data: AddOrganizationMembers },
  TContext
> => {
  const mutationOptions = getAddOrganizationMembersMutationOptions(options);

  return useMutation(mutationOptions, queryClient);
};

/**
 * Delete members from organization (`member.id` not `user.id`)
 */
export const deleteOrganizationMembers = (
  id: string,
  memberId: string,
  options?: SecondParameter<typeof customInstance>,
) => {
  return customInstance<void>({ url: `/organization/${id}/members/${memberId}`, method: "DELETE" }, options);
};

export const getDeleteOrganizationMembersMutationOptions = <TError = ErrorType<unknown>, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof deleteOrganizationMembers>>,
    TError,
    { id: string; memberId: string },
    TContext
  >;
  request?: SecondParameter<typeof customInstance>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof deleteOrganizationMembers>>,
  TError,
  { id: string; memberId: string },
  TContext
> => {
  const mutationKey = ["deleteOrganizationMembers"];
  const { mutation: mutationOptions, request: requestOptions } = options
    ? options.mutation && "mutationKey" in options.mutation && options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, request: undefined };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof deleteOrganizationMembers>>,
    { id: string; memberId: string }
  > = (props) => {
    const { id, memberId } = props ?? {};

    return deleteOrganizationMembers(id, memberId, requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type DeleteOrganizationMembersMutationResult = NonNullable<
  Awaited<ReturnType<typeof deleteOrganizationMembers>>
>;

export type DeleteOrganizationMembersMutationError = ErrorType<unknown>;

export const useDeleteOrganizationMembers = <TError = ErrorType<unknown>, TContext = unknown>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof deleteOrganizationMembers>>,
      TError,
      { id: string; memberId: string },
      TContext
    >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient,
): UseMutationResult<
  Awaited<ReturnType<typeof deleteOrganizationMembers>>,
  TError,
  { id: string; memberId: string },
  TContext
> => {
  const mutationOptions = getDeleteOrganizationMembersMutationOptions(options);

  return useMutation(mutationOptions, queryClient);
};

/**
 * Get all signed-in user applications

For filtering look at {@link EventsController}
 */
export const getUserApplications = (
  params?: GetUserApplicationsParams,
  options?: SecondParameter<typeof customInstance>,
  signal?: AbortSignal,
) => {
  return customInstance<GetUserApplications200>(
    { url: `/events/applications`, method: "GET", params, signal },
    options,
  );
};

export const getGetUserApplicationsQueryKey = (params?: GetUserApplicationsParams) => {
  return [`/events/applications`, ...(params ? [params] : [])] as const;
};

export const getGetUserApplicationsQueryOptions = <
  TData = Awaited<ReturnType<typeof getUserApplications>>,
  TError = ErrorType<unknown>,
>(
  params?: GetUserApplicationsParams,
  options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getUserApplications>>, TError, TData>>;
    request?: SecondParameter<typeof customInstance>;
  },
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getGetUserApplicationsQueryKey(params);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getUserApplications>>> = ({ signal }) =>
    getUserApplications(params, requestOptions, signal);

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof getUserApplications>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData> };
};

export type GetUserApplicationsQueryResult = NonNullable<Awaited<ReturnType<typeof getUserApplications>>>;
export type GetUserApplicationsQueryError = ErrorType<unknown>;

export function useGetUserApplications<
  TData = Awaited<ReturnType<typeof getUserApplications>>,
  TError = ErrorType<unknown>,
>(
  params: undefined | GetUserApplicationsParams,
  options: {
    query: Partial<UseQueryOptions<Awaited<ReturnType<typeof getUserApplications>>, TError, TData>> &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getUserApplications>>,
          TError,
          Awaited<ReturnType<typeof getUserApplications>>
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient,
): DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };
export function useGetUserApplications<
  TData = Awaited<ReturnType<typeof getUserApplications>>,
  TError = ErrorType<unknown>,
>(
  params?: GetUserApplicationsParams,
  options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getUserApplications>>, TError, TData>> &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getUserApplications>>,
          TError,
          Awaited<ReturnType<typeof getUserApplications>>
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };
export function useGetUserApplications<
  TData = Awaited<ReturnType<typeof getUserApplications>>,
  TError = ErrorType<unknown>,
>(
  params?: GetUserApplicationsParams,
  options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getUserApplications>>, TError, TData>>;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

export function useGetUserApplications<
  TData = Awaited<ReturnType<typeof getUserApplications>>,
  TError = ErrorType<unknown>,
>(
  params?: GetUserApplicationsParams,
  options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getUserApplications>>, TError, TData>>;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {
  const queryOptions = getGetUserApplicationsQueryOptions(params, options);

  const query = useQuery(queryOptions, queryClient) as UseQueryResult<TData, TError> & {
    queryKey: DataTag<QueryKey, TData>;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}

/**
 * Gett all event user applications
 */
export const getEventApplications = (
  eventId: number,
  options?: SecondParameter<typeof customInstance>,
  signal?: AbortSignal,
) => {
  return customInstance<EventApplicationDetailedWithApplications[]>(
    { url: `/events/${eventId}/applications`, method: "GET", signal },
    options,
  );
};

export const getGetEventApplicationsQueryKey = (eventId: number) => {
  return [`/events/${eventId}/applications`] as const;
};

export const getGetEventApplicationsQueryOptions = <
  TData = Awaited<ReturnType<typeof getEventApplications>>,
  TError = ErrorType<unknown>,
>(
  eventId: number,
  options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getEventApplications>>, TError, TData>>;
    request?: SecondParameter<typeof customInstance>;
  },
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getGetEventApplicationsQueryKey(eventId);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getEventApplications>>> = ({ signal }) =>
    getEventApplications(eventId, requestOptions, signal);

  return { queryKey, queryFn, enabled: !!eventId, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof getEventApplications>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData> };
};

export type GetEventApplicationsQueryResult = NonNullable<Awaited<ReturnType<typeof getEventApplications>>>;
export type GetEventApplicationsQueryError = ErrorType<unknown>;

export function useGetEventApplications<
  TData = Awaited<ReturnType<typeof getEventApplications>>,
  TError = ErrorType<unknown>,
>(
  eventId: number,
  options: {
    query: Partial<UseQueryOptions<Awaited<ReturnType<typeof getEventApplications>>, TError, TData>> &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getEventApplications>>,
          TError,
          Awaited<ReturnType<typeof getEventApplications>>
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient,
): DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };
export function useGetEventApplications<
  TData = Awaited<ReturnType<typeof getEventApplications>>,
  TError = ErrorType<unknown>,
>(
  eventId: number,
  options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getEventApplications>>, TError, TData>> &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getEventApplications>>,
          TError,
          Awaited<ReturnType<typeof getEventApplications>>
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };
export function useGetEventApplications<
  TData = Awaited<ReturnType<typeof getEventApplications>>,
  TError = ErrorType<unknown>,
>(
  eventId: number,
  options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getEventApplications>>, TError, TData>>;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

export function useGetEventApplications<
  TData = Awaited<ReturnType<typeof getEventApplications>>,
  TError = ErrorType<unknown>,
>(
  eventId: number,
  options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getEventApplications>>, TError, TData>>;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {
  const queryOptions = getGetEventApplicationsQueryOptions(eventId, options);

  const query = useQuery(queryOptions, queryClient) as UseQueryResult<TData, TError> & {
    queryKey: DataTag<QueryKey, TData>;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}

/**
 * Create event application
 */
export const createUserApplication = (
  eventId: number,
  createEventApplication: CreateEventApplication,
  options?: SecondParameter<typeof customInstance>,
  signal?: AbortSignal,
) => {
  return customInstance<EventApplicationSimpleWithApplications>(
    {
      url: `/events/${eventId}/applications`,
      method: "POST",
      headers: { "Content-Type": "application/json" },
      data: createEventApplication,
      signal,
    },
    options,
  );
};

export const getCreateUserApplicationMutationOptions = <TError = ErrorType<void>, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof createUserApplication>>,
    TError,
    { eventId: number; data: CreateEventApplication },
    TContext
  >;
  request?: SecondParameter<typeof customInstance>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof createUserApplication>>,
  TError,
  { eventId: number; data: CreateEventApplication },
  TContext
> => {
  const mutationKey = ["createUserApplication"];
  const { mutation: mutationOptions, request: requestOptions } = options
    ? options.mutation && "mutationKey" in options.mutation && options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, request: undefined };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof createUserApplication>>,
    { eventId: number; data: CreateEventApplication }
  > = (props) => {
    const { eventId, data } = props ?? {};

    return createUserApplication(eventId, data, requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type CreateUserApplicationMutationResult = NonNullable<Awaited<ReturnType<typeof createUserApplication>>>;
export type CreateUserApplicationMutationBody = CreateEventApplication;
export type CreateUserApplicationMutationError = ErrorType<void>;

export const useCreateUserApplication = <TError = ErrorType<void>, TContext = unknown>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof createUserApplication>>,
      TError,
      { eventId: number; data: CreateEventApplication },
      TContext
    >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient,
): UseMutationResult<
  Awaited<ReturnType<typeof createUserApplication>>,
  TError,
  { eventId: number; data: CreateEventApplication },
  TContext
> => {
  const mutationOptions = getCreateUserApplicationMutationOptions(options);

  return useMutation(mutationOptions, queryClient);
};

/**
 * Update event application
 */
export const updateEventApplication = (
  id: number,
  updateEventApplication: UpdateEventApplication,
  options?: SecondParameter<typeof customInstance>,
) => {
  return customInstance<EventApplicationSimpleWithApplications>(
    {
      url: `/events/application/${id}`,
      method: "PATCH",
      headers: { "Content-Type": "application/json" },
      data: updateEventApplication,
    },
    options,
  );
};

export const getUpdateEventApplicationMutationOptions = <TError = ErrorType<unknown>, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof updateEventApplication>>,
    TError,
    { id: number; data: UpdateEventApplication },
    TContext
  >;
  request?: SecondParameter<typeof customInstance>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof updateEventApplication>>,
  TError,
  { id: number; data: UpdateEventApplication },
  TContext
> => {
  const mutationKey = ["updateEventApplication"];
  const { mutation: mutationOptions, request: requestOptions } = options
    ? options.mutation && "mutationKey" in options.mutation && options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, request: undefined };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof updateEventApplication>>,
    { id: number; data: UpdateEventApplication }
  > = (props) => {
    const { id, data } = props ?? {};

    return updateEventApplication(id, data, requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type UpdateEventApplicationMutationResult = NonNullable<Awaited<ReturnType<typeof updateEventApplication>>>;
export type UpdateEventApplicationMutationBody = UpdateEventApplication;
export type UpdateEventApplicationMutationError = ErrorType<unknown>;

export const useUpdateEventApplication = <TError = ErrorType<unknown>, TContext = unknown>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof updateEventApplication>>,
      TError,
      { id: number; data: UpdateEventApplication },
      TContext
    >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient,
): UseMutationResult<
  Awaited<ReturnType<typeof updateEventApplication>>,
  TError,
  { id: number; data: UpdateEventApplication },
  TContext
> => {
  const mutationOptions = getUpdateEventApplicationMutationOptions(options);

  return useMutation(mutationOptions, queryClient);
};

/**
 * Delete event application by ID
 */
export const deleteEventApplication = (id: number, options?: SecondParameter<typeof customInstance>) => {
  return customInstance<void>({ url: `/events/application/${id}`, method: "DELETE" }, options);
};

export const getDeleteEventApplicationMutationOptions = <TError = ErrorType<void>, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<Awaited<ReturnType<typeof deleteEventApplication>>, TError, { id: number }, TContext>;
  request?: SecondParameter<typeof customInstance>;
}): UseMutationOptions<Awaited<ReturnType<typeof deleteEventApplication>>, TError, { id: number }, TContext> => {
  const mutationKey = ["deleteEventApplication"];
  const { mutation: mutationOptions, request: requestOptions } = options
    ? options.mutation && "mutationKey" in options.mutation && options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, request: undefined };

  const mutationFn: MutationFunction<Awaited<ReturnType<typeof deleteEventApplication>>, { id: number }> = (props) => {
    const { id } = props ?? {};

    return deleteEventApplication(id, requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type DeleteEventApplicationMutationResult = NonNullable<Awaited<ReturnType<typeof deleteEventApplication>>>;

export type DeleteEventApplicationMutationError = ErrorType<void>;

export const useDeleteEventApplication = <TError = ErrorType<void>, TContext = unknown>(
  options?: {
    mutation?: UseMutationOptions<Awaited<ReturnType<typeof deleteEventApplication>>, TError, { id: number }, TContext>;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient,
): UseMutationResult<Awaited<ReturnType<typeof deleteEventApplication>>, TError, { id: number }, TContext> => {
  const mutationOptions = getDeleteEventApplicationMutationOptions(options);

  return useMutation(mutationOptions, queryClient);
};

/**
 * Get event application for user for event
 */
export const getUserApplicationForEvent = (
  eventId: number,
  userId: string,
  options?: SecondParameter<typeof customInstance>,
  signal?: AbortSignal,
) => {
  return customInstance<EventApplicationSimpleWithApplications>(
    { url: `/events/${eventId}/applications/user/${userId}`, method: "GET", signal },
    options,
  );
};

export const getGetUserApplicationForEventQueryKey = (eventId: number, userId: string) => {
  return [`/events/${eventId}/applications/user/${userId}`] as const;
};

export const getGetUserApplicationForEventQueryOptions = <
  TData = Awaited<ReturnType<typeof getUserApplicationForEvent>>,
  TError = ErrorType<void>,
>(
  eventId: number,
  userId: string,
  options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getUserApplicationForEvent>>, TError, TData>>;
    request?: SecondParameter<typeof customInstance>;
  },
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getGetUserApplicationForEventQueryKey(eventId, userId);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getUserApplicationForEvent>>> = ({ signal }) =>
    getUserApplicationForEvent(eventId, userId, requestOptions, signal);

  return { queryKey, queryFn, enabled: !!(eventId && userId), ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof getUserApplicationForEvent>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData> };
};

export type GetUserApplicationForEventQueryResult = NonNullable<Awaited<ReturnType<typeof getUserApplicationForEvent>>>;
export type GetUserApplicationForEventQueryError = ErrorType<void>;

export function useGetUserApplicationForEvent<
  TData = Awaited<ReturnType<typeof getUserApplicationForEvent>>,
  TError = ErrorType<void>,
>(
  eventId: number,
  userId: string,
  options: {
    query: Partial<UseQueryOptions<Awaited<ReturnType<typeof getUserApplicationForEvent>>, TError, TData>> &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getUserApplicationForEvent>>,
          TError,
          Awaited<ReturnType<typeof getUserApplicationForEvent>>
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient,
): DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };
export function useGetUserApplicationForEvent<
  TData = Awaited<ReturnType<typeof getUserApplicationForEvent>>,
  TError = ErrorType<void>,
>(
  eventId: number,
  userId: string,
  options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getUserApplicationForEvent>>, TError, TData>> &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getUserApplicationForEvent>>,
          TError,
          Awaited<ReturnType<typeof getUserApplicationForEvent>>
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };
export function useGetUserApplicationForEvent<
  TData = Awaited<ReturnType<typeof getUserApplicationForEvent>>,
  TError = ErrorType<void>,
>(
  eventId: number,
  userId: string,
  options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getUserApplicationForEvent>>, TError, TData>>;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

export function useGetUserApplicationForEvent<
  TData = Awaited<ReturnType<typeof getUserApplicationForEvent>>,
  TError = ErrorType<void>,
>(
  eventId: number,
  userId: string,
  options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getUserApplicationForEvent>>, TError, TData>>;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {
  const queryOptions = getGetUserApplicationForEventQueryOptions(eventId, userId, options);

  const query = useQuery(queryOptions, queryClient) as UseQueryResult<TData, TError> & {
    queryKey: DataTag<QueryKey, TData>;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}

export const generateSheetEventApplication = (
  eventId: number,
  options?: SecondParameter<typeof customInstance>,
  signal?: AbortSignal,
) => {
  return customInstance<GenerateSheetEventApplication200>(
    { url: `/events/export/${eventId}/applications`, method: "GET", signal },
    options,
  );
};

export const getGenerateSheetEventApplicationQueryKey = (eventId: number) => {
  return [`/events/export/${eventId}/applications`] as const;
};

export const getGenerateSheetEventApplicationQueryOptions = <
  TData = Awaited<ReturnType<typeof generateSheetEventApplication>>,
  TError = ErrorType<unknown>,
>(
  eventId: number,
  options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof generateSheetEventApplication>>, TError, TData>>;
    request?: SecondParameter<typeof customInstance>;
  },
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getGenerateSheetEventApplicationQueryKey(eventId);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof generateSheetEventApplication>>> = ({ signal }) =>
    generateSheetEventApplication(eventId, requestOptions, signal);

  return { queryKey, queryFn, enabled: !!eventId, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof generateSheetEventApplication>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData> };
};

export type GenerateSheetEventApplicationQueryResult = NonNullable<
  Awaited<ReturnType<typeof generateSheetEventApplication>>
>;
export type GenerateSheetEventApplicationQueryError = ErrorType<unknown>;

export function useGenerateSheetEventApplication<
  TData = Awaited<ReturnType<typeof generateSheetEventApplication>>,
  TError = ErrorType<unknown>,
>(
  eventId: number,
  options: {
    query: Partial<UseQueryOptions<Awaited<ReturnType<typeof generateSheetEventApplication>>, TError, TData>> &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof generateSheetEventApplication>>,
          TError,
          Awaited<ReturnType<typeof generateSheetEventApplication>>
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient,
): DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };
export function useGenerateSheetEventApplication<
  TData = Awaited<ReturnType<typeof generateSheetEventApplication>>,
  TError = ErrorType<unknown>,
>(
  eventId: number,
  options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof generateSheetEventApplication>>, TError, TData>> &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof generateSheetEventApplication>>,
          TError,
          Awaited<ReturnType<typeof generateSheetEventApplication>>
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };
export function useGenerateSheetEventApplication<
  TData = Awaited<ReturnType<typeof generateSheetEventApplication>>,
  TError = ErrorType<unknown>,
>(
  eventId: number,
  options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof generateSheetEventApplication>>, TError, TData>>;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

export function useGenerateSheetEventApplication<
  TData = Awaited<ReturnType<typeof generateSheetEventApplication>>,
  TError = ErrorType<unknown>,
>(
  eventId: number,
  options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof generateSheetEventApplication>>, TError, TData>>;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {
  const queryOptions = getGenerateSheetEventApplicationQueryOptions(eventId, options);

  const query = useQuery(queryOptions, queryClient) as UseQueryResult<TData, TError> & {
    queryKey: DataTag<QueryKey, TData>;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}

/**
 * To filter by `since` use:

`sinceSince`: Events with `since` more than entered value

`toSince`: Events with `since` less than entered value


Examples:
- To filter only future events use `sinceSince` `(new Date().getTime())`
- To filter only past events use `toSince` `(new Date().getTime())`
- To filter only events between two dates use `sinceSince`: `dateA`, `toSince`: `dateB`
 */
export const getEvents = (
  params?: GetEventsParams,
  options?: SecondParameter<typeof customInstance>,
  signal?: AbortSignal,
) => {
  return customInstance<GetEvents200>({ url: `/events`, method: "GET", params, signal }, options);
};

export const getGetEventsQueryKey = (params?: GetEventsParams) => {
  return [`/events`, ...(params ? [params] : [])] as const;
};

export const getGetEventsQueryOptions = <TData = Awaited<ReturnType<typeof getEvents>>, TError = ErrorType<unknown>>(
  params?: GetEventsParams,
  options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getEvents>>, TError, TData>>;
    request?: SecondParameter<typeof customInstance>;
  },
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getGetEventsQueryKey(params);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getEvents>>> = ({ signal }) =>
    getEvents(params, requestOptions, signal);

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof getEvents>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData> };
};

export type GetEventsQueryResult = NonNullable<Awaited<ReturnType<typeof getEvents>>>;
export type GetEventsQueryError = ErrorType<unknown>;

export function useGetEvents<TData = Awaited<ReturnType<typeof getEvents>>, TError = ErrorType<unknown>>(
  params: undefined | GetEventsParams,
  options: {
    query: Partial<UseQueryOptions<Awaited<ReturnType<typeof getEvents>>, TError, TData>> &
      Pick<
        DefinedInitialDataOptions<Awaited<ReturnType<typeof getEvents>>, TError, Awaited<ReturnType<typeof getEvents>>>,
        "initialData"
      >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient,
): DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };
export function useGetEvents<TData = Awaited<ReturnType<typeof getEvents>>, TError = ErrorType<unknown>>(
  params?: GetEventsParams,
  options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getEvents>>, TError, TData>> &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getEvents>>,
          TError,
          Awaited<ReturnType<typeof getEvents>>
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };
export function useGetEvents<TData = Awaited<ReturnType<typeof getEvents>>, TError = ErrorType<unknown>>(
  params?: GetEventsParams,
  options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getEvents>>, TError, TData>>;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

export function useGetEvents<TData = Awaited<ReturnType<typeof getEvents>>, TError = ErrorType<unknown>>(
  params?: GetEventsParams,
  options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getEvents>>, TError, TData>>;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {
  const queryOptions = getGetEventsQueryOptions(params, options);

  const query = useQuery(queryOptions, queryClient) as UseQueryResult<TData, TError> & {
    queryKey: DataTag<QueryKey, TData>;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}

/**
 * Create new event

Organization permissions required: `create.event`
 */
export const createEvent = (
  createEvent: CreateEvent,
  options?: SecondParameter<typeof customInstance>,
  signal?: AbortSignal,
) => {
  return customInstance<EventSimple>(
    { url: `/events`, method: "POST", headers: { "Content-Type": "application/json" }, data: createEvent, signal },
    options,
  );
};

export const getCreateEventMutationOptions = <TError = ErrorType<void>, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<Awaited<ReturnType<typeof createEvent>>, TError, { data: CreateEvent }, TContext>;
  request?: SecondParameter<typeof customInstance>;
}): UseMutationOptions<Awaited<ReturnType<typeof createEvent>>, TError, { data: CreateEvent }, TContext> => {
  const mutationKey = ["createEvent"];
  const { mutation: mutationOptions, request: requestOptions } = options
    ? options.mutation && "mutationKey" in options.mutation && options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, request: undefined };

  const mutationFn: MutationFunction<Awaited<ReturnType<typeof createEvent>>, { data: CreateEvent }> = (props) => {
    const { data } = props ?? {};

    return createEvent(data, requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type CreateEventMutationResult = NonNullable<Awaited<ReturnType<typeof createEvent>>>;
export type CreateEventMutationBody = CreateEvent;
export type CreateEventMutationError = ErrorType<void>;

export const useCreateEvent = <TError = ErrorType<void>, TContext = unknown>(
  options?: {
    mutation?: UseMutationOptions<Awaited<ReturnType<typeof createEvent>>, TError, { data: CreateEvent }, TContext>;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient,
): UseMutationResult<Awaited<ReturnType<typeof createEvent>>, TError, { data: CreateEvent }, TContext> => {
  const mutationOptions = getCreateEventMutationOptions(options);

  return useMutation(mutationOptions, queryClient);
};

/**
 * Find event by ID or slug
 */
export const getEvent = (id: number, options?: SecondParameter<typeof customInstance>, signal?: AbortSignal) => {
  return customInstance<EventDetail>({ url: `/events/${id}`, method: "GET", signal }, options);
};

export const getGetEventQueryKey = (id: number) => {
  return [`/events/${id}`] as const;
};

export const getGetEventQueryOptions = <TData = Awaited<ReturnType<typeof getEvent>>, TError = ErrorType<void>>(
  id: number,
  options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getEvent>>, TError, TData>>;
    request?: SecondParameter<typeof customInstance>;
  },
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getGetEventQueryKey(id);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getEvent>>> = ({ signal }) =>
    getEvent(id, requestOptions, signal);

  return { queryKey, queryFn, enabled: !!id, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof getEvent>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData> };
};

export type GetEventQueryResult = NonNullable<Awaited<ReturnType<typeof getEvent>>>;
export type GetEventQueryError = ErrorType<void>;

export function useGetEvent<TData = Awaited<ReturnType<typeof getEvent>>, TError = ErrorType<void>>(
  id: number,
  options: {
    query: Partial<UseQueryOptions<Awaited<ReturnType<typeof getEvent>>, TError, TData>> &
      Pick<
        DefinedInitialDataOptions<Awaited<ReturnType<typeof getEvent>>, TError, Awaited<ReturnType<typeof getEvent>>>,
        "initialData"
      >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient,
): DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };
export function useGetEvent<TData = Awaited<ReturnType<typeof getEvent>>, TError = ErrorType<void>>(
  id: number,
  options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getEvent>>, TError, TData>> &
      Pick<
        UndefinedInitialDataOptions<Awaited<ReturnType<typeof getEvent>>, TError, Awaited<ReturnType<typeof getEvent>>>,
        "initialData"
      >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };
export function useGetEvent<TData = Awaited<ReturnType<typeof getEvent>>, TError = ErrorType<void>>(
  id: number,
  options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getEvent>>, TError, TData>>;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

export function useGetEvent<TData = Awaited<ReturnType<typeof getEvent>>, TError = ErrorType<void>>(
  id: number,
  options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getEvent>>, TError, TData>>;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {
  const queryOptions = getGetEventQueryOptions(id, options);

  const query = useQuery(queryOptions, queryClient) as UseQueryResult<TData, TError> & {
    queryKey: DataTag<QueryKey, TData>;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}

/**
 * Duplicate event by ID
 */
export const duplicateEvent = (id: number, options?: SecondParameter<typeof customInstance>, signal?: AbortSignal) => {
  return customInstance<EventDetail>({ url: `/events/${id}`, method: "POST", signal }, options);
};

export const getDuplicateEventMutationOptions = <TError = ErrorType<unknown>, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<Awaited<ReturnType<typeof duplicateEvent>>, TError, { id: number }, TContext>;
  request?: SecondParameter<typeof customInstance>;
}): UseMutationOptions<Awaited<ReturnType<typeof duplicateEvent>>, TError, { id: number }, TContext> => {
  const mutationKey = ["duplicateEvent"];
  const { mutation: mutationOptions, request: requestOptions } = options
    ? options.mutation && "mutationKey" in options.mutation && options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, request: undefined };

  const mutationFn: MutationFunction<Awaited<ReturnType<typeof duplicateEvent>>, { id: number }> = (props) => {
    const { id } = props ?? {};

    return duplicateEvent(id, requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type DuplicateEventMutationResult = NonNullable<Awaited<ReturnType<typeof duplicateEvent>>>;

export type DuplicateEventMutationError = ErrorType<unknown>;

export const useDuplicateEvent = <TError = ErrorType<unknown>, TContext = unknown>(
  options?: {
    mutation?: UseMutationOptions<Awaited<ReturnType<typeof duplicateEvent>>, TError, { id: number }, TContext>;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient,
): UseMutationResult<Awaited<ReturnType<typeof duplicateEvent>>, TError, { id: number }, TContext> => {
  const mutationOptions = getDuplicateEventMutationOptions(options);

  return useMutation(mutationOptions, queryClient);
};

export const updateEvent = (
  eventId: number,
  updateEvent: UpdateEvent,
  options?: SecondParameter<typeof customInstance>,
) => {
  return customInstance<EventDetail>(
    { url: `/events/${eventId}`, method: "PATCH", headers: { "Content-Type": "application/json" }, data: updateEvent },
    options,
  );
};

export const getUpdateEventMutationOptions = <TError = ErrorType<void>, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof updateEvent>>,
    TError,
    { eventId: number; data: UpdateEvent },
    TContext
  >;
  request?: SecondParameter<typeof customInstance>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof updateEvent>>,
  TError,
  { eventId: number; data: UpdateEvent },
  TContext
> => {
  const mutationKey = ["updateEvent"];
  const { mutation: mutationOptions, request: requestOptions } = options
    ? options.mutation && "mutationKey" in options.mutation && options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, request: undefined };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof updateEvent>>,
    { eventId: number; data: UpdateEvent }
  > = (props) => {
    const { eventId, data } = props ?? {};

    return updateEvent(eventId, data, requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type UpdateEventMutationResult = NonNullable<Awaited<ReturnType<typeof updateEvent>>>;
export type UpdateEventMutationBody = UpdateEvent;
export type UpdateEventMutationError = ErrorType<void>;

export const useUpdateEvent = <TError = ErrorType<void>, TContext = unknown>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof updateEvent>>,
      TError,
      { eventId: number; data: UpdateEvent },
      TContext
    >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient,
): UseMutationResult<
  Awaited<ReturnType<typeof updateEvent>>,
  TError,
  { eventId: number; data: UpdateEvent },
  TContext
> => {
  const mutationOptions = getUpdateEventMutationOptions(options);

  return useMutation(mutationOptions, queryClient);
};

export const deleteEvent = (eventId: number, options?: SecondParameter<typeof customInstance>) => {
  return customInstance<void>({ url: `/events/${eventId}`, method: "DELETE" }, options);
};

export const getDeleteEventMutationOptions = <TError = ErrorType<void>, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<Awaited<ReturnType<typeof deleteEvent>>, TError, { eventId: number }, TContext>;
  request?: SecondParameter<typeof customInstance>;
}): UseMutationOptions<Awaited<ReturnType<typeof deleteEvent>>, TError, { eventId: number }, TContext> => {
  const mutationKey = ["deleteEvent"];
  const { mutation: mutationOptions, request: requestOptions } = options
    ? options.mutation && "mutationKey" in options.mutation && options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, request: undefined };

  const mutationFn: MutationFunction<Awaited<ReturnType<typeof deleteEvent>>, { eventId: number }> = (props) => {
    const { eventId } = props ?? {};

    return deleteEvent(eventId, requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type DeleteEventMutationResult = NonNullable<Awaited<ReturnType<typeof deleteEvent>>>;

export type DeleteEventMutationError = ErrorType<void>;

export const useDeleteEvent = <TError = ErrorType<void>, TContext = unknown>(
  options?: {
    mutation?: UseMutationOptions<Awaited<ReturnType<typeof deleteEvent>>, TError, { eventId: number }, TContext>;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient,
): UseMutationResult<Awaited<ReturnType<typeof deleteEvent>>, TError, { eventId: number }, TContext> => {
  const mutationOptions = getDeleteEventMutationOptions(options);

  return useMutation(mutationOptions, queryClient);
};

/**
 * Update event photo
Organization permissions required: `create.event`
 */
export const updateEventPhoto = (
  eventId: number,
  updatePhoto: UpdatePhoto,
  options?: SecondParameter<typeof customInstance>,
) => {
  const formData = new FormData();
  formData.append(`file`, updatePhoto.file);

  return customInstance<EventSimpleWithApplications>(
    {
      url: `/events/${eventId}/photo`,
      method: "PATCH",
      headers: { "Content-Type": "multipart/form-data" },
      data: formData,
    },
    options,
  );
};

export const getUpdateEventPhotoMutationOptions = <TError = ErrorType<void>, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof updateEventPhoto>>,
    TError,
    { eventId: number; data: UpdatePhoto },
    TContext
  >;
  request?: SecondParameter<typeof customInstance>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof updateEventPhoto>>,
  TError,
  { eventId: number; data: UpdatePhoto },
  TContext
> => {
  const mutationKey = ["updateEventPhoto"];
  const { mutation: mutationOptions, request: requestOptions } = options
    ? options.mutation && "mutationKey" in options.mutation && options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, request: undefined };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof updateEventPhoto>>,
    { eventId: number; data: UpdatePhoto }
  > = (props) => {
    const { eventId, data } = props ?? {};

    return updateEventPhoto(eventId, data, requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type UpdateEventPhotoMutationResult = NonNullable<Awaited<ReturnType<typeof updateEventPhoto>>>;
export type UpdateEventPhotoMutationBody = UpdatePhoto;
export type UpdateEventPhotoMutationError = ErrorType<void>;

export const useUpdateEventPhoto = <TError = ErrorType<void>, TContext = unknown>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof updateEventPhoto>>,
      TError,
      { eventId: number; data: UpdatePhoto },
      TContext
    >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient,
): UseMutationResult<
  Awaited<ReturnType<typeof updateEventPhoto>>,
  TError,
  { eventId: number; data: UpdatePhoto },
  TContext
> => {
  const mutationOptions = getUpdateEventPhotoMutationOptions(options);

  return useMutation(mutationOptions, queryClient);
};

/**
 * Find event spots for event
 */
export const getEventSpots = (id: number, options?: SecondParameter<typeof customInstance>, signal?: AbortSignal) => {
  return customInstance<EventSpotSimple[]>({ url: `/events/${id}/spots`, method: "GET", signal }, options);
};

export const getGetEventSpotsQueryKey = (id: number) => {
  return [`/events/${id}/spots`] as const;
};

export const getGetEventSpotsQueryOptions = <
  TData = Awaited<ReturnType<typeof getEventSpots>>,
  TError = ErrorType<unknown>,
>(
  id: number,
  options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getEventSpots>>, TError, TData>>;
    request?: SecondParameter<typeof customInstance>;
  },
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getGetEventSpotsQueryKey(id);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getEventSpots>>> = ({ signal }) =>
    getEventSpots(id, requestOptions, signal);

  return { queryKey, queryFn, enabled: !!id, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof getEventSpots>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData> };
};

export type GetEventSpotsQueryResult = NonNullable<Awaited<ReturnType<typeof getEventSpots>>>;
export type GetEventSpotsQueryError = ErrorType<unknown>;

export function useGetEventSpots<TData = Awaited<ReturnType<typeof getEventSpots>>, TError = ErrorType<unknown>>(
  id: number,
  options: {
    query: Partial<UseQueryOptions<Awaited<ReturnType<typeof getEventSpots>>, TError, TData>> &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getEventSpots>>,
          TError,
          Awaited<ReturnType<typeof getEventSpots>>
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient,
): DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };
export function useGetEventSpots<TData = Awaited<ReturnType<typeof getEventSpots>>, TError = ErrorType<unknown>>(
  id: number,
  options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getEventSpots>>, TError, TData>> &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getEventSpots>>,
          TError,
          Awaited<ReturnType<typeof getEventSpots>>
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };
export function useGetEventSpots<TData = Awaited<ReturnType<typeof getEventSpots>>, TError = ErrorType<unknown>>(
  id: number,
  options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getEventSpots>>, TError, TData>>;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

export function useGetEventSpots<TData = Awaited<ReturnType<typeof getEventSpots>>, TError = ErrorType<unknown>>(
  id: number,
  options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getEventSpots>>, TError, TData>>;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {
  const queryOptions = getGetEventSpotsQueryOptions(id, options);

  const query = useQuery(queryOptions, queryClient) as UseQueryResult<TData, TError> & {
    queryKey: DataTag<QueryKey, TData>;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}

/**
 * Create new event spot
 */
export const createEventSpot = (
  id: number,
  createEventSpot: CreateEventSpot,
  options?: SecondParameter<typeof customInstance>,
  signal?: AbortSignal,
) => {
  return customInstance<EventSpotSimple>(
    {
      url: `/events/${id}/spots`,
      method: "POST",
      headers: { "Content-Type": "application/json" },
      data: createEventSpot,
      signal,
    },
    options,
  );
};

export const getCreateEventSpotMutationOptions = <TError = ErrorType<void>, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof createEventSpot>>,
    TError,
    { id: number; data: CreateEventSpot },
    TContext
  >;
  request?: SecondParameter<typeof customInstance>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof createEventSpot>>,
  TError,
  { id: number; data: CreateEventSpot },
  TContext
> => {
  const mutationKey = ["createEventSpot"];
  const { mutation: mutationOptions, request: requestOptions } = options
    ? options.mutation && "mutationKey" in options.mutation && options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, request: undefined };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof createEventSpot>>,
    { id: number; data: CreateEventSpot }
  > = (props) => {
    const { id, data } = props ?? {};

    return createEventSpot(id, data, requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type CreateEventSpotMutationResult = NonNullable<Awaited<ReturnType<typeof createEventSpot>>>;
export type CreateEventSpotMutationBody = CreateEventSpot;
export type CreateEventSpotMutationError = ErrorType<void>;

export const useCreateEventSpot = <TError = ErrorType<void>, TContext = unknown>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof createEventSpot>>,
      TError,
      { id: number; data: CreateEventSpot },
      TContext
    >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient,
): UseMutationResult<
  Awaited<ReturnType<typeof createEventSpot>>,
  TError,
  { id: number; data: CreateEventSpot },
  TContext
> => {
  const mutationOptions = getCreateEventSpotMutationOptions(options);

  return useMutation(mutationOptions, queryClient);
};

export const deleteEventSpot = (id: number, options?: SecondParameter<typeof customInstance>) => {
  return customInstance<void>({ url: `/events/spots/${id}`, method: "DELETE" }, options);
};

export const getDeleteEventSpotMutationOptions = <TError = ErrorType<void>, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<Awaited<ReturnType<typeof deleteEventSpot>>, TError, { id: number }, TContext>;
  request?: SecondParameter<typeof customInstance>;
}): UseMutationOptions<Awaited<ReturnType<typeof deleteEventSpot>>, TError, { id: number }, TContext> => {
  const mutationKey = ["deleteEventSpot"];
  const { mutation: mutationOptions, request: requestOptions } = options
    ? options.mutation && "mutationKey" in options.mutation && options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, request: undefined };

  const mutationFn: MutationFunction<Awaited<ReturnType<typeof deleteEventSpot>>, { id: number }> = (props) => {
    const { id } = props ?? {};

    return deleteEventSpot(id, requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type DeleteEventSpotMutationResult = NonNullable<Awaited<ReturnType<typeof deleteEventSpot>>>;

export type DeleteEventSpotMutationError = ErrorType<void>;

export const useDeleteEventSpot = <TError = ErrorType<void>, TContext = unknown>(
  options?: {
    mutation?: UseMutationOptions<Awaited<ReturnType<typeof deleteEventSpot>>, TError, { id: number }, TContext>;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient,
): UseMutationResult<Awaited<ReturnType<typeof deleteEventSpot>>, TError, { id: number }, TContext> => {
  const mutationOptions = getDeleteEventSpotMutationOptions(options);

  return useMutation(mutationOptions, queryClient);
};

export const updateEventSpot = (
  id: number,
  updateEventSpot: UpdateEventSpot,
  options?: SecondParameter<typeof customInstance>,
) => {
  return customInstance<EventSpotSimple>(
    {
      url: `/events/spots/${id}`,
      method: "PATCH",
      headers: { "Content-Type": "application/json" },
      data: updateEventSpot,
    },
    options,
  );
};

export const getUpdateEventSpotMutationOptions = <TError = ErrorType<void>, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof updateEventSpot>>,
    TError,
    { id: number; data: UpdateEventSpot },
    TContext
  >;
  request?: SecondParameter<typeof customInstance>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof updateEventSpot>>,
  TError,
  { id: number; data: UpdateEventSpot },
  TContext
> => {
  const mutationKey = ["updateEventSpot"];
  const { mutation: mutationOptions, request: requestOptions } = options
    ? options.mutation && "mutationKey" in options.mutation && options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, request: undefined };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof updateEventSpot>>,
    { id: number; data: UpdateEventSpot }
  > = (props) => {
    const { id, data } = props ?? {};

    return updateEventSpot(id, data, requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type UpdateEventSpotMutationResult = NonNullable<Awaited<ReturnType<typeof updateEventSpot>>>;
export type UpdateEventSpotMutationBody = UpdateEventSpot;
export type UpdateEventSpotMutationError = ErrorType<void>;

export const useUpdateEventSpot = <TError = ErrorType<void>, TContext = unknown>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof updateEventSpot>>,
      TError,
      { id: number; data: UpdateEventSpot },
      TContext
    >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient,
): UseMutationResult<
  Awaited<ReturnType<typeof updateEventSpot>>,
  TError,
  { id: number; data: UpdateEventSpot },
  TContext
> => {
  const mutationOptions = getUpdateEventSpotMutationOptions(options);

  return useMutation(mutationOptions, queryClient);
};

export const createRole = (
  createRole: CreateRole,
  options?: SecondParameter<typeof customInstance>,
  signal?: AbortSignal,
) => {
  return customInstance<Role>(
    { url: `/roles/create`, method: "POST", headers: { "Content-Type": "application/json" }, data: createRole, signal },
    options,
  );
};

export const getCreateRoleMutationOptions = <TError = ErrorType<unknown>, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<Awaited<ReturnType<typeof createRole>>, TError, { data: CreateRole }, TContext>;
  request?: SecondParameter<typeof customInstance>;
}): UseMutationOptions<Awaited<ReturnType<typeof createRole>>, TError, { data: CreateRole }, TContext> => {
  const mutationKey = ["createRole"];
  const { mutation: mutationOptions, request: requestOptions } = options
    ? options.mutation && "mutationKey" in options.mutation && options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, request: undefined };

  const mutationFn: MutationFunction<Awaited<ReturnType<typeof createRole>>, { data: CreateRole }> = (props) => {
    const { data } = props ?? {};

    return createRole(data, requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type CreateRoleMutationResult = NonNullable<Awaited<ReturnType<typeof createRole>>>;
export type CreateRoleMutationBody = CreateRole;
export type CreateRoleMutationError = ErrorType<unknown>;

export const useCreateRole = <TError = ErrorType<unknown>, TContext = unknown>(
  options?: {
    mutation?: UseMutationOptions<Awaited<ReturnType<typeof createRole>>, TError, { data: CreateRole }, TContext>;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient,
): UseMutationResult<Awaited<ReturnType<typeof createRole>>, TError, { data: CreateRole }, TContext> => {
  const mutationOptions = getCreateRoleMutationOptions(options);

  return useMutation(mutationOptions, queryClient);
};

export const updateUserRole = (userId: string, roleId: number, options?: SecondParameter<typeof customInstance>) => {
  return customInstance<User>({ url: `/roles/update/${userId}/${roleId}`, method: "PATCH" }, options);
};

export const getUpdateUserRoleMutationOptions = <TError = ErrorType<unknown>, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof updateUserRole>>,
    TError,
    { userId: string; roleId: number },
    TContext
  >;
  request?: SecondParameter<typeof customInstance>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof updateUserRole>>,
  TError,
  { userId: string; roleId: number },
  TContext
> => {
  const mutationKey = ["updateUserRole"];
  const { mutation: mutationOptions, request: requestOptions } = options
    ? options.mutation && "mutationKey" in options.mutation && options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, request: undefined };

  const mutationFn: MutationFunction<Awaited<ReturnType<typeof updateUserRole>>, { userId: string; roleId: number }> = (
    props,
  ) => {
    const { userId, roleId } = props ?? {};

    return updateUserRole(userId, roleId, requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type UpdateUserRoleMutationResult = NonNullable<Awaited<ReturnType<typeof updateUserRole>>>;

export type UpdateUserRoleMutationError = ErrorType<unknown>;

export const useUpdateUserRole = <TError = ErrorType<unknown>, TContext = unknown>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof updateUserRole>>,
      TError,
      { userId: string; roleId: number },
      TContext
    >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient,
): UseMutationResult<
  Awaited<ReturnType<typeof updateUserRole>>,
  TError,
  { userId: string; roleId: number },
  TContext
> => {
  const mutationOptions = getUpdateUserRoleMutationOptions(options);

  return useMutation(mutationOptions, queryClient);
};

/**
 * All available roles to assign
 */
export const getAllRoles = (options?: SecondParameter<typeof customInstance>, signal?: AbortSignal) => {
  return customInstance<Role[]>({ url: `/roles`, method: "GET", signal }, options);
};

export const getGetAllRolesQueryKey = () => {
  return [`/roles`] as const;
};

export const getGetAllRolesQueryOptions = <
  TData = Awaited<ReturnType<typeof getAllRoles>>,
  TError = ErrorType<unknown>,
>(options?: {
  query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getAllRoles>>, TError, TData>>;
  request?: SecondParameter<typeof customInstance>;
}) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getGetAllRolesQueryKey();

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getAllRoles>>> = ({ signal }) =>
    getAllRoles(requestOptions, signal);

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof getAllRoles>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData> };
};

export type GetAllRolesQueryResult = NonNullable<Awaited<ReturnType<typeof getAllRoles>>>;
export type GetAllRolesQueryError = ErrorType<unknown>;

export function useGetAllRoles<TData = Awaited<ReturnType<typeof getAllRoles>>, TError = ErrorType<unknown>>(
  options: {
    query: Partial<UseQueryOptions<Awaited<ReturnType<typeof getAllRoles>>, TError, TData>> &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getAllRoles>>,
          TError,
          Awaited<ReturnType<typeof getAllRoles>>
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient,
): DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };
export function useGetAllRoles<TData = Awaited<ReturnType<typeof getAllRoles>>, TError = ErrorType<unknown>>(
  options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getAllRoles>>, TError, TData>> &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getAllRoles>>,
          TError,
          Awaited<ReturnType<typeof getAllRoles>>
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };
export function useGetAllRoles<TData = Awaited<ReturnType<typeof getAllRoles>>, TError = ErrorType<unknown>>(
  options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getAllRoles>>, TError, TData>>;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

export function useGetAllRoles<TData = Awaited<ReturnType<typeof getAllRoles>>, TError = ErrorType<unknown>>(
  options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getAllRoles>>, TError, TData>>;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {
  const queryOptions = getGetAllRolesQueryOptions(options);

  const query = useQuery(queryOptions, queryClient) as UseQueryResult<TData, TError> & {
    queryKey: DataTag<QueryKey, TData>;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}

/**
 * Get all allowed permissions registered in system
 */
export const getRoleAllPermissions = (options?: SecondParameter<typeof customInstance>, signal?: AbortSignal) => {
  return customInstance<GetRoleAllPermissions200Item[]>({ url: `/roles/permissions`, method: "GET", signal }, options);
};

export const getGetRoleAllPermissionsQueryKey = () => {
  return [`/roles/permissions`] as const;
};

export const getGetRoleAllPermissionsQueryOptions = <
  TData = Awaited<ReturnType<typeof getRoleAllPermissions>>,
  TError = ErrorType<unknown>,
>(options?: {
  query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getRoleAllPermissions>>, TError, TData>>;
  request?: SecondParameter<typeof customInstance>;
}) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getGetRoleAllPermissionsQueryKey();

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getRoleAllPermissions>>> = ({ signal }) =>
    getRoleAllPermissions(requestOptions, signal);

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof getRoleAllPermissions>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData> };
};

export type GetRoleAllPermissionsQueryResult = NonNullable<Awaited<ReturnType<typeof getRoleAllPermissions>>>;
export type GetRoleAllPermissionsQueryError = ErrorType<unknown>;

export function useGetRoleAllPermissions<
  TData = Awaited<ReturnType<typeof getRoleAllPermissions>>,
  TError = ErrorType<unknown>,
>(
  options: {
    query: Partial<UseQueryOptions<Awaited<ReturnType<typeof getRoleAllPermissions>>, TError, TData>> &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getRoleAllPermissions>>,
          TError,
          Awaited<ReturnType<typeof getRoleAllPermissions>>
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient,
): DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };
export function useGetRoleAllPermissions<
  TData = Awaited<ReturnType<typeof getRoleAllPermissions>>,
  TError = ErrorType<unknown>,
>(
  options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getRoleAllPermissions>>, TError, TData>> &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getRoleAllPermissions>>,
          TError,
          Awaited<ReturnType<typeof getRoleAllPermissions>>
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };
export function useGetRoleAllPermissions<
  TData = Awaited<ReturnType<typeof getRoleAllPermissions>>,
  TError = ErrorType<unknown>,
>(
  options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getRoleAllPermissions>>, TError, TData>>;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

export function useGetRoleAllPermissions<
  TData = Awaited<ReturnType<typeof getRoleAllPermissions>>,
  TError = ErrorType<unknown>,
>(
  options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getRoleAllPermissions>>, TError, TData>>;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {
  const queryOptions = getGetRoleAllPermissionsQueryOptions(options);

  const query = useQuery(queryOptions, queryClient) as UseQueryResult<TData, TError> & {
    queryKey: DataTag<QueryKey, TData>;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}

/**
 * Find all events including not published/visible events
 */
export const getManagementEvents = (
  params?: GetManagementEventsParams,
  options?: SecondParameter<typeof customInstance>,
  signal?: AbortSignal,
) => {
  return customInstance<GetManagementEvents200>({ url: `/management/events`, method: "GET", params, signal }, options);
};

export const getGetManagementEventsQueryKey = (params?: GetManagementEventsParams) => {
  return [`/management/events`, ...(params ? [params] : [])] as const;
};

export const getGetManagementEventsQueryOptions = <
  TData = Awaited<ReturnType<typeof getManagementEvents>>,
  TError = ErrorType<unknown>,
>(
  params?: GetManagementEventsParams,
  options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getManagementEvents>>, TError, TData>>;
    request?: SecondParameter<typeof customInstance>;
  },
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getGetManagementEventsQueryKey(params);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getManagementEvents>>> = ({ signal }) =>
    getManagementEvents(params, requestOptions, signal);

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof getManagementEvents>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData> };
};

export type GetManagementEventsQueryResult = NonNullable<Awaited<ReturnType<typeof getManagementEvents>>>;
export type GetManagementEventsQueryError = ErrorType<unknown>;

export function useGetManagementEvents<
  TData = Awaited<ReturnType<typeof getManagementEvents>>,
  TError = ErrorType<unknown>,
>(
  params: undefined | GetManagementEventsParams,
  options: {
    query: Partial<UseQueryOptions<Awaited<ReturnType<typeof getManagementEvents>>, TError, TData>> &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getManagementEvents>>,
          TError,
          Awaited<ReturnType<typeof getManagementEvents>>
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient,
): DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };
export function useGetManagementEvents<
  TData = Awaited<ReturnType<typeof getManagementEvents>>,
  TError = ErrorType<unknown>,
>(
  params?: GetManagementEventsParams,
  options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getManagementEvents>>, TError, TData>> &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getManagementEvents>>,
          TError,
          Awaited<ReturnType<typeof getManagementEvents>>
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };
export function useGetManagementEvents<
  TData = Awaited<ReturnType<typeof getManagementEvents>>,
  TError = ErrorType<unknown>,
>(
  params?: GetManagementEventsParams,
  options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getManagementEvents>>, TError, TData>>;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

export function useGetManagementEvents<
  TData = Awaited<ReturnType<typeof getManagementEvents>>,
  TError = ErrorType<unknown>,
>(
  params?: GetManagementEventsParams,
  options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getManagementEvents>>, TError, TData>>;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {
  const queryOptions = getGetManagementEventsQueryOptions(params, options);

  const query = useQuery(queryOptions, queryClient) as UseQueryResult<TData, TError> & {
    queryKey: DataTag<QueryKey, TData>;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}

/**
 * Send e-mail
 */
export const sendMail = (
  sendEmailDTO: SendEmailDTO,
  options?: SecondParameter<typeof customInstance>,
  signal?: AbortSignal,
) => {
  return customInstance<void>(
    { url: `/mail`, method: "POST", headers: { "Content-Type": "application/json" }, data: sendEmailDTO, signal },
    options,
  );
};

export const getSendMailMutationOptions = <TError = ErrorType<Error>, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<Awaited<ReturnType<typeof sendMail>>, TError, { data: SendEmailDTO }, TContext>;
  request?: SecondParameter<typeof customInstance>;
}): UseMutationOptions<Awaited<ReturnType<typeof sendMail>>, TError, { data: SendEmailDTO }, TContext> => {
  const mutationKey = ["sendMail"];
  const { mutation: mutationOptions, request: requestOptions } = options
    ? options.mutation && "mutationKey" in options.mutation && options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, request: undefined };

  const mutationFn: MutationFunction<Awaited<ReturnType<typeof sendMail>>, { data: SendEmailDTO }> = (props) => {
    const { data } = props ?? {};

    return sendMail(data, requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type SendMailMutationResult = NonNullable<Awaited<ReturnType<typeof sendMail>>>;
export type SendMailMutationBody = SendEmailDTO;
export type SendMailMutationError = ErrorType<Error>;

export const useSendMail = <TError = ErrorType<Error>, TContext = unknown>(
  options?: {
    mutation?: UseMutationOptions<Awaited<ReturnType<typeof sendMail>>, TError, { data: SendEmailDTO }, TContext>;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient,
): UseMutationResult<Awaited<ReturnType<typeof sendMail>>, TError, { data: SendEmailDTO }, TContext> => {
  const mutationOptions = getSendMailMutationOptions(options);

  return useMutation(mutationOptions, queryClient);
};
