services:
  database:
    container_name: database
    image: postgres:16-alpine
    environment:
      - POSTGRES_PORT=${DB_PORT:-5432}
      - POSTGRES_DB=${DB_NAME:-database}
      - POSTGRES_USER=${DB_USER:-user}
      - POSTGRES_PASSWORD=${DB_PASS:-password}
    env_file:
      - .env
    ports:
      - ${POSTGRES_PORT:-5432}:${POSTGRES_PORT:-5432}
    volumes:
      - ./database/data:/var/lib/postgresql/data
    networks:
      - app-network
    healthcheck:
      test: [ "CMD-SHELL", "sh -c 'pg_isready -U ${POSTGRES_USER} ${POSTGRES_DB}'" ]
      interval: 30s
      timeout: 10s
      retries: 5

  backend:
    container_name: backend_app1
    build:
      context: ./backend
      args:
        - PROJECT_NAME=api
      target: production
    environment:
      - DB_HOST=${DB_HOST:-database}
      - DB_PORT=${DB_PORT:-5432}
      - DB_NAME=${DB_NAME:-database}
      - DB_USER=${DB_USER:-user}
      - BASE_URL=${BASE_URL:-http://localhost:4000}
      - PORT_APP1=${PORT_APP1:-4000}
      - JWT_SECRET=${JWT_SECRET:-secret}
      - STORAGE_ROOT=${STORAGE_ROOT:-/app/storage}
    env_file:
      - .env
    ports:
      - ${PORT_APP1:-4000}:${PORT_APP1:-4000}
    networks:
      - app-network
    healthcheck:
      test: curl --fail http://127.0.0.1:4000/health || exit 1
      interval: 30s
      timeout: 10s
      retries: 5
    volumes:
      - backend_data:/app/storage
    depends_on:
      - database
      - database_run_migrations

  database_run_migrations:
    container_name: database_migrations
    build:
      context: ./backend
      dockerfile: Dockerfile.Migration
    environment:
      - DB_HOST=${DB_HOST:-database}
    env_file:
      - .env
    restart: no
    networks:
      - app-network
    depends_on:
      - database

  frontend:
    container_name: frontend
    build:
      context: ./frontend
    environment:
      - NEXT_PUBLIC_APP1_URL=${NEXT_PUBLIC_APP1_URL:-http://localhost:4000}
      - PORT_FE=${PORT_FE:-3000}
    env_file:
      - .env
    ports:
      - ${PORT_FE:-3000}:${PORT_FE:-3000}
    networks:
      - app-network
    depends_on:
      - backend
      - database

volumes:
  postgres_data:
  backend_data:

networks:
  app-network:
