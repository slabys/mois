services:
  database:
    container_name: database
    image: postgres:16-alpine
    env_file:
      - ./database/.env
    ports:
      - ${POSTGRES_PORT:-5432}:5432
    volumes:
      - ./database/data:/var/lib/postgresql/data
    networks:
      - app-network
    healthcheck:
      test: [ "CMD-SHELL", "sh -c 'pg_isready -U ${POSTGRES_USER} ${POSTGRES_DB}'" ]
      interval: 30s
      timeout: 10s
      retries: 5

  backend:
    container_name: backend_app1
    build:
      context: ./backend
      args:
        - PROJECT_NAME=api
      target: production
    env_file:
      - ./backend/.env
    environment:
      - DB_HOST=database
      - STORAGE_ROOT=/app/storage
    ports:
      - ${PORT_APP1:-4000}:4000
    networks:
      - app-network
    healthcheck:
      test: curl --fail http://127.0.0.1:4000/health || exit 1
      interval: 30s
      timeout: 10s
      retries: 5
    volumes:
      - backend_data:/app/storage
    depends_on:
      - database
      - database_run_migrations

  database_run_migrations:
    container_name: database_migrations
    build:
      context: ./backend
      dockerfile: Dockerfile.Migration
    env_file:
      - ./backend/.env
    environment:
      - DB_HOST=database
    networks:
      - app-network
    depends_on:
      - database

  frontend:
    container_name: frontend
    build:
      context: ./frontend
    env_file:
      - ./frontend/.env
    ports:
      - ${PORT_FE:-3000}:3000
    networks:
      - app-network
    depends_on:
      - backend
      - database

  nginx:
    container_name: nginx
    build:
      context: ./nginx
    env_file:
      - ./nginx/.env
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/default.conf:/etc/nginx/conf.d/default.conf
      - /etc/letsencrypt:/etc/letsencrypt
      - /var/www/certbot:/var/www/certbot
    networks:
      - app-network
    depends_on:
      - frontend
      - backend

  certbot:
    container_name: certbot
    image: certbot/certbot
    volumes:
      - /etc/letsencrypt:/etc/letsencrypt
      - /var/www/certbot:/var/www/certbot
    entrypoint: "/bin/sh -c 'trap exit TERM; while :; do certbot renew; sleep 12h; done;'"
    networks:
      - app-network
    depends_on:
      - nginx

volumes:
  postgres_data:
  backend_data:

networks:
  app-network:
